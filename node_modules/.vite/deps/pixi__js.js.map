{
  "version": 3,
  "sources": ["../../@pixi/display/src/Bounds.ts", "../../@pixi/display/src/DisplayObject.ts", "../../@pixi/display/src/Container.ts", "../../@pixi/display/src/settings.ts", "../../@pixi/sprite/src/Sprite.ts", "../../@pixi/mixin-cache-as-bitmap/src/index.ts", "../../@pixi/mixin-get-child-by-name/src/index.ts", "../../@pixi/mixin-get-global-position/src/index.ts", "../../@pixi/filter-alpha/lib/alpha.mjs", "../../@pixi/filter-alpha/src/AlphaFilter.ts", "../../@pixi/filter-blur/src/generateBlurFragSource.ts", "../../@pixi/filter-blur/src/generateBlurVertSource.ts", "../../@pixi/filter-blur/src/BlurFilterPass.ts", "../../@pixi/filter-blur/src/BlurFilter.ts", "../../@pixi/filter-color-matrix/lib/colorMatrix.mjs", "../../@pixi/filter-color-matrix/src/ColorMatrixFilter.ts", "../../@pixi/filter-displacement/lib/displacement.mjs", "../../@pixi/filter-displacement/lib/displacement2.mjs", "../../@pixi/filter-displacement/src/DisplacementFilter.ts", "../../@pixi/filter-fxaa/lib/fxaa.mjs", "../../@pixi/filter-fxaa/lib/fxaa2.mjs", "../../@pixi/filter-fxaa/src/FXAAFilter.ts", "../../@pixi/filter-noise/lib/noise.mjs", "../../@pixi/filter-noise/src/NoiseFilter.ts", "../../pixi.js/src/filters.ts", "../../@pixi/events/src/FederatedEvent.ts", "../../@pixi/events/src/FederatedMouseEvent.ts", "../../@pixi/events/src/FederatedPointerEvent.ts", "../../@pixi/events/src/FederatedWheelEvent.ts", "../../@pixi/events/src/EventBoundary.ts", "../../@pixi/events/src/EventSystem.ts", "../../@pixi/events/src/FederatedEventTarget.ts", "../../@pixi/accessibility/src/accessibleTarget.ts", "../../@pixi/accessibility/src/AccessibilityManager.ts", "../../@pixi/app/src/Application.ts", "../../@pixi/app/src/ResizePlugin.ts", "../../@pixi/compressed-textures/src/const.ts", "../../@pixi/compressed-textures/src/loaders/detectCompressedTextures.ts", "../../@pixi/compressed-textures/src/resources/BlobResource.ts", "../../@pixi/compressed-textures/src/resources/CompressedTextureResource.ts", "../../@pixi/compressed-textures/src/parsers/parseDDS.ts", "../../@pixi/compressed-textures/src/parsers/parseKTX.ts", "../../@pixi/compressed-textures/src/loaders/loadDDS.ts", "../../@pixi/compressed-textures/src/loaders/loadKTX.ts", "../../@pixi/compressed-textures/src/loaders/resolveCompressedTextureUrl.ts", "../../@pixi/extract/src/Extract.ts", "../../@pixi/graphics/src/utils/buildCircle.ts", "../../@pixi/graphics/src/utils/buildPoly.ts", "../../@pixi/graphics/src/utils/buildRectangle.ts", "../../@pixi/graphics/src/utils/buildRoundedRectangle.ts", "../../@pixi/graphics/src/const.ts", "../../@pixi/graphics/src/utils/ArcUtils.ts", "../../@pixi/graphics/src/utils/BatchPart.ts", "../../@pixi/graphics/src/utils/BezierUtils.ts", "../../@pixi/graphics/src/utils/buildLine.ts", "../../@pixi/graphics/src/utils/QuadraticUtils.ts", "../../@pixi/graphics/src/utils/index.ts", "../../@pixi/graphics/src/GraphicsData.ts", "../../@pixi/graphics/src/GraphicsGeometry.ts", "../../@pixi/graphics/src/styles/FillStyle.ts", "../../@pixi/graphics/src/styles/LineStyle.ts", "../../@pixi/graphics/src/Graphics.ts", "../../@pixi/graphics/src/index.ts", "../../@pixi/mesh/src/MeshBatchUvs.ts", "../../@pixi/mesh/src/Mesh.ts", "../../@pixi/mesh/src/MeshGeometry.ts", "../../@pixi/mesh/lib/shader/mesh.mjs", "../../@pixi/mesh/lib/shader/mesh2.mjs", "../../@pixi/mesh/src/MeshMaterial.ts", "../../@pixi/mesh-extras/src/geometry/PlaneGeometry.ts", "../../@pixi/mesh-extras/src/geometry/RopeGeometry.ts", "../../@pixi/mesh-extras/src/SimplePlane.ts", "../../@pixi/mesh-extras/src/NineSlicePlane.ts", "../../@pixi/mesh-extras/src/SimpleMesh.ts", "../../@pixi/mesh-extras/src/SimpleRope.ts", "../../@pixi/particle-container/src/ParticleContainer.ts", "../../@pixi/particle-container/src/ParticleBuffer.ts", "../../@pixi/particle-container/lib/particles.mjs", "../../@pixi/particle-container/lib/particles2.mjs", "../../@pixi/particle-container/src/ParticleRenderer.ts", "../../@pixi/text/src/const.ts", "../../@pixi/text/src/TextMetrics.ts", "../../@pixi/text/src/TextStyle.ts", "../../@pixi/text/src/Text.ts", "../../@pixi/prepare/src/CountLimiter.ts", "../../@pixi/prepare/src/BasePrepare.ts", "../../@pixi/prepare/src/settings.ts", "../../@pixi/prepare/src/Prepare.ts", "../../@pixi/prepare/src/TimeLimiter.ts", "../../@pixi/sprite-animated/src/AnimatedSprite.ts", "../../@pixi/sprite-tiling/src/TilingSprite.ts", "../../@pixi/sprite-tiling/lib/sprite-tiling.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling2.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-fallback.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-fallback2.mjs", "../../@pixi/sprite-tiling/lib/sprite-tiling-simple.mjs", "../../@pixi/sprite-tiling/src/TilingSpriteRenderer.ts", "../../@pixi/spritesheet/src/Spritesheet.ts", "../../@pixi/spritesheet/src/spritesheetAsset.ts", "../../@pixi/text-bitmap/src/BitmapFontData.ts", "../../@pixi/text-bitmap/src/formats/TextFormat.ts", "../../@pixi/text-bitmap/src/formats/XMLFormat.ts", "../../@pixi/text-bitmap/src/formats/XMLStringFormat.ts", "../../@pixi/text-bitmap/src/formats/index.ts", "../../@pixi/text-bitmap/src/utils/generateFillStyle.ts", "../../@pixi/text-bitmap/src/utils/drawGlyph.ts", "../../@pixi/text-bitmap/src/utils/extractCharCode.ts", "../../@pixi/text-bitmap/src/utils/splitTextToCharacters.ts", "../../@pixi/text-bitmap/src/utils/resolveCharacters.ts", "../../@pixi/text-bitmap/src/BitmapFont.ts", "../../@pixi/text-bitmap/lib/shader/msdf.mjs", "../../@pixi/text-bitmap/lib/shader/msdf2.mjs", "../../@pixi/text-bitmap/src/BitmapText.ts", "../../@pixi/text-bitmap/src/loadBitmapFont.ts"],
  "sourcesContent": ["import { Rectangle } from '@pixi/core';\n\nimport type { IPointData, Matrix, Transform } from '@pixi/core';\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n * @memberof PIXI\n */\nexport class Bounds\n{\n    /** @default Infinity */\n    public minX: number;\n\n    /** @default Infinity */\n    public minY: number;\n\n    /** @default -Infinity */\n    public maxX: number;\n\n    /** @default -Infinity */\n    public maxY: number;\n\n    public rect: Rectangle;\n\n    /**\n     * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n     * Updated from outside, thus public modifier.\n     */\n    public updateID: number;\n\n    constructor()\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.rect = null;\n        this.updateID = -1;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     * @returns - True if empty.\n     */\n    isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /** Clears the bounds and resets. */\n    clear(): void\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     * @param rect - Temporary object will be used if AABB is not empty\n     * @returns - A rectangle of the bounds\n     */\n    getRectangle(rect?: Rectangle): Rectangle\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     * @param point - The point to add.\n     */\n    addPoint(point: IPointData): void\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a point, after transformed. This should be inlined when its possible.\n     * @param matrix\n     * @param point\n     */\n    addPointMatrix(matrix: Matrix, point: IPointData): void\n    {\n        const { a, b, c, d, tx, ty } = matrix;\n\n        const x = (a * point.x) + (c * point.y) + tx;\n        const y = (b * point.x) + (d * point.y) + ty;\n\n        this.minX = Math.min(this.minX, x);\n        this.maxX = Math.max(this.maxX, x);\n        this.minY = Math.min(this.minY, y);\n        this.maxY = Math.max(this.maxY, y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     * @param vertices - The verts to add.\n     */\n    addQuad(vertices: Float32Array): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     * @param transform - transform to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrame(transform: Transform, x0: number, y0: number, x1: number, y1: number): void\n    {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n\n    /**\n     * Adds sprite frame, multiplied by matrix\n     * @param matrix - matrix to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrameMatrix(matrix: Matrix, x0: number, y0: number, x1: number, y1: number): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const x = vertexData[i];\n            const y = vertexData[i + 1];\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of mesh vertices\n     * @param transform - mesh transform\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertices(transform: Transform, vertices: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n\n    /**\n     * Add an array of mesh vertices.\n     * @param matrix - mesh matrix\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     * @param padX - x padding\n     * @param padY - y padding\n     */\n    addVerticesMatrix(matrix: Matrix, vertices: Float32Array, beginOffset: number,\n        endOffset: number, padX = 0, padY = padX): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other {@link Bounds}.\n     * @param bounds - The Bounds to be added\n     */\n    addBounds(bounds: Bounds): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds.\n     * @param bounds - The Bounds to be added.\n     * @param mask - TODO\n     */\n    addBoundsMask(bounds: Bounds, mask: Bounds): void\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n     * @param bounds - other bounds\n     * @param matrix - multiplicator\n     */\n    addBoundsMatrix(bounds: Bounds, matrix: Matrix): void\n    {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle.\n     * @param bounds - TODO\n     * @param area - TODO\n     */\n    addBoundsArea(bounds: Bounds, area: Rectangle): void\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     */\n    pad(paddingX = 0, paddingY = paddingX): void\n    {\n        if (!this.isEmpty())\n        {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    }\n\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     * @param padX - padding X\n     * @param padY - padding Y\n     */\n    addFramePad(x0: number, y0: number, x1: number, y1: number, padX: number, padY: number): void\n    {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n}\n", "import { DEG_TO_RAD, RAD_TO_DEG, Rectangle, Transform, utils } from '@pixi/core';\nimport { Bounds } from './Bounds';\n\nimport type { Filter, IPointData, MaskData, Matrix, ObservablePoint, Point, Renderer } from '@pixi/core';\nimport type { Container } from './Container';\n\nexport interface IDestroyOptions\n{\n    children?: boolean;\n    texture?: boolean;\n    baseTexture?: boolean;\n}\n\nexport interface DisplayObjectEvents extends GlobalMixins.DisplayObjectEvents\n{\n    added: [container: Container];\n    childAdded: [child: DisplayObject, container: Container, index: number];\n    childRemoved: [child: DisplayObject, container: Container, index: number];\n    destroyed: [];\n    removed: [container: Container];\n}\n\nexport interface DisplayObject\n    extends Omit<GlobalMixins.DisplayObject, keyof utils.EventEmitter<DisplayObjectEvents>>,\n    utils.EventEmitter<DisplayObjectEvents> {}\n\n/**\n * The base class for all objects that are rendered on the screen.\n *\n * This is an abstract class and can not be used on its own; rather it should be extended.\n *\n * ## Display objects implemented in PixiJS\n *\n * | Display Object                  | Description                                                           |\n * | ------------------------------- | --------------------------------------------------------------------- |\n * | {@link PIXI.Container}          | Adds support for `children` to DisplayObject                          |\n * | {@link PIXI.Graphics}           | Shape-drawing display object similar to the Canvas API                |\n * | {@link PIXI.Sprite}             | Draws textures (i.e. images)                                          |\n * | {@link PIXI.Text}               | Draws text using the Canvas API internally                            |\n * | {@link PIXI.BitmapText}         | More scaleable solution for text rendering, reusing glyph textures    |\n * | {@link PIXI.TilingSprite}       | Draws textures/images in a tiled fashion                              |\n * | {@link PIXI.AnimatedSprite}     | Draws an animation of multiple images                                 |\n * | {@link PIXI.Mesh}               | Provides a lower-level API for drawing meshes with custom data        |\n * | {@link PIXI.NineSlicePlane}     | Mesh-related                                                          |\n * | {@link PIXI.SimpleMesh}         | v4-compatible mesh                                                    |\n * | {@link PIXI.SimplePlane}        | Mesh-related                                                          |\n * | {@link PIXI.SimpleRope}         | Mesh-related                                                          |\n *\n * ## Transforms\n *\n * The [transform]{@link DisplayObject#transform} of a display object describes the projection from its\n * local coordinate space to its parent's local coordinate space. The following properties are derived\n * from the transform:\n *\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Property</th>\n *       <th>Description</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>\n *       <td>\n *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n *         is equal to position, regardless of the other three transformations. In other words, It is the center of\n *         rotation, scaling, and skewing.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[position]{@link PIXI.DisplayObject#position}</td>\n *       <td>\n *         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local\n *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[scale]{@link PIXI.DisplayObject#scale}</td>\n *       <td>\n *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n *         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>\n *       <td>\n *          Rotation. This will rotate the display object's projection by this angle (in radians).\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[skew]{@link PIXI.DisplayObject#skew}</td>\n *       <td>\n *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n *         <p>\n *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n *         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n *         ⍺ and \"skew.y\" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be\n *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will\n *         be rotated by an angle between ⍺ and β.\n *         </p>\n *         <p>\n *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n *         a rotation. Indeed, if \"skew.x\" = -ϴ and \"skew.y\" = ϴ, it will produce an equivalent of \"rotation\" = ϴ.\n *         </p>\n *         <p>\n *         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are communtative operations. Indeed,\n *         because rotation is essentially a careful combination of the two.\n *         </p>\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>angle</td>\n *       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>\n *     </tr>\n *     <tr>\n *       <td>x</td>\n *       <td>Translation. This is an alias for position.x!</td>\n *     </tr>\n *     <tr>\n *       <td>y</td>\n *       <td>Translation. This is an alias for position.y!</td>\n *     </tr>\n *     <tr>\n *       <td>width</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing\n *         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n *         is no concept of user-defined width.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>height</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing\n *         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n *         is no concept of user-defined height.\n *       </td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * ## Bounds\n *\n * The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit\n * around it. The abstract `calculateBounds` method is responsible for providing it (and it should use the\n * `worldTransform` to calculate in world space).\n *\n * There are a few additional types of bounding boxes:\n *\n * | Bounds                | Description                                                                              |\n * | --------------------- | ---------------------------------------------------------------------------------------- |\n * | World Bounds          | This is synonymous is the regular bounds described above. See `getBounds()`.             |\n * | Local Bounds          | This the axis-aligned bounding box in the parent's local space. See `getLocalBounds()`.  |\n * | Render Bounds         | The bounds, but including extra rendering effects like filter padding.                   |\n * | Projected Bounds      | The bounds of the projected display object onto the screen. Usually equals world bounds. |\n * | Relative Bounds       | The bounds of a display object when projected onto a ancestor's (or parent's) space.     |\n * | Natural Bounds        | The bounds of an object in its own local space (not parent's space, like in local bounds)|\n * | Content Bounds        | The natural bounds when excluding all children of a `Container`.                         |\n *\n * ### calculateBounds\n *\n * [Container]{@link Container} already implements `calculateBounds` in a manner that includes children.\n *\n * But for a non-Container display object, the `calculateBounds` method must be overridden in order for `getBounds` and\n * `getLocalBounds` to work. This method must write the bounds into `this._bounds`.\n *\n * Generally, the following technique works for most simple cases: take the list of points\n * forming the \"hull\" of the object (i.e. outline of the object's shape), and then add them\n * using {@link PIXI.Bounds#addPointMatrix}.\n *\n * ```js\n * calculateBounds()\n * {\n *     const points = [...];\n *\n *     for (let i = 0, j = points.length; i < j; i++)\n *     {\n *         this._bounds.addPointMatrix(this.worldTransform, points[i]);\n *     }\n * }\n * ```\n *\n * You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them\n * in one array together.\n *\n * ## Alpha\n *\n * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display\n * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\n * applied on any ancestor further up the chain).\n *\n * The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.\n *\n * ## Renderable vs Visible\n *\n * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the\n * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display\n * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not\n * be calculated.\n *\n * It is recommended that applications use the `renderable` property for culling. See\n * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or\n * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.\n *\n * Otherwise, to prevent an object from rendering in the general-purpose sense - `visible` is the property to use. This\n * one is also better in terms of performance.\n * @memberof PIXI\n */\nexport abstract class DisplayObject extends utils.EventEmitter<DisplayObjectEvents>\n{\n    abstract sortDirty: boolean;\n\n    /** The display object container that contains this display object. */\n    public parent: Container;\n\n    /**\n     * The multiplied alpha of the displayObject.\n     * @readonly\n     */\n    public worldAlpha: number;\n\n    /**\n     * World transform and local transform of this object.\n     * This will become read-only later, please do not assign anything there unless you know what are you doing.\n     */\n    public transform: Transform;\n\n    /** The opacity of the object. */\n    public alpha: number;\n\n    /**\n     * The visibility of the object. If false the object will not be drawn, and\n     * the updateTransform function will not be called.\n     *\n     * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n     */\n    public visible: boolean;\n\n    /**\n     * Can this object be rendered, if false the object will not be drawn but the updateTransform\n     * methods will still be called.\n     *\n     * Only affects recursive calls from parent. You can ask for bounds manually.\n     */\n    public renderable: boolean;\n\n    /**\n     * Should this object be rendered if the bounds of this object are out of frame?\n     *\n     * Culling has no effect on whether updateTransform is called.\n     */\n    public cullable: boolean;\n\n    /**\n     * If set, this shape is used for culling instead of the bounds of this object.\n     * It can improve the culling performance of objects with many children.\n     * The culling area is defined in local space.\n     */\n    public cullArea: Rectangle;\n\n    /**\n     * The area the filter is applied to. This is used as more of an optimization\n     * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n     *\n     * Also works as an interaction mask.\n     */\n    public filterArea: Rectangle;\n\n    /**\n     * Sets the filters for the displayObject.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * To remove filters simply set this property to `'null'`.\n     */\n    public filters: Filter[] | null;\n\n    /** Used to fast check if a sprite is.. a sprite! */\n    public isSprite: boolean;\n\n    /** Does any other displayObject use this object as a mask? */\n    public isMask: boolean;\n\n    /**\n     * Which index in the children array the display component was before the previous zIndex sort.\n     * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n     * @protected\n     */\n    public _lastSortedIndex: number;\n\n    /**\n     * The original, cached mask of the object.\n     * @protected\n     */\n    public _mask: Container | MaskData;\n\n    /** The bounds object, this is used to calculate and store the bounds of the displayObject. */\n    public _bounds: Bounds;\n\n    /** Local bounds object, swapped with `_bounds` when using `getLocalBounds()`. */\n    public _localBounds: Bounds;\n\n    /**\n     * The zIndex of the displayObject.\n     * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n     * @protected\n     */\n    protected _zIndex: number;\n\n    /**\n     * Currently enabled filters.\n     * @protected\n     */\n    protected _enabledFilters: Filter[];\n\n    /** Flags the cached bounds as dirty. */\n    protected _boundsID: number;\n\n    /** Cache of this display-object's bounds-rectangle. */\n    protected _boundsRect: Rectangle;\n\n    /** Cache of this display-object's local-bounds rectangle. */\n    protected _localBoundsRect: Rectangle;\n\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    protected _destroyed: boolean;\n\n    /** The number of times this object is used as a mask by another object. */\n    private _maskRefCount: number;\n    private tempDisplayObjectParent: TemporaryDisplayObject;\n    public displayObjectUpdateTransform: () => void;\n\n    /**\n     * Mixes all enumerable properties and methods from a source object to DisplayObject.\n     * @param source - The source of properties and methods to mix in.\n     */\n    static mixin(source: utils.Dict<any>): void\n    {\n        // in ES8/ES2017, this would be really easy:\n        // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));\n\n        // get all the enumerable property keys\n        const keys = Object.keys(source);\n\n        // loop through properties\n        for (let i = 0; i < keys.length; ++i)\n        {\n            const propertyName = keys[i];\n\n            // Set the property using the property descriptor - this works for accessors and normal value properties\n            Object.defineProperty(\n                DisplayObject.prototype,\n                propertyName,\n                Object.getOwnPropertyDescriptor(source, propertyName)\n            );\n        }\n    }\n\n    constructor()\n    {\n        super();\n\n        this.tempDisplayObjectParent = null;\n\n        // TODO: need to create Transform from factory\n        this.transform = new Transform();\n        this.alpha = 1;\n        this.visible = true;\n        this.renderable = true;\n        this.cullable = false;\n        this.cullArea = null;\n\n        this.parent = null;\n        this.worldAlpha = 1;\n\n        this._lastSortedIndex = 0;\n        this._zIndex = 0;\n\n        this.filterArea = null;\n        this.filters = null;\n        this._enabledFilters = null;\n\n        this._bounds = new Bounds();\n        this._localBounds = null;\n        this._boundsID = 0;\n        this._boundsRect = null;\n        this._localBoundsRect = null;\n        this._mask = null;\n        this._maskRefCount = 0;\n        this._destroyed = false;\n\n        this.isSprite = false;\n        this.isMask = false;\n    }\n\n    /**\n     * Fired when this DisplayObject is added to a Container.\n     * @instance\n     * @event added\n     * @param {PIXI.Container} container - The container added to.\n     */\n\n    /**\n     * Fired when this DisplayObject is removed from a Container.\n     * @instance\n     * @event removed\n     * @param {PIXI.Container} container - The container removed from.\n     */\n\n    /**\n     * Fired when this DisplayObject is destroyed. This event is emitted once\n     * destroy is finished.\n     * @instance\n     * @event destroyed\n     */\n\n    /** Readonly flag for destroyed display objects. */\n    get destroyed(): boolean\n    {\n        return this._destroyed;\n    }\n\n    /** Recalculates the bounds of the display object. */\n    abstract calculateBounds(): void;\n\n    abstract removeChild(child: DisplayObject): void;\n\n    /**\n     * Renders the object using the WebGL renderer.\n     * @param renderer - The renderer.\n     */\n    abstract render(renderer: Renderer): void;\n\n    /** Recursively updates transform of all objects from the root to this one internal function for toLocal() */\n    protected _recursivePostUpdateTransform(): void\n    {\n        if (this.parent)\n        {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else\n        {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    }\n\n    /** Updates the object transform for rendering. TODO - Optimization pass! */\n    updateTransform(): void\n    {\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    }\n\n    /**\n     * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.\n     *\n     * This method is expensive on containers with a large subtree (like the stage). This is because the bounds\n     * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to\n     * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update\n     * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n     * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,\n     * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as\n     * its height increases.\n     *\n     * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.\n     * The world bounds of all display objects in a container's **subtree** will also be recalculated.\n     *\n     * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds\n     * calculation if needed.\n     *\n     * ```js\n     * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n     * ```\n     *\n     * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This\n     * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\n     * details.\n     *\n     * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms\n     * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\n     * cases.\n     * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n     */\n    getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        if (!skipUpdate)\n        {\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n\n        if (this._bounds.updateID !== this._boundsID)\n        {\n            this.calculateBounds();\n            this._bounds.updateID = this._boundsID;\n        }\n\n        if (!rect)\n        {\n            if (!this._boundsRect)\n            {\n                this._boundsRect = new Rectangle();\n            }\n\n            rect = this._boundsRect;\n        }\n\n        return this._bounds.getRectangle(rect);\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @returns - The rectangular bounding area.\n     */\n    getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        if (!rect)\n        {\n            if (!this._localBoundsRect)\n            {\n                this._localBoundsRect = new Rectangle();\n            }\n\n            rect = this._localBoundsRect;\n        }\n\n        if (!this._localBounds)\n        {\n            this._localBounds = new Bounds();\n        }\n\n        const transformRef = this.transform;\n        const parentRef = this.parent;\n\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n\n        const worldBounds = this._bounds;\n        const worldBoundsID = this._boundsID;\n\n        this._bounds = this._localBounds;\n\n        const bounds = this.getBounds(false, rect);\n\n        this.parent = parentRef;\n        this.transform = transformRef;\n\n        this._bounds = worldBounds;\n        this._bounds.updateID += this._boundsID - worldBoundsID;// reflect side-effects\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the global position of the display object.\n     * @param position - The world origin to calculate from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - A point object representing the position of this object.\n     */\n    toGlobal<P extends IPointData = Point>(position: IPointData, point?: P, skipUpdate = false): P\n    {\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // don't need to update the lot\n        return this.worldTransform.apply<P>(position, point);\n    }\n\n    /**\n     * Calculates the local position of the display object relative to another point.\n     * @param position - The world origin to calculate from.\n     * @param from - The DisplayObject to calculate the global position from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform\n     * @returns - A point object representing the position of this object\n     */\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse<P>(position, point);\n    }\n\n    /**\n     * Set the parent Container of this DisplayObject.\n     * @param container - The Container to add this DisplayObject to.\n     * @returns - The Container that this DisplayObject was added to.\n     */\n    setParent(container: Container): Container\n    {\n        if (!container || !container.addChild)\n        {\n            throw new Error('setParent: Argument must be a Container');\n        }\n\n        container.addChild(this);\n\n        return container;\n    }\n\n    /** Remove the DisplayObject from its parent Container. If the DisplayObject has no parent, do nothing. */\n    removeFromParent()\n    {\n        this.parent?.removeChild(this);\n    }\n\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     * @param x - The X position\n     * @param y - The Y position\n     * @param scaleX - The X scale value\n     * @param scaleY - The Y scale value\n     * @param rotation - The rotation\n     * @param skewX - The X skew value\n     * @param skewY - The Y skew value\n     * @param pivotX - The X pivot value\n     * @param pivotY - The Y pivot value\n     * @returns - The DisplayObject instance\n     */\n    setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0): this\n    {\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n\n        return this;\n    }\n\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy()`.\n     * @param _options\n     */\n    destroy(_options?: IDestroyOptions | boolean): void\n    {\n        this.removeFromParent();\n\n        this._destroyed = true;\n        this.transform = null;\n\n        this.parent = null;\n        this._bounds = null;\n        this.mask = null;\n\n        this.cullArea = null;\n        this.filters = null;\n        this.filterArea = null;\n        this.hitArea = null;\n\n        this.interactive = false;\n        this.interactiveChildren = false;\n\n        this.emit('destroyed');\n        this.removeAllListeners();\n    }\n\n    /**\n     * @protected\n     * @member {PIXI.Container}\n     */\n    get _tempDisplayObjectParent(): TemporaryDisplayObject\n    {\n        if (this.tempDisplayObjectParent === null)\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            this.tempDisplayObjectParent = new TemporaryDisplayObject();\n        }\n\n        return this.tempDisplayObjectParent;\n    }\n\n    /**\n     * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root.\n     *\n     * ```js\n     * const cacheParent = elem.enableTempParent();\n     * elem.updateTransform();\n     * elem.disableTempParent(cacheParent);\n     * ```\n     * @returns - Current parent\n     */\n    enableTempParent(): Container\n    {\n        const myParent = this.parent;\n\n        this.parent = this._tempDisplayObjectParent as Container;\n\n        return myParent;\n    }\n\n    /**\n     * Pair method for `enableTempParent`\n     * @param cacheParent - Actual parent of element\n     */\n    disableTempParent(cacheParent: Container): void\n    {\n        this.parent = cacheParent;\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     */\n    get x(): number\n    {\n        return this.position.x;\n    }\n\n    set x(value: number)\n    {\n        this.transform.position.x = value;\n    }\n\n    /**\n     * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     */\n    get y(): number\n    {\n        return this.position.y;\n    }\n\n    set y(value: number)\n    {\n        this.transform.position.y = value;\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors.\n     * @readonly\n     */\n    get worldTransform(): Matrix\n    {\n        return this.transform.worldTransform;\n    }\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    get localTransform(): Matrix\n    {\n        return this.transform.localTransform;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @since 4.0.0\n     */\n    get position(): ObservablePoint\n    {\n        return this.transform.position;\n    }\n\n    set position(value: IPointData)\n    {\n        this.transform.position.copyFrom(value);\n    }\n\n    /**\n     * The scale factors of this object along the local coordinate axes.\n     *\n     * The default scale is (1, 1).\n     * @since 4.0.0\n     */\n    get scale(): ObservablePoint\n    {\n        return this.transform.scale;\n    }\n\n    set scale(value: IPointData)\n    {\n        this.transform.scale.copyFrom(value);\n    }\n\n    /**\n     * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n     * is the projection of `pivot` in the parent's local space.\n     *\n     * By default, the pivot is the origin (0, 0).\n     * @since 4.0.0\n     */\n    get pivot(): ObservablePoint\n    {\n        return this.transform.pivot;\n    }\n\n    set pivot(value: IPointData)\n    {\n        this.transform.pivot.copyFrom(value);\n    }\n\n    /**\n     * The skew factor for the object in radians.\n     * @since 4.0.0\n     */\n    get skew(): ObservablePoint\n    {\n        return this.transform.skew;\n    }\n\n    set skew(value: IPointData)\n    {\n        this.transform.skew.copyFrom(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get rotation(): number\n    {\n        return this.transform.rotation;\n    }\n\n    set rotation(value: number)\n    {\n        this.transform.rotation = value;\n    }\n\n    /**\n     * The angle of the object in degrees.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get angle(): number\n    {\n        return this.transform.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value: number)\n    {\n        this.transform.rotation = value * DEG_TO_RAD;\n    }\n\n    /**\n     * The zIndex of the displayObject.\n     *\n     * If a container has the sortableChildren property set to true, children will be automatically\n     * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n     * and thus rendered on top of other display objects within the same container.\n     * @see PIXI.Container#sortableChildren\n     */\n    get zIndex(): number\n    {\n        return this._zIndex;\n    }\n\n    set zIndex(value: number)\n    {\n        this._zIndex = value;\n        if (this.parent)\n        {\n            this.parent.sortDirty = true;\n        }\n    }\n\n    /**\n     * Indicates if the object is globally visible.\n     * @readonly\n     */\n    get worldVisible(): boolean\n    {\n        let item = this as DisplayObject;\n\n        do\n        {\n            if (!item.visible)\n            {\n                return false;\n            }\n\n            item = item.parent;\n        } while (item);\n\n        return true;\n    }\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n     * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n     * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n     * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n     * To remove a mask, set this property to `null`.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * import { Graphics, Sprite } from 'pixi.js';\n     *\n     * const graphics = new Graphics();\n     * graphics.beginFill(0xFF3300);\n     * graphics.drawRect(50, 250, 100, 100);\n     * graphics.endFill();\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.mask = graphics;\n     * @todo At the moment, CanvasRenderer doesn't support Sprite as mask.\n     */\n    get mask(): Container | MaskData | null\n    {\n        return this._mask;\n    }\n\n    set mask(value: Container | MaskData | null)\n    {\n        if (this._mask === value)\n        {\n            return;\n        }\n\n        if (this._mask)\n        {\n            const maskObject = ((this._mask as MaskData).isMaskData\n                ? (this._mask as MaskData).maskObject : this._mask) as Container;\n\n            if (maskObject)\n            {\n                maskObject._maskRefCount--;\n\n                if (maskObject._maskRefCount === 0)\n                {\n                    maskObject.renderable = true;\n                    maskObject.isMask = false;\n                }\n            }\n        }\n\n        this._mask = value;\n\n        if (this._mask)\n        {\n            const maskObject = ((this._mask as MaskData).isMaskData\n                ? (this._mask as MaskData).maskObject : this._mask) as Container;\n\n            if (maskObject)\n            {\n                if (maskObject._maskRefCount === 0)\n                {\n                    maskObject.renderable = false;\n                    maskObject.isMask = true;\n                }\n\n                maskObject._maskRefCount++;\n            }\n        }\n    }\n}\n\n/**\n * @private\n */\nexport class TemporaryDisplayObject extends DisplayObject\n{\n    calculateBounds: () => null;\n    removeChild: (child: DisplayObject) => null;\n    render: (renderer: Renderer) => null;\n    sortDirty: boolean = null;\n}\n\n/**\n * DisplayObject default updateTransform, does not update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.DisplayObject#\n * @method displayObjectUpdateTransform\n */\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n", "import { MASK_TYPES, Matrix, utils } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject';\n\nimport type { MaskData, Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nconst tempMatrix = new Matrix();\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n * @example\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * Sets the default value for the container property `sortableChildren`.\n     * If set to true, the container will sort its children by zIndex value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}.\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @static\n     */\n    public static defaultSortableChildren = false;\n\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by `zIndex` value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.Container.defaultSortableChildren\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = Container.defaultSortableChildren;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.Container#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child.\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Prepend the transform that is appended to the projection matrix.\n        const projectionTransform = renderer.projection.transform;\n\n        if (projectionTransform)\n        {\n            if (transform)\n            {\n                transform = tempMatrix.copyFrom(transform);\n                transform.prepend(projectionTransform);\n            }\n            else\n            {\n                transform = projectionTransform;\n            }\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || this.filters?.length)\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters?.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n", "import { settings, utils } from '@pixi/core';\nimport { Container } from './Container';\n\nObject.defineProperties(settings, {\n    /**\n     * Sets the default value for the container property 'sortableChildren'.\n     * @static\n     * @name SORTABLE_CHILDREN\n     * @memberof PIXI.settings\n     * @deprecated since 7.1.0\n     * @type {boolean}\n     * @see PIXI.Container.defaultSortableChildren\n     */\n    SORTABLE_CHILDREN: {\n        get()\n        {\n            return Container.defaultSortableChildren;\n        },\n        set(value: boolean)\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', 'settings.SORTABLE_CHILDREN is deprecated, use Container.defaultSortableChildren');\n            // #endif\n            Container.defaultSortableChildren = value;\n        },\n    },\n});\n\nexport { settings };\n", "import { BLEND_MODES, ObservablePoint, Point, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { IBaseTextureOptions, IPointData, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n", "/// <reference path=\"../global.d.ts\" />\nimport { BaseTexture, Matrix, RenderTexture, settings, Texture, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\n\nimport type {\n    ICanvasRenderingContext2D,\n    IPointData,\n    IRenderer,\n    MaskData,\n    MSAA_QUALITY,\n    Rectangle,\n    Renderer,\n} from '@pixi/core';\nimport type { Container, IDestroyOptions } from '@pixi/display';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends IRenderer\n{\n    canvasContext: {\n        activeContext: ICanvasRenderingContext2D;\n    }\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: IRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions | boolean) => void;\n    public originalMask: Container | MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snapshot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters?.length)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: IRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData?.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.canvasContext.activeContext;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${utils.uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.canvasContext.activeContext = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n * @private\n * @method\n * @returns {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions | boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Container, DisplayObject } from '@pixi/display';\n\n/**\n * The instance name of the object.\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @returns {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName<T extends DisplayObject = DisplayObject>(\n    name: string,\n    deep?: boolean,\n): T\n{\n    for (let i = 0, j = this.children.length; i < j; i++)\n    {\n        if (this.children[i].name === name)\n        {\n            return this.children[i];\n        }\n    }\n\n    if (deep)\n    {\n        for (let i = 0, j = this.children.length; i < j; i++)\n        {\n            const child = (this.children[i] as Container);\n\n            if (!child.getChildByName)\n            {\n                continue;\n            }\n\n            const target = child.getChildByName<T>(name, true);\n\n            if (target)\n            {\n                return target;\n            }\n        }\n    }\n\n    return null;\n};\n", "/// <reference path=\"../global.d.ts\" />\nimport { Point } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost.\n * @returns {PIXI.Point} The updated point.\n */\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n", "var fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=alpha.mjs.map\n", "import { defaultVertex, Filter } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n", "interface IGAUSSIAN_VALUES\n{\n    [x: number]: number[];\n}\nconst GAUSSIAN_VALUES: IGAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n", "const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize: number, x: boolean): string\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize.toString());\n\n    return vertSource;\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength: number;\n    public passes: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param resolution - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n", "import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { BLEND_MODES, FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof PIXI\n */\nexport class BlurFilter extends Filter\n{\n    public blurXFilter: BlurFilterPass;\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels: boolean;\n\n    /**\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param [resolution=Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution;\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, CLEAR_MODES.CLEAR);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clearMode);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n", "var fragment = \"varying vec2 vTextureCoord;\\nuniform sampler2D uSampler;\\nuniform float m[20];\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n    vec4 c = texture2D(uSampler, vTextureCoord);\\n\\n    if (uAlpha == 0.0) {\\n        gl_FragColor = c;\\n        return;\\n    }\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (c.a > 0.0) {\\n      c.rgb /= c.a;\\n    }\\n\\n    vec4 result;\\n\\n    result.r = (m[0] * c.r);\\n        result.r += (m[1] * c.g);\\n        result.r += (m[2] * c.b);\\n        result.r += (m[3] * c.a);\\n        result.r += m[4];\\n\\n    result.g = (m[5] * c.r);\\n        result.g += (m[6] * c.g);\\n        result.g += (m[7] * c.b);\\n        result.g += (m[8] * c.a);\\n        result.g += m[9];\\n\\n    result.b = (m[10] * c.r);\\n       result.b += (m[11] * c.g);\\n       result.b += (m[12] * c.b);\\n       result.b += (m[13] * c.a);\\n       result.b += m[14];\\n\\n    result.a = (m[15] * c.r);\\n       result.a += (m[16] * c.g);\\n       result.a += (m[17] * c.b);\\n       result.a += (m[18] * c.a);\\n       result.a += m[19];\\n\\n    vec3 rgb = mix(c.rgb, result.rgb, uAlpha);\\n\\n    // Premultiply alpha again.\\n    rgb *= result.a;\\n\\n    gl_FragColor = vec4(rgb, result.a);\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=colorMatrix.mjs.map\n", "import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './colorMatrix.frag';\n\nimport type { utils } from '@pixi/core';\n\nexport type ColorMatrix = utils.ArrayFixed<number, 20>;\n\n/**\n * The ColorMatrixFilter class lets you apply a 5x4 matrix transformation on the RGBA\n * color and alpha values of every pixel on your displayObject to produce a result\n * with a new set of RGBA color and alpha values. It's pretty powerful!\n * @example\n * import { filters } from 'pixi.js';\n *\n * const colorMatrix = new filters.ColorMatrixFilter();\n * container.filters = [colorMatrix];\n * colorMatrix.contrast(2);\n * @author Clément Chenebault <clement@goodboydigital.com>\n * @memberof PIXI\n */\nexport class ColorMatrixFilter extends Filter\n{\n    public grayscale: (scale: number, multiply: boolean) => void;\n\n    constructor()\n    {\n        const uniforms = {\n            m: new Float32Array([1, 0, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 0, 1, 0]),\n            uAlpha: 1,\n        };\n\n        super(defaultFilterVertex, fragment, uniforms);\n\n        this.alpha = 1;\n    }\n\n    /**\n     * Transforms current matrix and set the new one\n     * @param {number[]} matrix - 5x4 matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    private _loadMatrix(matrix: ColorMatrix, multiply = false): void\n    {\n        let newMatrix = matrix;\n\n        if (multiply)\n        {\n            this._multiply(newMatrix, this.uniforms.m, matrix);\n            newMatrix = this._colorMatrix(newMatrix) as any;\n        }\n\n        // set the new matrix\n        this.uniforms.m = newMatrix;\n    }\n\n    /**\n     * Multiplies two mat5's\n     * @private\n     * @param out - 5x4 matrix the receiving matrix\n     * @param a - 5x4 matrix the first operand\n     * @param b - 5x4 matrix the second operand\n     * @returns {number[]} 5x4 matrix\n     */\n    private _multiply(out: ColorMatrix, a: ColorMatrix, b: ColorMatrix): ColorMatrix\n    {\n        // Red Channel\n        out[0] = (a[0] * b[0]) + (a[1] * b[5]) + (a[2] * b[10]) + (a[3] * b[15]);\n        out[1] = (a[0] * b[1]) + (a[1] * b[6]) + (a[2] * b[11]) + (a[3] * b[16]);\n        out[2] = (a[0] * b[2]) + (a[1] * b[7]) + (a[2] * b[12]) + (a[3] * b[17]);\n        out[3] = (a[0] * b[3]) + (a[1] * b[8]) + (a[2] * b[13]) + (a[3] * b[18]);\n        out[4] = (a[0] * b[4]) + (a[1] * b[9]) + (a[2] * b[14]) + (a[3] * b[19]) + a[4];\n\n        // Green Channel\n        out[5] = (a[5] * b[0]) + (a[6] * b[5]) + (a[7] * b[10]) + (a[8] * b[15]);\n        out[6] = (a[5] * b[1]) + (a[6] * b[6]) + (a[7] * b[11]) + (a[8] * b[16]);\n        out[7] = (a[5] * b[2]) + (a[6] * b[7]) + (a[7] * b[12]) + (a[8] * b[17]);\n        out[8] = (a[5] * b[3]) + (a[6] * b[8]) + (a[7] * b[13]) + (a[8] * b[18]);\n        out[9] = (a[5] * b[4]) + (a[6] * b[9]) + (a[7] * b[14]) + (a[8] * b[19]) + a[9];\n\n        // Blue Channel\n        out[10] = (a[10] * b[0]) + (a[11] * b[5]) + (a[12] * b[10]) + (a[13] * b[15]);\n        out[11] = (a[10] * b[1]) + (a[11] * b[6]) + (a[12] * b[11]) + (a[13] * b[16]);\n        out[12] = (a[10] * b[2]) + (a[11] * b[7]) + (a[12] * b[12]) + (a[13] * b[17]);\n        out[13] = (a[10] * b[3]) + (a[11] * b[8]) + (a[12] * b[13]) + (a[13] * b[18]);\n        out[14] = (a[10] * b[4]) + (a[11] * b[9]) + (a[12] * b[14]) + (a[13] * b[19]) + a[14];\n\n        // Alpha Channel\n        out[15] = (a[15] * b[0]) + (a[16] * b[5]) + (a[17] * b[10]) + (a[18] * b[15]);\n        out[16] = (a[15] * b[1]) + (a[16] * b[6]) + (a[17] * b[11]) + (a[18] * b[16]);\n        out[17] = (a[15] * b[2]) + (a[16] * b[7]) + (a[17] * b[12]) + (a[18] * b[17]);\n        out[18] = (a[15] * b[3]) + (a[16] * b[8]) + (a[17] * b[13]) + (a[18] * b[18]);\n        out[19] = (a[15] * b[4]) + (a[16] * b[9]) + (a[17] * b[14]) + (a[18] * b[19]) + a[19];\n\n        return out;\n    }\n\n    /**\n     * Create a Float32 Array and normalize the offset component to 0-1\n     * @param {number[]} matrix - 5x4 matrix\n     * @returns {number[]} 5x4 matrix with all values between 0-1\n     */\n    private _colorMatrix(matrix: ColorMatrix): ColorMatrix\n    {\n        // Create a Float32 Array and normalize the offset component to 0-1\n        const m = new Float32Array(matrix);\n\n        m[4] /= 255;\n        m[9] /= 255;\n        m[14] /= 255;\n        m[19] /= 255;\n\n        return m as any;\n    }\n\n    /**\n     * Adjusts brightness\n     * @param b - value of the brigthness (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public brightness(b: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            b, 0, 0, 0, 0,\n            0, b, 0, 0, 0,\n            0, 0, b, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sets each channel on the diagonal of the color matrix.\n     * This can be used to achieve a tinting effect on Containers similar to the tint field of some\n     * display objects like Sprite, Text, Graphics, and Mesh.\n     * @param color - Color of the tint. This is a hex value.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public tint(color: number, multiply?: boolean): void\n    {\n        const r = (color >> 16) & 0xff;\n        const g = (color >> 8) & 0xff;\n        const b = color & 0xff;\n\n        const matrix: ColorMatrix = [\n            r / 255, 0, 0, 0, 0,\n            0, g / 255, 0, 0, 0,\n            0, 0, b / 255, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the matrices in grey scales\n     * @param scale - value of the grey (0-1, where 0 is black)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public greyscale(scale: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            scale, scale, scale, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the black and white matrice.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public blackAndWhite(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0.3, 0.6, 0.1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the hue property of the color\n     * @param rotation - in degrees\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public hue(rotation: number, multiply: boolean): void\n    {\n        rotation = (rotation || 0) / 180 * Math.PI;\n\n        const cosR = Math.cos(rotation);\n        const sinR = Math.sin(rotation);\n        const sqrt = Math.sqrt;\n\n        /* a good approximation for hue rotation\n         This matrix is far better than the versions with magic luminance constants\n         formerly used here, but also used in the starling framework (flash) and known from this\n         old part of the internet: quasimondo.com/archives/000565.php\n\n         This new matrix is based on rgb cube rotation in space. Look here for a more descriptive\n         implementation as a shader not a general matrix:\n         https://github.com/evanw/glfx.js/blob/58841c23919bd59787effc0333a4897b43835412/src/filters/adjust/huesaturation.js\n\n         This is the source for the code:\n         see http://stackoverflow.com/questions/8507885/shift-hue-of-an-rgb-color/8510751#8510751\n         */\n\n        const w = 1 / 3;\n        const sqrW = sqrt(w); // weight is\n\n        const a00 = cosR + ((1.0 - cosR) * w);\n        const a01 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a02 = (w * (1.0 - cosR)) + (sqrW * sinR);\n\n        const a10 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a11 = cosR + (w * (1.0 - cosR));\n        const a12 = (w * (1.0 - cosR)) - (sqrW * sinR);\n\n        const a20 = (w * (1.0 - cosR)) - (sqrW * sinR);\n        const a21 = (w * (1.0 - cosR)) + (sqrW * sinR);\n        const a22 = cosR + (w * (1.0 - cosR));\n\n        const matrix: ColorMatrix = [\n            a00, a01, a02, 0, 0,\n            a10, a11, a12, 0, 0,\n            a20, a21, a22, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the contrast matrix, increase the separation between dark and bright\n     * Increase contrast : shadows darker and highlights brighter\n     * Decrease contrast : bring the shadows up and the highlights down\n     * @param amount - value of the contrast (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public contrast(amount: number, multiply: boolean): void\n    {\n        const v = (amount || 0) + 1;\n        const o = -0.5 * (v - 1);\n\n        const matrix: ColorMatrix = [\n            v, 0, 0, 0, o,\n            0, v, 0, 0, o,\n            0, 0, v, 0, o,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Set the saturation matrix, increase the separation between colors\n     * Increase saturation : increase contrast, brightness, and sharpness\n     * @param amount - The saturation amount (0-1)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public saturate(amount = 0, multiply?: boolean): void\n    {\n        const x = (amount * 2 / 3) + 1;\n        const y = ((x - 1) * -0.5);\n\n        const matrix: ColorMatrix = [\n            x, y, y, 0, 0,\n            y, x, y, 0, 0,\n            y, y, x, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Desaturate image (remove color) Call the saturate function */\n    public desaturate(): void // eslint-disable-line no-unused-vars\n    {\n        this.saturate(-1);\n    }\n\n    /**\n     * Negative image (inverse of classic rgb matrix)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public negative(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            -1, 0, 0, 1, 0,\n            0, -1, 0, 1, 0,\n            0, 0, -1, 1, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Sepia image\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public sepia(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.393, 0.7689999, 0.18899999, 0, 0,\n            0.349, 0.6859999, 0.16799999, 0, 0,\n            0.272, 0.5339999, 0.13099999, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color motion picture process invented in 1916 (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public technicolor(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.9125277891456083, -0.8545344976951645, -0.09155508482755585, 0, 11.793603434377337,\n            -0.3087833385928097, 1.7658908555458428, -0.10601743074722245, 0, -70.35205161461398,\n            -0.231103377548616, -0.7501899197440212, 1.847597816108189, 0, 30.950940869491138,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Polaroid filter\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public polaroid(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.438, -0.062, -0.062, 0, 0,\n            -0.122, 1.378, -0.122, 0, 0,\n            -0.016, -0.016, 1.483, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Filter who transforms : Red -> Blue and Blue -> Red\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public toBGR(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0, 0, 1, 0, 0,\n            0, 1, 0, 0, 0,\n            1, 0, 0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Color reversal film introduced by Eastman Kodak in 1935. (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public kodachrome(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n            -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n            -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Brown delicious browni filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public browni(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.5997023498159715, 0.34553243048391263, -0.2708298674538042, 0, 47.43192855600873,\n            -0.037703249837783157, 0.8609577587992641, 0.15059552388459913, 0, -36.96841498319127,\n            0.24113635128153335, -0.07441037908422492, 0.44972182064877153, 0, -7.562075277591283,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Vintage filter (thanks Dominic Szablewski)\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public vintage(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            0.6279345635605994, 0.3202183420819367, -0.03965408211312453, 0, 9.651285835294123,\n            0.02578397704808868, 0.6441188644374771, 0.03259127616149294, 0, 7.462829176470591,\n            0.0466055556782719, -0.0851232987247891, 0.5241648018700465, 0, 5.159190588235296,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * We don't know exactly what it does, kind of gradient map, but funny to play with!\n     * @param desaturation - Tone values.\n     * @param toned - Tone values.\n     * @param lightColor - Tone values, example: `0xFFE580`\n     * @param darkColor - Tone values, example: `0xFFE580`\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public colorTone(desaturation: number, toned: number, lightColor: number, darkColor: number, multiply: boolean): void\n    {\n        desaturation = desaturation || 0.2;\n        toned = toned || 0.15;\n        lightColor = lightColor || 0xFFE580;\n        darkColor = darkColor || 0x338000;\n\n        const lR = ((lightColor >> 16) & 0xFF) / 255;\n        const lG = ((lightColor >> 8) & 0xFF) / 255;\n        const lB = (lightColor & 0xFF) / 255;\n\n        const dR = ((darkColor >> 16) & 0xFF) / 255;\n        const dG = ((darkColor >> 8) & 0xFF) / 255;\n        const dB = (darkColor & 0xFF) / 255;\n\n        const matrix: ColorMatrix = [\n            0.3, 0.59, 0.11, 0, 0,\n            lR, lG, lB, desaturation, 0,\n            dR, dG, dB, toned, 0,\n            lR - dR, lG - dG, lB - dB, 0, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Night effect\n     * @param intensity - The intensity of the night effect.\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public night(intensity: number, multiply: boolean): void\n    {\n        intensity = intensity || 0.1;\n\n        const matrix: ColorMatrix = [\n            intensity * (-2.0), -intensity, 0, 0, 0,\n            -intensity, 0, intensity, 0, 0,\n            0, intensity, intensity * 2.0, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * Predator effect\n     *\n     * Erase the current matrix by setting a new indepent one\n     * @param amount - how much the predator feels his future victim\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public predator(amount: number, multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            // row 1\n            11.224130630493164 * amount,\n            -4.794486999511719 * amount,\n            -2.8746118545532227 * amount,\n            0 * amount,\n            0.40342438220977783 * amount,\n            // row 2\n            -3.6330697536468506 * amount,\n            9.193157196044922 * amount,\n            -2.951810836791992 * amount,\n            0 * amount,\n            -1.316135048866272 * amount,\n            // row 3\n            -3.2184197902679443 * amount,\n            -4.2375030517578125 * amount,\n            7.476448059082031 * amount,\n            0 * amount,\n            0.8044459223747253 * amount,\n            // row 4\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /**\n     * LSD effect\n     *\n     * Multiply the current matrix\n     * @param multiply - if true, current matrix and matrix are multiplied. If false,\n     *  just set the current matrix with @param matrix\n     */\n    public lsd(multiply: boolean): void\n    {\n        const matrix: ColorMatrix = [\n            2, -0.4, 0.5, 0, 0,\n            -0.5, 2, -0.4, 0, 0,\n            -0.4, -0.5, 3, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, multiply);\n    }\n\n    /** Erase the current matrix by setting the default one. */\n    public reset(): void\n    {\n        const matrix: ColorMatrix = [\n            1, 0, 0, 0, 0,\n            0, 1, 0, 0, 0,\n            0, 0, 1, 0, 0,\n            0, 0, 0, 1, 0,\n        ];\n\n        this._loadMatrix(matrix, false);\n    }\n\n    /**\n     * The matrix of the color matrix filter\n     * @member {number[]}\n     * @default [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]\n     */\n    get matrix(): ColorMatrix\n    {\n        return this.uniforms.m;\n    }\n\n    set matrix(value: ColorMatrix)\n    {\n        this.uniforms.m = value;\n    }\n\n    /**\n     * The opacity value to use when mixing the original and resultant colors.\n     *\n     * When the value is 0, the original color is used without modification.\n     * When the value is 1, the result color is used.\n     * When in the range (0, 1) the color is interpolated between the original and result by this amount.\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n\n// Americanized alias\nColorMatrixFilter.prototype.grayscale = ColorMatrixFilter.prototype.greyscale;\n", "var fragment = \"varying vec2 vFilterCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 scale;\\nuniform mat2 rotation;\\nuniform sampler2D uSampler;\\nuniform sampler2D mapSampler;\\n\\nuniform highp vec4 inputSize;\\nuniform vec4 inputClamp;\\n\\nvoid main(void)\\n{\\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\\n\\n  map -= 0.5;\\n  map.xy = scale * inputSize.zw * (rotation * map.xy);\\n\\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw));\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=displacement.mjs.map\n", "var vertex = \"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n\\tgl_Position = filterVertexPosition();\\n\\tvTextureCoord = filterTextureCoord();\\n\\tvFilterCoord = ( filterMatrix * vec3( vTextureCoord, 1.0)  ).xy;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=displacement2.mjs.map\n", "import { Filter, Matrix, Point } from '@pixi/core';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\n\nimport type { CLEAR_MODES, FilterSystem, ISpriteMaskTarget, RenderTexture, Texture } from '@pixi/core';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n * @memberof PIXI\n */\nexport class DisplacementFilter extends Filter\n{\n    public maskSprite: ISpriteMaskTarget;\n    public maskMatrix: Matrix;\n    public scale: Point;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param scale - The scale of the displacement\n     */\n    constructor(sprite: ISpriteMaskTarget, scale?: number)\n    {\n        const maskMatrix = new Matrix();\n\n        sprite.renderable = false;\n\n        super(vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        });\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n\n        // Extract rotation from world transform\n        const wt = this.maskSprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** The texture used for the displacement map. Must be power of 2 sized texture. */\n    get map(): Texture\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    set map(value: Texture)\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n", "var fragment = \"varying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nvarying vec2 vFragCoord;\\nuniform sampler2D uSampler;\\nuniform highp vec4 inputSize;\\n\\n\\n/**\\n Basic FXAA implementation based on the code on geeks3d.com with the\\n modification that the texture2DLod stuff was removed since it's\\n unsupported by WebGL.\\n\\n --\\n\\n From:\\n https://github.com/mitsuhiko/webgl-meincraft\\n\\n Copyright (c) 2011 by Armin Ronacher.\\n\\n Some rights reserved.\\n\\n Redistribution and use in source and binary forms, with or without\\n modification, are permitted provided that the following conditions are\\n met:\\n\\n * Redistributions of source code must retain the above copyright\\n notice, this list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above\\n copyright notice, this list of conditions and the following\\n disclaimer in the documentation and/or other materials provided\\n with the distribution.\\n\\n * The names of the contributors may not be used to endorse or\\n promote products derived from this software without specific\\n prior written permission.\\n\\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n */\\n\\n#ifndef FXAA_REDUCE_MIN\\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n#define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent\\n//texture reads can be a bottleneck\\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 inverseVP,\\n          vec2 v_rgbNW, vec2 v_rgbNE,\\n          vec2 v_rgbSW, vec2 v_rgbSE,\\n          vec2 v_rgbM) {\\n    vec4 color;\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n\\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n\\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n\\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n                  dir * rcpDirMin)) * inverseVP;\\n\\n    vec3 rgbA = 0.5 * (\\n                       texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n                       texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n                                     texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n                                     texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n\\n      vec4 color;\\n\\n      color = fxaa(uSampler, vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n\\n      gl_FragColor = color;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=fxaa.mjs.map\n", "var vertex = \"\\nattribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nvarying vec2 vFragCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvoid texcoords(vec2 fragCoord, vec2 inverseVP,\\n               out vec2 v_rgbNW, out vec2 v_rgbNE,\\n               out vec2 v_rgbSW, out vec2 v_rgbSE,\\n               out vec2 v_rgbM) {\\n    v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n    v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n    v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n    v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n    v_rgbM = vec2(fragCoord * inverseVP);\\n}\\n\\nvoid main(void) {\\n\\n   gl_Position = filterVertexPosition();\\n\\n   vFragCoord = aVertexPosition * outputFrame.zw;\\n\\n   texcoords(vFragCoord, inputSize.zw, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=fxaa2.mjs.map\n", "import { Filter } from '@pixi/core';\nimport fragment from './fxaa.frag';\nimport vertex from './fxaa.vert';\n\n/**\n * Basic FXAA (Fast Approximate Anti-Aliasing) implementation based on the code on geeks3d.com\n * with the modification that the texture2DLod stuff was removed since it is unsupported by WebGL.\n * @see https://github.com/mitsuhiko/webgl-meincraft\n * @memberof PIXI\n */\nexport class FXAAFilter extends Filter\n{\n    constructor()\n    {\n        // TODO - needs work\n        super(vertex, fragment);\n    }\n}\n", "var fragment = \"precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=noise.mjs.map\n", "import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n", "import { utils } from '@pixi/core';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { BlurFilter, BlurFilterPass } from '@pixi/filter-blur';\nimport { ColorMatrixFilter } from '@pixi/filter-color-matrix';\nimport { DisplacementFilter } from '@pixi/filter-displacement';\nimport { FXAAFilter } from '@pixi/filter-fxaa';\nimport { NoiseFilter } from '@pixi/filter-noise';\n\n/**\n * Filters namespace has been removed. All filters are now available directly from the root of the package.\n * @namespace PIXI.filters\n * @deprecated\n */\nconst filters = {\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.AlphaFilter\n     */\n    AlphaFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilter\n     */\n    BlurFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.BlurFilterPass\n     */\n    BlurFilterPass,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.ColorMatrixFilter\n     */\n    ColorMatrixFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.DisplacementFilter\n     */\n    DisplacementFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.FXAAFilter\n     */\n    FXAAFilter,\n    /**\n     * @class\n     * @memberof PIXI.filters\n     * @deprecated since 7.1.0\n     * @see PIXI.NoiseFilter\n     */\n    NoiseFilter,\n};\n\nObject.entries(filters).forEach(([key, FilterClass]) =>\n{\n    Object.defineProperty(filters, key, {\n        get()\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', `filters.${key} has moved to ${key}`);\n            // #endif\n\n            return FilterClass;\n        },\n    });\n});\n\nexport { filters };\n", "import { Point } from '@pixi/core';\n\nimport type { EventBoundary } from './EventBoundary';\nimport type { FederatedEventTarget } from './FederatedEventTarget';\n\n/**\n * An DOM-compatible synthetic event implementation that is \"forwarded\" on behalf of an original\n * FederatedEvent or native {@link https://dom.spec.whatwg.org/#event Event}.\n * @memberof PIXI\n * @typeParam N - The type of native event held.\n */\nexport class FederatedEvent<N extends UIEvent = UIEvent> implements UIEvent\n{\n    /** Flags whether this event bubbles. This will take effect only if it is set before propagation. */\n    public bubbles = true;\n\n    /** @deprecated since 7.0.0 */\n    public cancelBubble = true;\n\n    /**\n     * Flags whether this event can be canceled using {@link FederatedEvent.preventDefault}. This is always\n     * false (for now).\n     */\n    public readonly cancelable = false;\n\n    /**\n     * Flag added for compatibility with DOM {@code Event}. It is not used in the Federated Events\n     * API.\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n    public readonly composed = false;\n\n    /** The listeners of the event target that are being notified. */\n    public currentTarget: FederatedEventTarget;\n\n    /** Flags whether the default response of the user agent was prevent through this event. */\n    public defaultPrevented = false;\n\n    /**\n     * The propagation phase.\n     * @default {@link FederatedEvent.NONE}\n     */\n    public eventPhase = FederatedEvent.prototype.NONE;\n\n    /** Flags whether this is a user-trusted event */\n    public isTrusted: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public returnValue: boolean;\n\n    /** @deprecated since 7.0.0 */\n    public srcElement: EventTarget;\n\n    /** The event target that this will be dispatched to. */\n    public target: FederatedEventTarget;\n\n    /** The timestamp of when the event was created. */\n    public timeStamp: number;\n\n    /** The type of event, e.g. {@code \"mouseup\"}. */\n    public type: string;\n\n    /** The native event that caused the foremost original event. */\n    public nativeEvent: N;\n\n    /** The original event that caused this event, if any. */\n    public originalEvent: FederatedEvent<N>;\n\n    /** Flags whether propagation was stopped. */\n    public propagationStopped = false;\n\n    /** Flags whether propagation was immediately stopped. */\n    public propagationImmediatelyStopped = false;\n\n    /** The composed path of the event's propagation. The {@code target} is at the end. */\n    public path: FederatedEventTarget[];\n\n    /** The {@link EventBoundary} that manages this event. Null for root events. */\n    public readonly manager: EventBoundary;\n\n    /** Event-specific detail */\n    public detail: number;\n\n    /** The global Window object. */\n    public view: WindowProxy;\n\n    /**\n     * Not supported.\n     * @deprecated since 7.0.0\n     */\n    public which: number;\n\n    /** The coordinates of the evnet relative to the nearest DOM layer. This is a non-standard property. */\n    public layer: Point = new Point();\n\n    /** @readonly */\n    get layerX(): number { return this.layer.x; }\n\n    /** @readonly */\n    get layerY(): number { return this.layer.y; }\n\n    /** The coordinates of the event relative to the DOM document. This is a non-standard property. */\n    public page: Point = new Point();\n\n    /** @readonly */\n    get pageX(): number { return this.page.x; }\n\n    /** @readonly */\n    get pageY(): number { return this.page.y; }\n\n    /**\n     * @param manager - The event boundary which manages this event. Propagation can only occur\n     *  within the boundary's jurisdiction.\n     */\n    constructor(manager: EventBoundary)\n    {\n        this.manager = manager;\n    }\n\n    /**\n     * Fallback for the deprecated {@link PIXI.InteractionEvent.data}.\n     * @deprecated since 7.0.0\n     */\n    get data(): this\n    {\n        return this;\n    }\n\n    /** The propagation path for this event. Alias for {@link EventBoundary.propagationPath}. */\n    composedPath(): FederatedEventTarget[]\n    {\n        // Find the propagation path if it isn't cached or if the target has changed since since\n        // the last evaluation.\n        if (this.manager && (!this.path || this.path[this.path.length - 1] !== this.target))\n        {\n            this.path = this.target ? this.manager.propagationPath(this.target) : [];\n        }\n\n        return this.path;\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code Event}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _type\n     * @param _bubbles\n     * @param _cancelable\n     */\n    initEvent(_type: string, _bubbles?: boolean, _cancelable?: boolean): void\n    {\n        throw new Error('initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /**\n     * Unimplemented method included for implementing the DOM interface {@code UIEvent}. It will throw an {@code Error}.\n     * @deprecated\n     * @param _typeArg\n     * @param _bubblesArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     */\n    initUIEvent(_typeArg: string, _bubblesArg?: boolean, _cancelableArg?: boolean, _viewArg?: Window | null,\n        _detailArg?: number): void\n    {\n        throw new Error('initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.');\n    }\n\n    /** Prevent default behavior of PixiJS and the user agent. */\n    preventDefault(): void\n    {\n        if (this.nativeEvent instanceof Event && this.nativeEvent.cancelable)\n        {\n            this.nativeEvent.preventDefault();\n        }\n\n        this.defaultPrevented = true;\n    }\n\n    /**\n     * Stop this event from propagating to any addition listeners, including on the\n     * {@link FederatedEventTarget.currentTarget currentTarget} and also the following\n     * event targets on the propagation path.\n     */\n    stopImmediatePropagation(): void\n    {\n        this.propagationImmediatelyStopped = true;\n    }\n\n    /**\n     * Stop this event from propagating to the next {@link FederatedEventTarget}. The rest of the listeners\n     * on the {@link FederatedEventTarget.currentTarget currentTarget} will still be notified.\n     */\n    stopPropagation(): void\n    {\n        this.propagationStopped = true;\n    }\n\n    AT_TARGET = 1;\n    BUBBLING_PHASE = 2;\n    CAPTURING_PHASE = 3;\n    NONE = 0;\n}\n", "import { Point } from '@pixi/core';\nimport { FederatedEvent } from './FederatedEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for mouse events.\n * @memberof PIXI\n */\nexport class FederatedMouseEvent extends FederatedEvent<\nMouseEvent | PointerEvent | TouchEvent\n> implements MouseEvent\n{\n    /** Whether the \"alt\" key was pressed when this mouse event occurred. */\n    altKey: boolean;\n\n    /** The specific button that was pressed in this mouse event. */\n    button: number;\n\n    /** The button depressed when this event occurred. */\n    buttons: number;\n\n    /** Whether the \"control\" key was pressed when this mouse event occurred. */\n    ctrlKey: boolean;\n\n    /** Whether the \"meta\" key was pressed when this mouse event occurred. */\n    metaKey: boolean;\n\n    /** This is currently not implemented in the Federated Events API. */\n    relatedTarget: EventTarget;\n\n    /** Whether the \"shift\" key was pressed when this mouse event occurred. */\n    shiftKey: boolean;\n\n    /** The coordinates of the mouse event relative to the canvas. */\n    public client: Point = new Point();\n\n    /** @readonly */\n    public get clientX(): number { return this.client.x; }\n\n    /** @readonly */\n    public get clientY(): number { return this.client.y; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientX this.clientX}.\n     * @readonly\n     */\n    get x(): number { return this.clientX; }\n\n    /**\n     * Alias for {@link FederatedMouseEvent.clientY this.clientY}.\n     * @readonly\n     */\n    get y(): number { return this.clientY; }\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    /** The movement in this pointer relative to the last `mousemove` event. */\n    public movement: Point = new Point();\n\n    /** @readonly */\n    get movementX(): number { return this.movement.x; }\n\n    /** @readonly */\n    get movementY(): number { return this.movement.y; }\n\n    /**\n     * The offset of the pointer coordinates w.r.t. target DisplayObject in world space. This is\n     * not supported at the moment.\n     */\n    public offset: Point = new Point();\n\n    /** @readonly */\n    get offsetX(): number { return this.offset.x; }\n\n    /** @readonly */\n    get offsetY(): number { return this.offset.y; }\n\n    /** The pointer coordinates in world space. */\n    public global: Point = new Point();\n\n    /** @readonly */\n    get globalX(): number { return this.global.x; }\n\n    /** @readonly */\n    get globalY(): number { return this.global.y; }\n\n    /**\n     * The pointer coordinates in the renderer's {@link PIXI.Renderer.screen screen}. This has slightly\n     * different semantics than native PointerEvent screenX/screenY.\n     */\n    public screen: Point = new Point();\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.x}.\n     * @readonly\n     */\n    get screenX(): number { return this.screen.x; }\n\n    /**\n     * The pointer coordinates in the renderer's screen. Alias for {@code screen.y}.\n     * @readonly\n     */\n    get screenY(): number { return this.screen.y; }\n\n    /**\n     * Whether the modifier key was pressed when this event natively occurred.\n     * @param key - The modifier key.\n     */\n    getModifierState(key: string): boolean\n    {\n        return 'getModifierState' in this.nativeEvent && this.nativeEvent.getModifierState(key);\n    }\n\n    /**\n     * Not supported.\n     * @param _typeArg\n     * @param _canBubbleArg\n     * @param _cancelableArg\n     * @param _viewArg\n     * @param _detailArg\n     * @param _screenXArg\n     * @param _screenYArg\n     * @param _clientXArg\n     * @param _clientYArg\n     * @param _ctrlKeyArg\n     * @param _altKeyArg\n     * @param _shiftKeyArg\n     * @param _metaKeyArg\n     * @param _buttonArg\n     * @param _relatedTargetArg\n     * @deprecated since 7.0.0\n     */\n    // eslint-disable-next-line max-params\n    initMouseEvent(\n        _typeArg: string,\n        _canBubbleArg: boolean,\n        _cancelableArg: boolean,\n        _viewArg: Window,\n        _detailArg: number,\n        _screenXArg: number,\n        _screenYArg: number,\n        _clientXArg: number,\n        _clientYArg: number,\n        _ctrlKeyArg: boolean,\n        _altKeyArg: boolean,\n        _shiftKeyArg: boolean,\n        _metaKeyArg: boolean,\n        _buttonArg: number,\n        _relatedTargetArg: EventTarget\n    ): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for pointer events.\n * @memberof PIXI\n */\nexport class FederatedPointerEvent extends FederatedMouseEvent implements PointerEvent\n{\n    /**\n     * The unique identifier of the pointer.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId}\n     */\n    public pointerId: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width = 0;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height = 0;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary = false;\n\n    /**\n     * The type of pointer that triggered the event.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event.\n     *s\n     * A Touch's force property will be represented by this value.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure: number;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * Twist of a stylus pointer.\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist: number;\n\n    /** This is the number of clicks that occurs in 200ms/click of each other. */\n    public detail: number;\n\n    // Only included for completeness for now\n    getCoalescedEvents(): PointerEvent[]\n    {\n        if (this.type === 'pointermove' || this.type === 'mousemove' || this.type === 'touchmove')\n        {\n            return [this];\n        }\n\n        return [];\n    }\n\n    // Only included for completeness for now\n    getPredictedEvents(): PointerEvent[]\n    {\n        throw new Error('getPredictedEvents is not supported!');\n    }\n}\n", "import { FederatedMouseEvent } from './FederatedMouseEvent';\n\n/**\n * A {@link PIXI.FederatedEvent} for wheel events.\n * @memberof PIXI\n */\nexport class FederatedWheelEvent extends FederatedMouseEvent implements WheelEvent\n{\n    /**\n     * The units of `deltaX`, `deltaY`, and `deltaZ`. This is one of `DOM_DELTA_LINE`,\n     * `DOM_DELTA_PAGE`, `DOM_DELTA_PIXEL`.\n     */\n    deltaMode: number;\n\n    /** Horizontal scroll amount */\n    deltaX: number;\n\n    /** Vertical scroll amount */\n    deltaY: number;\n\n    /** z-axis scroll amount. */\n    deltaZ: number;\n\n    /** Units specified in pixels. */\n    static readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in pixels. */\n    readonly DOM_DELTA_PIXEL = 0;\n\n    /** Units specified in lines. */\n    static readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in lines. */\n    readonly DOM_DELTA_LINE = 1;\n\n    /** Units specified in pages. */\n    static readonly DOM_DELTA_PAGE = 2;\n\n    /** Units specified in pages. */\n    readonly DOM_DELTA_PAGE = 2;\n}\n", "import { Point, utils } from '@pixi/core';\nimport { FederatedMouseEvent } from './FederatedMouseEvent';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { FederatedEvent } from './FederatedEvent';\nimport type { Cursor, FederatedEventHandler, FederatedEventTarget, IFederatedDisplayObject } from './FederatedEventTarget';\n\n// The maximum iterations used in propagation. This prevent infinite loops.\nconst PROPAGATION_LIMIT = 2048;\n\nconst tempHitLocation = new Point();\nconst tempLocalMapping = new Point();\n\n/**\n * The tracking data for each pointer held in the state of an {@link PIXI.EventBoundary}.\n *\n * ```ts\n * pressTargetsByButton: {\n *     [id: number]: FederatedEventTarget[];\n * };\n * clicksByButton: {\n *     [id: number]: {\n *         clickCount: number;\n *         target: FederatedEventTarget;\n *         timeStamp: number;\n *     };\n * };\n * overTargets: FederatedEventTarget[];\n * ```\n * @typedef {object} TrackingData\n * @property {Record.<number, PIXI.FederatedEventTarget>} pressTargetsByButton - The pressed display objects'\n *  propagation paths by each button of the pointer.\n * @property {Record.<number, object>} clicksByButton - Holds clicking data for each button of the pointer.\n * @property {PIXI.DisplayObject[]} overTargets - The DisplayObject propagation path over which the pointer is hovering.\n * @memberof PIXI\n */\ntype TrackingData = {\n    pressTargetsByButton: {\n        [id: number]: FederatedEventTarget[];\n    };\n    clicksByButton: {\n        [id: number]: {\n            clickCount: number;\n            target: FederatedEventTarget;\n            timeStamp: number;\n        }\n    };\n    overTargets: FederatedEventTarget[];\n};\n\n/**\n * Internal storage of an event listener in EventEmitter.\n * @ignore\n */\ntype EmitterListener = { fn(...args: any[]): any, context: any, once: boolean };\n\n/**\n * Internal storage of event listeners in EventEmitter.\n * @ignore\n */\ntype EmitterListeners = Record<string, EmitterListener | EmitterListener[]>;\n\n/**\n * Event boundaries are \"barriers\" where events coming from an upstream scene are modified before downstream propagation.\n *\n * ## Root event boundary\n *\n * The {@link PIXI.EventSystem#rootBoundary rootBoundary} handles events coming from the &lt;canvas /&gt;.\n * {@link PIXI.EventSystem} handles the normalization from native {@link https://dom.spec.whatwg.org/#event Events}\n * into {@link PIXI.FederatedEvent FederatedEvents}. The rootBoundary then does the hit-testing and event dispatch\n * for the upstream normalized event.\n *\n * ## Additional event boundaries\n *\n * An additional event boundary may be desired within an application's scene graph. For example, if a portion of the scene is\n * is flat with many children at one level - a spatial hash maybe needed to accelerate hit testing. In this scenario, the\n * container can be detached from the scene and glued using a custom event boundary.\n *\n * ```ts\n * import { Container } from '@pixi/display';\n * import { EventBoundary } from '@pixi/events';\n * import { SpatialHash } from 'pixi-spatial-hash';\n *\n * class HashedHitTestingEventBoundary\n * {\n *     private spatialHash: SpatialHash;\n *\n *     constructor(scene: Container, spatialHash: SpatialHash)\n *     {\n *         super(scene);\n *         this.spatialHash = spatialHash;\n *     }\n *\n *     hitTestRecursive(...)\n *     {\n *         // TODO: If target === this.rootTarget, then use spatial hash to get a\n *         // list of possible children that match the given (x,y) coordinates.\n *     }\n * }\n *\n * class VastScene extends DisplayObject\n * {\n *     protected eventBoundary: EventBoundary;\n *     protected scene: Container;\n *     protected spatialHash: SpatialHash;\n *\n *     constructor()\n *     {\n *         this.scene = new Container();\n *         this.spatialHash = new SpatialHash();\n *         this.eventBoundary = new HashedHitTestingEventBoundary(this.scene, this.spatialHash);\n *\n *         // Populate this.scene with a ton of children, while updating this.spatialHash\n *     }\n * }\n * ```\n * @memberof PIXI\n */\nexport class EventBoundary\n{\n    /**\n     * The root event-target residing below the event boundary.\n     *\n     * All events are dispatched trickling down and bubbling up to this `rootTarget`.\n     */\n    public rootTarget: DisplayObject;\n\n    /**\n     * Emits events after they were dispatched into the scene graph.\n     *\n     * This can be used for global events listening, regardless of the scene graph being used. It should\n     * not be used by interactive libraries for normal use.\n     *\n     * Special events that do not bubble all the way to the root target are not emitted from here,\n     * e.g. pointerenter, pointerleave, click.\n     */\n    public dispatch: utils.EventEmitter = new utils.EventEmitter();\n\n    /** The cursor preferred by the event targets underneath this boundary. */\n    public cursor: Cursor | string;\n\n    /**\n     * This flag would emit `pointermove`, `touchmove`, and `mousemove` events on all DisplayObjects.\n     *\n     * The `moveOnAll` semantics mirror those of earlier versions of PixiJS. This was disabled in favor of\n     * the Pointer Event API's approach.\n     */\n    public moveOnAll = false;\n\n    /**\n     * Maps event types to forwarding handles for them.\n     *\n     * {@link PIXI.EventBoundary EventBoundary} provides mapping for \"pointerdown\", \"pointermove\",\n     * \"pointerout\", \"pointerleave\", \"pointerover\", \"pointerup\", and \"pointerupoutside\" by default.\n     * @see PIXI.EventBoundary#addEventMapping\n     */\n    protected mappingTable: Record<string, Array<{\n        fn: (e: FederatedEvent) => void,\n        priority: number\n    }>>;\n\n    /**\n     * State object for mapping methods.\n     * @see PIXI.EventBoundary#trackingData\n     */\n    protected mappingState: Record<string, any> = {\n        trackingData: {}\n    };\n\n    /**\n     * The event pool maps event constructors to an free pool of instances of those specific events.\n     * @see PIXI.EventBoundary#allocateEvent\n     * @see PIXI.EventBoundary#freeEvent\n     */\n    protected eventPool: Map<typeof FederatedEvent, FederatedEvent[]> = new Map();\n\n    /**\n     * @param rootTarget - The holder of the event boundary.\n     */\n    constructor(rootTarget?: DisplayObject)\n    {\n        this.rootTarget = rootTarget;\n\n        this.hitPruneFn = this.hitPruneFn.bind(this);\n        this.hitTestFn = this.hitTestFn.bind(this);\n        this.mapPointerDown = this.mapPointerDown.bind(this);\n        this.mapPointerMove = this.mapPointerMove.bind(this);\n        this.mapPointerOut = this.mapPointerOut.bind(this);\n        this.mapPointerOver = this.mapPointerOver.bind(this);\n        this.mapPointerUp = this.mapPointerUp.bind(this);\n        this.mapPointerUpOutside = this.mapPointerUpOutside.bind(this);\n        this.mapWheel = this.mapWheel.bind(this);\n\n        this.mappingTable = {};\n        this.addEventMapping('pointerdown', this.mapPointerDown);\n        this.addEventMapping('pointermove', this.mapPointerMove);\n        this.addEventMapping('pointerout', this.mapPointerOut);\n        this.addEventMapping('pointerleave', this.mapPointerOut);\n        this.addEventMapping('pointerover', this.mapPointerOver);\n        this.addEventMapping('pointerup', this.mapPointerUp);\n        this.addEventMapping('pointerupoutside', this.mapPointerUpOutside);\n        this.addEventMapping('wheel', this.mapWheel);\n    }\n\n    /**\n     * Adds an event mapping for the event `type` handled by `fn`.\n     *\n     * Event mappings can be used to implement additional or custom events. They take an event\n     * coming from the upstream scene (or directly from the {@link PIXI.EventSystem}) and dispatch new downstream events\n     * generally trickling down and bubbling up to {@link PIXI.EventBoundary.rootTarget this.rootTarget}.\n     *\n     * To modify the semantics of existing events, the built-in mapping methods of EventBoundary should be overridden\n     * instead.\n     * @param type - The type of upstream event to map.\n     * @param fn - The mapping method. The context of this function must be bound manually, if desired.\n     */\n    public addEventMapping(type: string, fn: (e: FederatedEvent) => void): void\n    {\n        if (!this.mappingTable[type])\n        {\n            this.mappingTable[type] = [];\n        }\n\n        this.mappingTable[type].push({\n            fn,\n            priority: 0,\n        });\n        this.mappingTable[type].sort((a, b) => a.priority - b.priority);\n    }\n\n    /**\n     * Dispatches the given event\n     * @param e\n     * @param type\n     */\n    public dispatchEvent(e: FederatedEvent, type?: string): void\n    {\n        e.propagationStopped = false;\n        e.propagationImmediatelyStopped = false;\n\n        this.propagate(e, type);\n        this.dispatch.emit(type || e.type, e);\n    }\n\n    /**\n     * Maps the given upstream event through the event boundary and propagates it downstream.\n     * @param e\n     */\n    public mapEvent(e: FederatedEvent): void\n    {\n        if (!this.rootTarget)\n        {\n            return;\n        }\n\n        const mappers = this.mappingTable[e.type];\n\n        if (mappers)\n        {\n            for (let i = 0, j = mappers.length; i < j; i++)\n            {\n                mappers[i].fn(e);\n            }\n        }\n        else\n        {\n            console.warn(`[EventBoundary]: Event mapping not defined for ${e.type}`);\n        }\n    }\n\n    /**\n     * Finds the DisplayObject that is the target of a event at the given coordinates.\n     *\n     * The passed (x,y) coordinates are in the world space above this event boundary.\n     * @param x\n     * @param y\n     */\n    public hitTest(\n        x: number,\n        y: number,\n    ): DisplayObject\n    {\n        const invertedPath = this.hitTestRecursive(\n            this.rootTarget,\n            this.rootTarget.interactive,\n            tempHitLocation.set(x, y),\n            this.hitTestFn,\n            this.hitPruneFn,\n        );\n\n        return invertedPath && invertedPath[0];\n    }\n\n    /**\n     * Propagate the passed event from from {@link EventBoundary.rootTarget this.rootTarget} to its\n     * target {@code e.target}.\n     * @param e - The event to propagate.\n     * @param type\n     */\n    public propagate(e: FederatedEvent, type?: string): void\n    {\n        if (!e.target)\n        {\n            // This usually occurs when the scene graph is not interactive.\n            return;\n        }\n\n        const composedPath = e.composedPath();\n\n        // Capturing phase\n        e.eventPhase = e.CAPTURING_PHASE;\n\n        for (let i = 0, j = composedPath.length - 1; i < j; i++)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n\n        // At target phase\n        e.eventPhase = e.AT_TARGET;\n        e.currentTarget = e.target;\n\n        this.notifyTarget(e, type);\n\n        if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n\n        // Bubbling phase\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        for (let i = composedPath.length - 2; i >= 0; i--)\n        {\n            e.currentTarget = composedPath[i];\n\n            this.notifyTarget(e, type);\n\n            if (e.propagationStopped || e.propagationImmediatelyStopped) return;\n        }\n    }\n\n    /**\n     * Emits the event {@link e} to all display objects. The event is propagated in the bubbling phase always.\n     *\n     * This is used in the `pointermove` legacy mode.\n     * @param e - The emitted event.\n     * @param type - The listeners to notify.\n     * @param target\n     */\n    public all(e: FederatedEvent, type?: string, target: FederatedEventTarget = this.rootTarget): void\n    {\n        e.eventPhase = e.BUBBLING_PHASE;\n\n        const children = target.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.all(e, type, children[i]);\n            }\n        }\n\n        e.currentTarget = target;\n        this.notifyTarget(e, type);\n    }\n\n    /**\n     * Finds the propagation path from {@link PIXI.EventBoundary.rootTarget rootTarget} to the passed\n     * {@code target}. The last element in the path is {@code target}.\n     * @param target\n     */\n    public propagationPath(target: FederatedEventTarget): FederatedEventTarget[]\n    {\n        const propagationPath = [target];\n\n        for (let i = 0; i < PROPAGATION_LIMIT && target !== this.rootTarget; i++)\n        {\n            if (!target.parent)\n            {\n                throw new Error('Cannot find propagation path to disconnected target');\n            }\n\n            propagationPath.push(target.parent);\n\n            target = target.parent;\n        }\n\n        propagationPath.reverse();\n\n        return propagationPath;\n    }\n\n    /**\n     * Recursive implementation for {@link EventBoundary.hitTest hitTest}.\n     * @param currentTarget - The DisplayObject that is to be hit tested.\n     * @param interactive - Flags whether `currentTarget` or one of its parents are interactive.\n     * @param location - The location that is being tested for overlap.\n     * @param testFn - Callback that determines whether the target passes hit testing. This callback\n     *  can assume that `pruneFn` failed to prune the display object.\n     * @param pruneFn - Callback that determiness whether the target and all of its children\n     *  cannot pass the hit test. It is used as a preliminary optimization to prune entire subtrees\n     *  of the scene graph.\n     * @returns An array holding the hit testing target and all its ancestors in order. The first element\n     *  is the target itself and the last is {@link EventBoundary.rootTarget rootTarget}. This is the opposite\n     *  order w.r.t. the propagation path. If no hit testing target is found, null is returned.\n     */\n    protected hitTestRecursive(\n        currentTarget: DisplayObject,\n        interactive: boolean,\n        location: Point,\n        testFn: (object: DisplayObject, pt: Point) => boolean,\n        pruneFn?: (object: DisplayObject, pt: Point) => boolean,\n    ): DisplayObject[]\n    {\n        if (!currentTarget || !currentTarget.visible)\n        {\n            return null;\n        }\n\n        // Attempt to prune this DisplayObject and its subtree as an optimization.\n        if (pruneFn(currentTarget, location))\n        {\n            return null;\n        }\n\n        // Find a child that passes the hit testing and return one, if any.\n        if (currentTarget.interactiveChildren && currentTarget.children)\n        {\n            const children = currentTarget.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i] as DisplayObject;\n\n                const nestedHit = this.hitTestRecursive(\n                    child,\n                    interactive || child.interactive,\n                    location,\n                    testFn,\n                    pruneFn,\n                );\n\n                if (nestedHit)\n                {\n                    // Its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (nestedHit.length > 0 && !nestedHit[nestedHit.length - 1].parent)\n                    {\n                        continue;\n                    }\n\n                    // Only add the current hit-test target to the hit-test chain if the chain\n                    // has already started (i.e. the event target has been found) or if the current\n                    // target is interactive (i.e. it becomes the event target).\n                    if (nestedHit.length > 0 || currentTarget.interactive)\n                    {\n                        nestedHit.push(currentTarget);\n                    }\n\n                    return nestedHit;\n                }\n            }\n        }\n\n        // Finally, hit test this DisplayObject itself.\n        if (interactive && testFn(currentTarget, location))\n        {\n            // The current hit-test target is the event's target only if it is interactive. Otherwise,\n            // the first interactive ancestor will be the event's target.\n            return currentTarget.interactive ? [currentTarget] : [];\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the display object or any of its children cannot pass the hit test at all.\n     *\n     * {@link EventBoundary}'s implementation uses the {@link PIXI.DisplayObject.hitArea hitArea}\n     * and {@link PIXI.DisplayObject._mask} for pruning.\n     * @param displayObject\n     * @param location\n     */\n    protected hitPruneFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        if (displayObject.hitArea)\n        {\n            displayObject.worldTransform.applyInverse(location, tempLocalMapping);\n\n            if (!displayObject.hitArea.contains(tempLocalMapping.x, tempLocalMapping.y))\n            {\n                return true;\n            }\n        }\n\n        if (displayObject._mask)\n        {\n            const maskObject = ((displayObject._mask as any).isMaskData\n                ? (displayObject._mask as any).maskObject : displayObject._mask);\n\n            if (maskObject && !maskObject.containsPoint?.(location))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the display object passes hit testing for the given location.\n     * @param displayObject\n     * @param location\n     * @returns - Whether `displayObject` passes hit testing for `location`.\n     */\n    protected hitTestFn(displayObject: DisplayObject, location: Point): boolean\n    {\n        // If the display object failed pruning with a hitArea, then it must pass it.\n        if (displayObject.hitArea)\n        {\n            return true;\n        }\n\n        if ((displayObject as any).containsPoint)\n        {\n            return (displayObject as any).containsPoint(location) as boolean;\n        }\n\n        // TODO: Should we hit test based on bounds?\n\n        return false;\n    }\n\n    /**\n     * Notify all the listeners to the event's `currentTarget`.\n     *\n     * If the `currentTarget` contains the property `on<type>`, then it is called here,\n     * simulating the behavior from version 6.x and prior.\n     * @param e - The event passed to the target.\n     * @param type\n     */\n    protected notifyTarget(e: FederatedEvent, type?: string): void\n    {\n        type = type ?? e.type;\n\n        // call the `on${type}` for the current target if it exists\n        const handlerKey = `on${type}` as keyof IFederatedDisplayObject;\n\n        (e.currentTarget[handlerKey] as FederatedEventHandler<FederatedEvent<UIEvent>>)?.(e);\n\n        const key = e.eventPhase === e.CAPTURING_PHASE || e.eventPhase === e.AT_TARGET ? `${type}capture` : type;\n\n        this.notifyListeners(e, key);\n\n        if (e.eventPhase === e.AT_TARGET)\n        {\n            this.notifyListeners(e, type);\n        }\n    }\n\n    /**\n     * Maps the upstream `pointerdown` events to a downstream `pointerdown` event.\n     *\n     * `touchstart`, `rightdown`, `mousedown` events are also dispatched for specific pointer types.\n     * @param from\n     */\n    protected mapPointerDown(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerdown');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchstart');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightdown' : 'mousedown');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        trackingData.pressTargetsByButton[from.button] = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointermove` to downstream `pointerout`, `pointerover`, and `pointermove` events, in that order.\n     *\n     * The tracking data for the specific pointer has an updated `overTarget`. `mouseout`, `mouseover`,\n     * `mousemove`, and `touchmove` events are fired as well for specific pointer types.\n     * @param from - The upstream `pointermove` event.\n     */\n    protected mapPointerMove(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n        const trackingData = this.trackingData(from.pointerId);\n        const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n        // First pointerout/pointerleave\n        if (trackingData.overTargets?.length > 0 && outTarget !== e.target)\n        {\n            // pointerout always occurs on the overTarget when the pointer hovers over another element.\n            const outType = from.type === 'mousemove' ? 'mouseout' : 'pointerout';\n            const outEvent = this.createPointerEvent(from, outType, outTarget);\n\n            this.dispatchEvent(outEvent, 'pointerout');\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // If the pointer exits overTarget and its descendants, then a pointerleave event is also fired. This event\n            // is dispatched to all ancestors that no longer capture the pointer.\n            if (!e.composedPath().includes(outTarget))\n            {\n                const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n                leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n                while (leaveEvent.target && !e.composedPath().includes(leaveEvent.target))\n                {\n                    leaveEvent.currentTarget = leaveEvent.target;\n\n                    this.notifyTarget(leaveEvent);\n                    if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                    leaveEvent.target = leaveEvent.target.parent;\n                }\n\n                this.freeEvent(leaveEvent);\n            }\n\n            this.freeEvent(outEvent);\n        }\n\n        // Then pointerover\n        if (outTarget !== e.target)\n        {\n            // pointerover always occurs on the new overTarget\n            const overType = from.type === 'mousemove' ? 'mouseover' : 'pointerover';\n            const overEvent = this.clonePointerEvent(e, overType);// clone faster\n\n            this.dispatchEvent(overEvent, 'pointerover');\n            if (isMouse) this.dispatchEvent(overEvent, 'mouseover');\n\n            // Probe whether the newly hovered DisplayObject is an ancestor of the original overTarget.\n            let overTargetAncestor = outTarget?.parent;\n\n            while (overTargetAncestor && overTargetAncestor !== this.rootTarget.parent)\n            {\n                if (overTargetAncestor === e.target) break;\n\n                overTargetAncestor = overTargetAncestor.parent;\n            }\n\n            // The pointer has entered a non-ancestor of the original overTarget. This means we need a pointerentered\n            // event.\n            const didPointerEnter = !overTargetAncestor || overTargetAncestor === this.rootTarget.parent;\n\n            if (didPointerEnter)\n            {\n                const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n                enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n                while (enterEvent.target\n                        && enterEvent.target !== outTarget\n                        && enterEvent.target !== this.rootTarget.parent)\n                {\n                    enterEvent.currentTarget = enterEvent.target;\n\n                    this.notifyTarget(enterEvent);\n                    if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n                    enterEvent.target = enterEvent.target.parent;\n                }\n\n                this.freeEvent(enterEvent);\n            }\n\n            this.freeEvent(overEvent);\n        }\n\n        const propagationMethod = this.moveOnAll ? 'all' : 'dispatchEvent';\n\n        // Then pointermove\n        this[propagationMethod](e, 'pointermove');\n        this.all(e, 'globalpointermove');\n\n        if (e.pointerType === 'touch')\n        {\n            this[propagationMethod](e, 'touchmove');\n            this.all(e, 'globaltouchmove');\n        }\n\n        if (isMouse)\n        {\n            this[propagationMethod](e, 'mousemove');\n            this.all(e, 'globalmousemove');\n            this.cursor = e.target?.cursor;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerover` to downstream `pointerover` and `pointerenter` events, in that order.\n     *\n     * The tracking data for the specific pointer gets a new `overTarget`.\n     * @param from - The upstream `pointerover` event.\n     */\n    protected mapPointerOver(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const e = this.createPointerEvent(from);\n        const isMouse = e.pointerType === 'mouse' || e.pointerType === 'pen';\n\n        this.dispatchEvent(e, 'pointerover');\n        if (isMouse) this.dispatchEvent(e, 'mouseover');\n        if (e.pointerType === 'mouse') this.cursor = e.target?.cursor;\n\n        // pointerenter events must be fired since the pointer entered from upstream.\n        const enterEvent = this.clonePointerEvent(e, 'pointerenter');\n\n        enterEvent.eventPhase = enterEvent.AT_TARGET;\n\n        while (enterEvent.target && enterEvent.target !== this.rootTarget.parent)\n        {\n            enterEvent.currentTarget = enterEvent.target;\n\n            this.notifyTarget(enterEvent);\n            if (isMouse) this.notifyTarget(enterEvent, 'mouseenter');\n\n            enterEvent.target = enterEvent.target.parent;\n        }\n\n        trackingData.overTargets = e.composedPath();\n\n        this.freeEvent(e);\n        this.freeEvent(enterEvent);\n    }\n\n    /**\n     * Maps the upstream `pointerout` to downstream `pointerout`, `pointerleave` events, in that order.\n     *\n     * The tracking data for the specific pointer is cleared of a `overTarget`.\n     * @param from - The upstream `pointerout` event.\n     */\n    protected mapPointerOut(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n\n        if (trackingData.overTargets)\n        {\n            const isMouse = from.pointerType === 'mouse' || from.pointerType === 'pen';\n            const outTarget = this.findMountedTarget(trackingData.overTargets);\n\n            // pointerout first\n            const outEvent = this.createPointerEvent(from, 'pointerout', outTarget);\n\n            this.dispatchEvent(outEvent);\n            if (isMouse) this.dispatchEvent(outEvent, 'mouseout');\n\n            // pointerleave(s) are also dispatched b/c the pointer must've left rootTarget and its descendants to\n            // get an upstream pointerout event (upstream events do not know rootTarget has descendants).\n            const leaveEvent = this.createPointerEvent(from, 'pointerleave', outTarget);\n\n            leaveEvent.eventPhase = leaveEvent.AT_TARGET;\n\n            while (leaveEvent.target && leaveEvent.target !== this.rootTarget.parent)\n            {\n                leaveEvent.currentTarget = leaveEvent.target;\n\n                this.notifyTarget(leaveEvent);\n                if (isMouse) this.notifyTarget(leaveEvent, 'mouseleave');\n\n                leaveEvent.target = leaveEvent.target.parent;\n            }\n\n            trackingData.overTargets = null;\n\n            this.freeEvent(outEvent);\n            this.freeEvent(leaveEvent);\n        }\n\n        this.cursor = null;\n    }\n\n    /**\n     * Maps the upstream `pointerup` event to downstream `pointerup`, `pointerupoutside`,\n     * and `click`/`rightclick`/`pointertap` events, in that order.\n     *\n     * The `pointerupoutside` event bubbles from the original `pointerdown` target to the most specific\n     * ancestor of the `pointerdown` and `pointerup` targets, which is also the `click` event's target. `touchend`,\n     * `rightup`, `mouseup`, `touchendoutside`, `rightupoutside`, `mouseupoutside`, and `tap` are fired as well for\n     * specific pointer types.\n     * @param from - The upstream `pointerup` event.\n     */\n    protected mapPointerUp(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const now = performance.now();\n        const e = this.createPointerEvent(from);\n\n        this.dispatchEvent(e, 'pointerup');\n\n        if (e.pointerType === 'touch')\n        {\n            this.dispatchEvent(e, 'touchend');\n        }\n        else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n        {\n            const isRightButton = e.button === 2;\n\n            this.dispatchEvent(e, isRightButton ? 'rightup' : 'mouseup');\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n\n        let clickTarget = pressTarget;\n\n        // pointerupoutside only bubbles. It only bubbles upto the parent that doesn't contain\n        // the pointerup location.\n        if (pressTarget && !e.composedPath().includes(pressTarget))\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget && !e.composedPath().includes(currentTarget))\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    const isRightButton = e.button === 2;\n\n                    this.notifyTarget(e, isRightButton ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n\n            // currentTarget is the most specific ancestor holding both the pointerdown and pointerup\n            // targets. That is - it's our click target!\n            clickTarget = currentTarget;\n        }\n\n        // click!\n        if (clickTarget)\n        {\n            const clickEvent = this.clonePointerEvent(e, 'click');\n\n            clickEvent.target = clickTarget;\n            clickEvent.path = null;\n\n            if (!trackingData.clicksByButton[from.button])\n            {\n                trackingData.clicksByButton[from.button] = {\n                    clickCount: 0,\n                    target: clickEvent.target,\n                    timeStamp: now,\n                };\n            }\n\n            const clickHistory = trackingData.clicksByButton[from.button];\n\n            if (clickHistory.target === clickEvent.target\n                && now - clickHistory.timeStamp < 200)\n            {\n                ++clickHistory.clickCount;\n            }\n            else\n            {\n                clickHistory.clickCount = 1;\n            }\n\n            clickHistory.target = clickEvent.target;\n            clickHistory.timeStamp = now;\n\n            clickEvent.detail = clickHistory.clickCount;\n\n            if (clickEvent.pointerType === 'mouse')\n            {\n                const isRightButton = clickEvent.button === 2;\n\n                this.dispatchEvent(clickEvent, isRightButton ? 'rightclick' : 'click');\n            }\n            else if (clickEvent.pointerType === 'touch')\n            {\n                this.dispatchEvent(clickEvent, 'tap');\n            }\n\n            this.dispatchEvent(clickEvent, 'pointertap');\n\n            this.freeEvent(clickEvent);\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `pointerupoutside` event to a downstream `pointerupoutside` event, bubbling from the original\n     * `pointerdown` target to `rootTarget`.\n     *\n     * (The most specific ancestor of the `pointerdown` event and the `pointerup` event must the {@code EventBoundary}'s\n     * root because the `pointerup` event occurred outside of the boundary.)\n     *\n     * `touchendoutside`, `mouseupoutside`, and `rightupoutside` events are fired as well for specific pointer\n     * types. The tracking data for the specific pointer is cleared of a `pressTarget`.\n     * @param from - The upstream `pointerupoutside` event.\n     */\n    protected mapPointerUpOutside(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent))\n        {\n            console.warn('EventBoundary cannot map a non-pointer event as a pointer event');\n\n            return;\n        }\n\n        const trackingData = this.trackingData(from.pointerId);\n        const pressTarget = this.findMountedTarget(trackingData.pressTargetsByButton[from.button]);\n        const e = this.createPointerEvent(from);\n\n        if (pressTarget)\n        {\n            let currentTarget = pressTarget;\n\n            while (currentTarget)\n            {\n                e.currentTarget = currentTarget;\n\n                this.notifyTarget(e, 'pointerupoutside');\n\n                if (e.pointerType === 'touch')\n                {\n                    this.notifyTarget(e, 'touchendoutside');\n                }\n                else if (e.pointerType === 'mouse' || e.pointerType === 'pen')\n                {\n                    this.notifyTarget(e, e.button === 2 ? 'rightupoutside' : 'mouseupoutside');\n                }\n\n                currentTarget = currentTarget.parent;\n            }\n\n            delete trackingData.pressTargetsByButton[from.button];\n        }\n\n        this.freeEvent(e);\n    }\n\n    /**\n     * Maps the upstream `wheel` event to a downstream `wheel` event.\n     * @param from - The upstream `wheel` event.\n     */\n    protected mapWheel(from: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedWheelEvent))\n        {\n            console.warn('EventBoundary cannot map a non-wheel event as a wheel event');\n\n            return;\n        }\n\n        const wheelEvent = this.createWheelEvent(from);\n\n        this.dispatchEvent(wheelEvent);\n        this.freeEvent(wheelEvent);\n    }\n\n    /**\n     * Finds the most specific event-target in the given propagation path that is still mounted in the scene graph.\n     *\n     * This is used to find the correct `pointerup` and `pointerout` target in the case that the original `pointerdown`\n     * or `pointerover` target was unmounted from the scene graph.\n     * @param propagationPath - The propagation path was valid in the past.\n     * @returns - The most specific event-target still mounted at the same location in the scene graph.\n     */\n    protected findMountedTarget(propagationPath: FederatedEventTarget[]): FederatedEventTarget\n    {\n        if (!propagationPath)\n        {\n            return null;\n        }\n\n        let currentTarget = propagationPath[0];\n\n        for (let i = 1; i < propagationPath.length; i++)\n        {\n            // Set currentTarget to the next target in the path only if it is still attached to the\n            // scene graph (i.e. parent still points to the expected ancestor).\n            if (propagationPath[i].parent === currentTarget)\n            {\n                currentTarget = propagationPath[i];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return currentTarget;\n    }\n\n    /**\n     * Creates an event whose {@code originalEvent} is {@code from}, with an optional `type` and `target` override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The {@code originalEvent} for the returned event.\n     * @param [type=from.type] - The type of the returned event.\n     * @param target - The target of the returned event.\n     */\n    protected createPointerEvent(\n        from: FederatedPointerEvent,\n        type?: string,\n        target?: FederatedEventTarget\n    ): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = target ?? this.hitTest(event.global.x, event.global.y) as FederatedEventTarget;\n\n        if (typeof type === 'string')\n        {\n            event.type = type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Creates a wheel event whose {@code originalEvent} is {@code from}.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The upstream wheel event.\n     */\n    protected createWheelEvent(from: FederatedWheelEvent): FederatedWheelEvent\n    {\n        const event = this.allocateEvent(FederatedWheelEvent);\n\n        this.copyWheelData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from;\n        event.target = this.hitTest(event.global.x, event.global.y);\n\n        return event;\n    }\n\n    /**\n     * Clones the event {@code from}, with an optional {@code type} override.\n     *\n     * The event is allocated using {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}.\n     * @param from - The event to clone.\n     * @param [type=from.type] - The type of the returned event.\n     */\n    protected clonePointerEvent(from: FederatedPointerEvent, type?: string): FederatedPointerEvent\n    {\n        const event = this.allocateEvent(FederatedPointerEvent);\n\n        event.nativeEvent = from.nativeEvent;\n        event.originalEvent = from.originalEvent;\n\n        this.copyPointerData(from, event);\n        this.copyMouseData(from, event);\n        this.copyData(from, event);\n\n        // copy propagation path for perf\n        event.target = from.target;\n        event.path = from.composedPath().slice();\n        event.type = type ?? event.type;\n\n        return event;\n    }\n\n    /**\n     * Copies wheel {@link PIXI.FederatedWheelEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + deltaMode\n     * + deltaX\n     * + deltaY\n     * + deltaZ\n     * @param from\n     * @param to\n     */\n    protected copyWheelData(from: FederatedWheelEvent, to: FederatedWheelEvent): void\n    {\n        to.deltaMode = from.deltaMode;\n        to.deltaX = from.deltaX;\n        to.deltaY = from.deltaY;\n        to.deltaZ = from.deltaZ;\n    }\n\n    /**\n     * Copies pointer {@link PIXI.FederatedPointerEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + pointerId\n     * + width\n     * + height\n     * + isPrimary\n     * + pointerType\n     * + pressure\n     * + tangentialPressure\n     * + tiltX\n     * + tiltY\n     * @param from\n     * @param to\n     */\n    protected copyPointerData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedPointerEvent && to instanceof FederatedPointerEvent)) return;\n\n        to.pointerId = from.pointerId;\n        to.width = from.width;\n        to.height = from.height;\n        to.isPrimary = from.isPrimary;\n        to.pointerType = from.pointerType;\n        to.pressure = from.pressure;\n        to.tangentialPressure = from.tangentialPressure;\n        to.tiltX = from.tiltX;\n        to.tiltY = from.tiltY;\n        to.twist = from.twist;\n    }\n\n    /**\n     * Copies mouse {@link PIXI.FederatedMouseEvent} data from {@code from} to {@code to}.\n     *\n     * The following properties are copied:\n     * + altKey\n     * + button\n     * + buttons\n     * + clientX\n     * + clientY\n     * + metaKey\n     * + movementX\n     * + movementY\n     * + pageX\n     * + pageY\n     * + x\n     * + y\n     * + screen\n     * + global\n     * @param from\n     * @param to\n     */\n    protected copyMouseData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        if (!(from instanceof FederatedMouseEvent && to instanceof FederatedMouseEvent)) return;\n\n        to.altKey = from.altKey;\n        to.button = from.button;\n        to.buttons = from.buttons;\n        to.client.copyFrom(from.client);\n        to.ctrlKey = from.ctrlKey;\n        to.metaKey = from.metaKey;\n        to.movement.copyFrom(from.movement);\n\n        to.screen.copyFrom(from.screen);\n        to.global.copyFrom(from.global);\n    }\n\n    /**\n     * Copies base {@link PIXI.FederatedEvent} data from {@code from} into {@code to}.\n     *\n     * The following properties are copied:\n     * + isTrusted\n     * + srcElement\n     * + timeStamp\n     * + type\n     * @param from - The event to copy data from.\n     * @param to - The event to copy data into.\n     */\n    protected copyData(from: FederatedEvent, to: FederatedEvent): void\n    {\n        to.isTrusted = from.isTrusted;\n        to.srcElement = from.srcElement;\n        to.timeStamp = performance.now();\n        to.type = from.type;\n        to.detail = from.detail;\n        to.view = from.view;\n        to.which = from.which;\n        to.layer.copyFrom(from.layer);\n        to.page.copyFrom(from.page);\n    }\n\n    /**\n     * @param id - The pointer ID.\n     * @returns The tracking data stored for the given pointer. If no data exists, a blank\n     *  state will be created.\n     */\n    protected trackingData(id: number): TrackingData\n    {\n        if (!this.mappingState.trackingData[id])\n        {\n            this.mappingState.trackingData[id] = {\n                pressTargetsByButton: {},\n                clicksByButton: {},\n                overTarget: null\n            };\n        }\n\n        return this.mappingState.trackingData[id];\n    }\n\n    /**\n     * Allocate a specific type of event from {@link PIXI.EventBoundary#eventPool this.eventPool}.\n     *\n     * This allocation is constructor-agnostic, as long as it only takes one argument - this event\n     * boundary.\n     * @param constructor - The event's constructor.\n     */\n    protected allocateEvent<T extends FederatedEvent>(\n        constructor: { new(boundary: EventBoundary): T }\n    ): T\n    {\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        const event = this.eventPool.get(constructor as any).pop() as T\n            || new constructor(this);\n\n        event.eventPhase = event.NONE;\n        event.currentTarget = null;\n        event.path = null;\n        event.target = null;\n\n        return event;\n    }\n\n    /**\n     * Frees the event and puts it back into the event pool.\n     *\n     * It is illegal to reuse the event until it is allocated again, using `this.allocateEvent`.\n     *\n     * It is also advised that events not allocated from {@link PIXI.EventBoundary#allocateEvent this.allocateEvent}\n     * not be freed. This is because of the possibility that the same event is freed twice, which can cause\n     * it to be allocated twice & result in overwriting.\n     * @param event - The event to be freed.\n     * @throws Error if the event is managed by another event boundary.\n     */\n    protected freeEvent<T extends FederatedEvent>(event: T): void\n    {\n        if (event.manager !== this) throw new Error('It is illegal to free an event not managed by this EventBoundary!');\n\n        const constructor = event.constructor;\n\n        if (!this.eventPool.has(constructor as any))\n        {\n            this.eventPool.set(constructor as any, []);\n        }\n\n        this.eventPool.get(constructor as any).push(event);\n    }\n\n    /**\n     * Similar to {@link EventEmitter.emit}, except it stops if the `propagationImmediatelyStopped` flag\n     * is set on the event.\n     * @param e - The event to call each listener with.\n     * @param type - The event key.\n     */\n    private notifyListeners(e: FederatedEvent, type: string): void\n    {\n        const listeners = ((e.currentTarget as any)._events as EmitterListeners)[type];\n\n        if (!listeners) return;\n\n        if ('fn' in listeners)\n        {\n            if (listeners.once) e.currentTarget.removeListener(type, listeners.fn, undefined, true);\n            listeners.fn.call(listeners.context, e);\n        }\n        else\n        {\n            for (\n                let i = 0, j = listeners.length;\n                i < j && !e.propagationImmediatelyStopped;\n                i++)\n            {\n                if (listeners[i].once) e.currentTarget.removeListener(type, listeners[i].fn, undefined, true);\n                listeners[i].fn.call(listeners[i].context, e);\n            }\n        }\n    }\n}\n\n/**\n * Fired when a mouse button (usually a mouse left-button) is pressed on the display.\n * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mousedown\n * @param {PIXI.FederatedPointerEvent} event - The mousedown event.\n */\n\n/**\n * Capture phase equivalent of {@code mousedown}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mousedowncapture\n * @param {PIXI.FederatedPointerEvent} event - The capture phase mousedown.\n */\n\n/**\n * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightdown\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code rightdown}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightdowncapture\n * @param {PIXI.FederatedPointerEvent} event - The rightdowncapture event.\n */\n\n/**\n * Fired when a pointer device button (usually a mouse left-button) is released over the display\n * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseup\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mouseup}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseupcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device secondary button (usually a mouse right-button) is released\n * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightup\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code rightup}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightupcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * A {@code click} event fires after the {@code pointerdown} and {@code pointerup} events, in that\n * order. If the mouse is moved over another DisplayObject after the {@code pointerdown} event, the\n * {@code click} event is fired on the most specific common ancestor of the two target DisplayObjects.\n *\n * The {@code detail} property of the event is the number of clicks that occurred within a 200ms\n * window of each other upto the current click. For example, it will be {@code 2} for a double click.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#click\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code click}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#clickcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * This event follows the semantics of {@code click}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightclick\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code rightclick}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightclickcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button (usually a mouse left-button) is released outside the\n * display object that initially registered a\n * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * This event is specific to the Federated Events API. It does not have a capture phase, unlike most of the\n * other events. It only bubbles to the most specific ancestor of the targets of the corresponding {@code pointerdown}\n * and {@code pointerup} events, i.e. the target of the {@code click} event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseupoutside\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mouseupoutside}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseupoutsidecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device secondary button (usually a mouse right-button) is released\n * outside the display object that initially registered a\n * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightupoutside\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code rightupoutside}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#rightupoutsidecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device (usually a mouse) is moved globally over the scene.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#globalmousemove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device (usually a mouse) is moved while over the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mousemove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mousemove}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mousemovecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device (usually a mouse) is moved onto the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseover\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mouseover}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseovercapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the mouse pointer is moved over a DisplayObject and its descendant's hit testing boundaries.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseenter\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mouseenter}\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseentercapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device (usually a mouse) is moved off the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * This may be fired on a DisplayObject that was removed from the scene graph immediately after\n * a {@code mouseover} event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseout\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code mouseout}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseoutcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the mouse pointer exits a DisplayObject and its descendants.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseleave\n * @param {PIXI.FederatedPointerEvent} event\n */\n\n/**\n * Capture phase equivalent of {@code mouseleave}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#mouseleavecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button is pressed on the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerdown\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerdown}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerdowncapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button is released over the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerup\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerup}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerupcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the operating system cancels a pointer event.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointercancel\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointercancel}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointercancelcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button is pressed and released on the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointertap\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointertap}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointertapcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device button is released outside the display object that initially\n * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * This event is specific to the Federated Events API. It does not have a capture phase, unlike most of the\n * other events. It only bubbles to the most specific ancestor of the targets of the corresponding {@code pointerdown}\n * and {@code pointerup} events, i.e. the target of the {@code click} event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerupoutside\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerupoutside}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerupoutsidecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device is moved globally over the scene.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#globalpointermove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device is moved while over the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointermove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointermove}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointermovecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device is moved onto the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerover\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerover}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerovercapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the pointer is moved over a DisplayObject and its descendant's hit testing boundaries.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerenter\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerenter}\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerentercapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a pointer device is moved off the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerout\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code pointerout}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointeroutcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the pointer leaves the hit testing boundaries of a DisplayObject and its descendants.\n *\n * This event notifies only the target and does not bubble.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerleave\n * @param {PIXI.FederatedPointerEvent} event - The `pointerleave` event.\n */\n\n/**\n * Capture phase equivalent of {@code pointerleave}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#pointerleavecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is placed on the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchstart\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code touchstart}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchstartcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is removed from the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchend\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code touchend}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchendcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when the operating system cancels a touch.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchcancel\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code touchcancel}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchcancelcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is placed and removed from the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#tap\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code tap}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#tapcapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is removed outside of the display object that initially\n * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchendoutside\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code touchendoutside}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchendoutsidecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is moved globally over the scene.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#globaltouchmove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a touch point is moved along the display object.\n * DisplayObject's `interactive` property must be set to `true` to fire event.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchmove\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Capture phase equivalent of {@code touchmove}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#touchmovecapture\n * @param {PIXI.FederatedPointerEvent} event - Event\n */\n\n/**\n * Fired when a the user scrolls with the mouse cursor over a DisplayObject.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#wheel\n * @type {PIXI.FederatedWheelEvent}\n */\n\n/**\n * Capture phase equivalent of {@code wheel}.\n *\n * These events are propagating from the {@link PIXI.EventSystem EventSystem} in @pixi/events.\n * @event PIXI.DisplayObject#wheelcapture\n * @type {PIXI.FederatedWheelEvent}\n */\n", "import { extensions, ExtensionType } from '@pixi/core';\nimport { EventBoundary } from './EventBoundary';\nimport { FederatedPointerEvent } from './FederatedPointerEvent';\nimport { FederatedWheelEvent } from './FederatedWheelEvent';\n\nimport type { ExtensionMetadata, ICanvas, IPointData, IRenderableObject } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\nimport type { FederatedMouseEvent } from './FederatedMouseEvent';\n\nconst MOUSE_POINTER_ID = 1;\nconst TOUCH_TO_POINTER: Record<string, string> = {\n    touchstart: 'pointerdown',\n    touchend: 'pointerup',\n    touchendoutside: 'pointerupoutside',\n    touchmove: 'pointermove',\n    touchcancel: 'pointercancel',\n};\n\ninterface Renderer\n{\n    lastObjectRendered: IRenderableObject;\n    view: ICanvas;\n    resolution: number;\n    plugins: Record<string, any>;\n}\n\n/**\n * The system for handling UI events.\n * @memberof PIXI\n */\nexport class EventSystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'events',\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n    };\n\n    /**\n     * The {@link PIXI.EventBoundary} for the stage.\n     *\n     * The {@link PIXI.EventBoundary#rootTarget rootTarget} of this root boundary is automatically set to\n     * the last rendered object before any event processing is initiated. This means the main scene\n     * needs to be rendered atleast once before UI events will start propagating.\n     *\n     * The root boundary should only be changed during initialization. Otherwise, any state held by the\n     * event boundary may be lost (like hovered & pressed DisplayObjects).\n     */\n    public readonly rootBoundary: EventBoundary;\n\n    /** Does the device support touch events https://www.w3.org/TR/touch-events/ */\n    public readonly supportsTouchEvents = 'ontouchstart' in globalThis;\n\n    /** Does the device support pointer events https://www.w3.org/Submission/pointer-events/ */\n    public readonly supportsPointerEvents = !!globalThis.PointerEvent;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for {@code domElement},\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     */\n    public cursorStyles: Record<string, string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The DOM element to which the root event listeners are bound. This is automatically set to\n     * the renderer's {@link PIXI.Renderer#view view}.\n     */\n    public domElement: HTMLElement = null;\n\n    /** The resolution used to convert between the DOM client space into world space. */\n    public resolution = 1;\n\n    /** The renderer managing this {@link EventSystem}. */\n    public renderer: Renderer;\n\n    private currentCursor: string;\n    private rootPointerEvent: FederatedPointerEvent;\n    private rootWheelEvent: FederatedWheelEvent;\n    private eventsAdded: boolean;\n\n    /**\n     * @param {PIXI.Renderer} renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.rootBoundary = new EventBoundary(null);\n\n        this.autoPreventDefault = true;\n        this.eventsAdded = false;\n\n        this.rootPointerEvent = new FederatedPointerEvent(null);\n        this.rootWheelEvent = new FederatedWheelEvent(null);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.onPointerOverOut = this.onPointerOverOut.bind(this);\n        this.onWheel = this.onWheel.bind(this);\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    init(): void\n    {\n        const { view, resolution } = this.renderer;\n\n        this.setTargetElement(view as HTMLCanvasElement);\n        this.resolution = resolution;\n    }\n\n    /**\n     * Handle changing resolution.\n     * @ignore\n     */\n    resolutionChange(resolution: number): void\n    {\n        this.resolution = resolution;\n    }\n\n    /** Destroys all event listeners and detaches the renderer. */\n    destroy(): void\n    {\n        this.setTargetElement(null);\n        this.renderer = null;\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursor(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.domElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursor === mode)\n        {\n            return;\n        }\n        this.currentCursor = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.domElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.domElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.domElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Event handler for pointer down events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerDown(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(nativeEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = nativeEvent.cancelable || !('cancelable' in nativeEvent);\n\n            if (cancelable)\n            {\n                nativeEvent.preventDefault();\n            }\n        }\n\n        for (let i = 0, j = events.length; i < j; i++)\n        {\n            const nativeEvent = events[i];\n            const federatedEvent = this.bootstrapEvent(this.rootPointerEvent, nativeEvent);\n\n            this.rootBoundary.mapEvent(federatedEvent);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer move events on on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch events.\n     */\n    private onPointerMove(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer up events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerUp(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        let target = nativeEvent.target;\n\n        // if in shadow DOM use composedPath to access target\n        if (nativeEvent.composedPath && nativeEvent.composedPath().length > 0)\n        {\n            target = nativeEvent.composedPath()[0];\n        }\n\n        const outside = target !== this.domElement ? 'outside' : '';\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            event.type += outside;\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Event handler for pointer over & out events on {@link PIXI.EventSystem#domElement this.domElement}.\n     * @param nativeEvent - The native mouse/pointer/touch event.\n     */\n    private onPointerOverOut(nativeEvent: MouseEvent | PointerEvent | TouchEvent): void\n    {\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (nativeEvent as PointerEvent).pointerType === 'touch') return;\n\n        const normalizedEvents = this.normalizeToPointerData(nativeEvent);\n\n        for (let i = 0, j = normalizedEvents.length; i < j; i++)\n        {\n            const event = this.bootstrapEvent(this.rootPointerEvent, normalizedEvents[i]);\n\n            this.rootBoundary.mapEvent(event);\n        }\n\n        this.setCursor(this.rootBoundary.cursor);\n    }\n\n    /**\n     * Passive handler for `wheel` events on {@link EventSystem.domElement this.domElement}.\n     * @param nativeEvent - The native wheel event.\n     */\n    protected onWheel(nativeEvent: WheelEvent): void\n    {\n        const wheelEvent = this.normalizeWheelEvent(nativeEvent);\n\n        this.rootBoundary.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        this.rootBoundary.mapEvent(wheelEvent);\n    }\n\n    /**\n     * Sets the {@link PIXI.EventSystem#domElement domElement} and binds event listeners.\n     *\n     * To deregister the current DOM element without setting a new one, pass {@code null}.\n     * @param element - The new DOM element.\n     */\n    public setTargetElement(element: HTMLElement): void\n    {\n        this.removeEvents();\n        this.domElement = element;\n        this.addEvents();\n    }\n\n    /** Register event listeners on {@link PIXI.Renderer#domElement this.domElement}. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if (style)\n        {\n            if ((globalThis.navigator as any).msPointerEnabled)\n            {\n                style.msContentZooming = 'none';\n                style.msTouchAction = 'none';\n            }\n            else if (this.supportsPointerEvents)\n            {\n                style.touchAction = 'none';\n            }\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.domElement.addEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.addEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.addEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.addEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.addEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // Always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.addEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.addEventListener('touchend', this.onPointerUp, true);\n            this.domElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.addEventListener('wheel', this.onWheel, {\n            passive: true,\n            capture: true,\n        });\n\n        this.eventsAdded = true;\n    }\n\n    /** Unregister event listeners on {@link PIXI.EventSystem#domElement this.domElement}. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.domElement)\n        {\n            return;\n        }\n\n        const style = this.domElement.style as CrossCSSStyleDeclaration;\n\n        if ((globalThis.navigator as any).msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.domElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.domElement.removeEventListener('pointerleave', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('pointerover', this.onPointerOverOut, true);\n            // globalThis.removeEventListener('pointercancel', this.onPointerCancel, true);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.domElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.domElement.removeEventListener('mouseout', this.onPointerOverOut, true);\n            this.domElement.removeEventListener('mouseover', this.onPointerOverOut, true);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.domElement.removeEventListener('touchstart', this.onPointerDown, true);\n            // this.domElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.domElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.domElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.domElement.removeEventListener('wheel', this.onWheel, true);\n\n        this.domElement = null;\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     * @param  {PIXI.IPointData} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.domElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.domElement as any).width,\n                height: (this.domElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.domElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.domElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.domElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     * @param event - The original event data from a touch or mouse event\n     * @returns An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: TouchEvent | MouseEvent | PointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = 1;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n                touch.type = event.type;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /**\n     * Normalizes the native {@link https://w3c.github.io/uievents/#interface-wheelevent WheelEvent}.\n     *\n     * The returned {@link PIXI.FederatedWheelEvent} is a shared instance. It will not persist across\n     * multiple native wheel events.\n     * @param nativeEvent - The native wheel event that occurred on the canvas.\n     * @returns A federated wheel event.\n     */\n    protected normalizeWheelEvent(nativeEvent: WheelEvent): FederatedWheelEvent\n    {\n        const event = this.rootWheelEvent;\n\n        this.transferMouseData(event, nativeEvent);\n\n        // When WheelEvent is triggered by scrolling with mouse wheel, reading WheelEvent.deltaMode\n        // before deltaX/deltaY/deltaZ on Firefox will result in WheelEvent.DOM_DELTA_LINE (1),\n        // while reading WheelEvent.deltaMode after deltaX/deltaY/deltaZ on Firefox or reading\n        // in any order on other browsers will result in WheelEvent.DOM_DELTA_PIXEL (0).\n        // Therefore, we need to read WheelEvent.deltaMode after deltaX/deltaY/deltaZ in order to\n        // make its behavior more consistent across browsers.\n        // @see https://github.com/pixijs/pixijs/issues/8970\n        event.deltaX = nativeEvent.deltaX;\n        event.deltaY = nativeEvent.deltaY;\n        event.deltaZ = nativeEvent.deltaZ;\n        event.deltaMode = nativeEvent.deltaMode;\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);\n        event.offset.copyFrom(event.screen);\n\n        event.nativeEvent = nativeEvent;\n        event.type = nativeEvent.type;\n\n        return event;\n    }\n\n    /**\n     * Normalizes the {@code nativeEvent} into a federateed {@code FederatedPointerEvent}.\n     * @param event\n     * @param nativeEvent\n     */\n    private bootstrapEvent(event: FederatedPointerEvent, nativeEvent: PointerEvent): FederatedPointerEvent\n    {\n        event.originalEvent = null;\n        event.nativeEvent = nativeEvent;\n\n        event.pointerId = nativeEvent.pointerId;\n        event.width = nativeEvent.width;\n        event.height = nativeEvent.height;\n        event.isPrimary = nativeEvent.isPrimary;\n        event.pointerType = nativeEvent.pointerType;\n        event.pressure = nativeEvent.pressure;\n        event.tangentialPressure = nativeEvent.tangentialPressure;\n        event.tiltX = nativeEvent.tiltX;\n        event.tiltY = nativeEvent.tiltY;\n        event.twist = nativeEvent.twist;\n        this.transferMouseData(event, nativeEvent);\n\n        this.mapPositionToPoint(event.screen, nativeEvent.clientX, nativeEvent.clientY);\n        event.global.copyFrom(event.screen);// global = screen for top-level\n        event.offset.copyFrom(event.screen);// EventBoundary recalculates using its rootTarget\n\n        event.isTrusted = nativeEvent.isTrusted;\n        if (event.type === 'pointerleave')\n        {\n            event.type = 'pointerout';\n        }\n        if (event.type.startsWith('mouse'))\n        {\n            event.type = event.type.replace('mouse', 'pointer');\n        }\n        if (event.type.startsWith('touch'))\n        {\n            event.type = TOUCH_TO_POINTER[event.type] || event.type;\n        }\n\n        return event;\n    }\n\n    /**\n     * Transfers base & mouse event data from the {@code nativeEvent} to the federated event.\n     * @param event\n     * @param nativeEvent\n     */\n    private transferMouseData(event: FederatedMouseEvent, nativeEvent: MouseEvent): void\n    {\n        event.isTrusted = nativeEvent.isTrusted;\n        event.srcElement = nativeEvent.srcElement;\n        event.timeStamp = performance.now();\n        event.type = nativeEvent.type;\n\n        event.altKey = nativeEvent.altKey;\n        event.button = nativeEvent.button;\n        event.buttons = nativeEvent.buttons;\n        event.client.x = nativeEvent.clientX;\n        event.client.y = nativeEvent.clientY;\n        event.ctrlKey = nativeEvent.ctrlKey;\n        event.metaKey = nativeEvent.metaKey;\n        event.movement.x = nativeEvent.movementX;\n        event.movement.y = nativeEvent.movementY;\n        event.page.x = nativeEvent.pageX;\n        event.page.y = nativeEvent.pageY;\n        event.relatedTarget = null;\n        event.shiftKey = nativeEvent.shiftKey;\n    }\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n    type: string;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n    type: string;\n}\n\nextensions.add(EventSystem);\n", "import { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from './FederatedEvent';\n\nimport type { utils } from '@pixi/core';\nimport type { AllFederatedEventMap } from './FederatedEventMap';\nimport type { FederatedPointerEvent } from './FederatedPointerEvent';\nimport type { FederatedWheelEvent } from './FederatedWheelEvent';\n\nexport type Cursor = 'auto'\n| 'default'\n| 'none'\n| 'context-menu'\n| 'help'\n| 'pointer'\n| 'progress'\n| 'wait'\n| 'cell'\n| 'crosshair'\n| 'text'\n| 'vertical-text'\n| 'alias'\n| 'copy'\n| 'move'\n| 'no-drop'\n| 'not-allowed'\n| 'e-resize'\n| 'n-resize'\n| 'ne-resize'\n| 'nw-resize'\n| 's-resize'\n| 'se-resize'\n| 'sw-resize'\n| 'w-resize'\n| 'ns-resize'\n| 'ew-resize'\n| 'nesw-resize'\n| 'col-resize'\n| 'nwse-resize'\n| 'row-resize'\n| 'all-scroll'\n| 'zoom-in'\n| 'zoom-out'\n| 'grab'\n| 'grabbing';\n\n// @ignore - This is documented elsewhere.\nexport interface IHitArea\n{\n    contains(x: number, y: number): boolean;\n}\n\n/** Function type for handlers, e.g., onclick */\nexport type FederatedEventHandler<T= FederatedPointerEvent> = (event: T) => void;\n\n/**\n * Describes the shape for a {@link FederatedEvent}'s' `eventTarget`.\n * @memberof PIXI\n */\nexport interface FederatedEventTarget extends utils.EventEmitter, EventTarget\n{\n    /** The cursor preferred when the mouse pointer is hovering over. */\n    cursor: Cursor | string;\n\n    /** The parent of this event target. */\n    readonly parent?: FederatedEventTarget;\n\n    /** The children of this event target. */\n    readonly children?: ReadonlyArray<FederatedEventTarget>;\n\n    /** Whether this event target should fire UI events. */\n    interactive: boolean;\n\n    /** Whether this event target has any children that need UI events. This can be used optimize event propagation. */\n    interactiveChildren: boolean;\n\n    /** The hit-area specifies the area for which pointer events should be captured by this event target. */\n    hitArea: IHitArea | null;\n\n    // In Angular projects, zone.js is monkey patching the `EventTarget`\n    // by adding its own `removeAllListeners(event?: string): void;` method,\n    // so we have to override this signature when extending both `EventTarget` and `utils.EventEmitter`\n    // to make it compatible with Angular projects\n    // @see https://github.com/pixijs/pixijs/issues/8794\n\n    /** Remove all listeners, or those of the specified event. */\n    removeAllListeners(event?: string | symbol): this;\n\n    /** Handler for 'click' event */\n    onclick: FederatedEventHandler | null;\n    /** Handler for 'mousedown' event */\n    onmousedown: FederatedEventHandler | null;\n    /** Handler for 'mouseenter' event */\n    onmouseenter: FederatedEventHandler | null;\n    /** Handler for 'mouseleave' event */\n    onmouseleave: FederatedEventHandler | null;\n    /** Handler for 'mousemove' event */\n    onmousemove: FederatedEventHandler | null;\n    /** Handler for 'globalmousemove' event */\n    onglobalmousemove: FederatedEventHandler | null;\n    /** Handler for 'mouseout' event */\n    onmouseout: FederatedEventHandler | null;\n    /** Handler for 'mouseover' event */\n    onmouseover: FederatedEventHandler | null;\n    /** Handler for 'mouseup' event */\n    onmouseup: FederatedEventHandler | null;\n    /** Handler for 'mouseupoutside' event */\n    onmouseupoutside: FederatedEventHandler | null;\n    /** Handler for 'pointercancel' event */\n    onpointercancel: FederatedEventHandler | null;\n    /** Handler for 'pointerdown' event */\n    onpointerdown: FederatedEventHandler | null;\n    /** Handler for 'pointerenter' event */\n    onpointerenter: FederatedEventHandler | null;\n    /** Handler for 'pointerleave' event */\n    onpointerleave: FederatedEventHandler | null;\n    /** Handler for 'pointermove' event */\n    onpointermove: FederatedEventHandler | null;\n    /** Handler for 'globalpointermove' event */\n    onglobalpointermove: FederatedEventHandler | null;\n    /** Handler for 'pointerout' event */\n    onpointerout: FederatedEventHandler | null;\n    /** Handler for 'pointerover' event */\n    onpointerover: FederatedEventHandler | null;\n    /** Handler for 'pointertap' event */\n    onpointertap: FederatedEventHandler | null;\n    /** Handler for 'pointerup' event */\n    onpointerup: FederatedEventHandler | null;\n    /** Handler for 'pointerupoutside' event */\n    onpointerupoutside: FederatedEventHandler | null;\n    /** Handler for 'rightclick' event */\n    onrightclick: FederatedEventHandler | null;\n    /** Handler for 'rightdown' event */\n    onrightdown: FederatedEventHandler | null;\n    /** Handler for 'rightup' event */\n    onrightup: FederatedEventHandler | null;\n    /** Handler for 'rightupoutside' event */\n    onrightupoutside: FederatedEventHandler | null;\n    /** Handler for 'tap' event */\n    ontap: FederatedEventHandler | null;\n    /** Handler for 'touchcancel' event */\n    ontouchcancel: FederatedEventHandler | null;\n    /** Handler for 'touchend' event */\n    ontouchend: FederatedEventHandler | null;\n    /** Handler for 'touchendoutside' event */\n    ontouchendoutside: FederatedEventHandler | null;\n    /** Handler for 'touchmove' event */\n    ontouchmove: FederatedEventHandler | null;\n    /** Handler for 'globaltouchmove' event */\n    onglobaltouchmove: FederatedEventHandler | null;\n    /** Handler for 'touchstart' event */\n    ontouchstart: FederatedEventHandler | null;\n    /** Handler for 'wheel' event */\n    onwheel: FederatedEventHandler<FederatedWheelEvent> | null;\n}\n\ntype AddListenerOptions = boolean | AddEventListenerOptions;\ntype RemoveListenerOptions = boolean | EventListenerOptions;\n\nexport interface IFederatedDisplayObject\n    extends Omit<FederatedEventTarget, 'parent' | 'children' | keyof utils.EventEmitter | 'cursor'>\n{\n    addEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: AddListenerOptions\n    ): void;\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    ): void;\n    removeEventListener<K extends keyof AllFederatedEventMap>(\n        type: K,\n        listener: (e: AllFederatedEventMap[K]) => any,\n        options?: RemoveListenerOptions\n    ): void;\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    ): void;\n}\n\nexport const FederatedDisplayObject: IFederatedDisplayObject = {\n\n    /**\n     * Property-based event handler for the `click` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onclick = (event) => {\n     *  //some function here that happens on click\n     * }\n     */\n    onclick: null,\n\n    /**\n     * Property-based event handler for the `mousedown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousedown = (event) => {\n     *  //some function here that happens on mousedown\n     * }\n     */\n    onmousedown: null,\n\n    /**\n     * Property-based event handler for the `mouseenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseenter = (event) => {\n     *  //some function here that happens on mouseenter\n     * }\n     */\n    onmouseenter: null,\n\n    /**\n     * Property-based event handler for the `mouseleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseleave = (event) => {\n     *  //some function here that happens on mouseleave\n     * }\n     */\n    onmouseleave: null,\n\n    /**\n     * Property-based event handler for the `mousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmousemove = (event) => {\n     *  //some function here that happens on mousemove\n     * }\n     */\n    onmousemove: null,\n\n    /**\n     * Property-based event handler for the `globalmousemove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalmousemove = (event) => {\n     *  //some function here that happens on globalmousemove\n     * }\n     */\n    onglobalmousemove: null,\n\n    /**\n     * Property-based event handler for the `mouseout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseout = (event) => {\n     *  //some function here that happens on mouseout\n     * }\n     */\n    onmouseout: null,\n\n    /**\n     * Property-based event handler for the `mouseover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseover = (event) => {\n     *  //some function here that happens on mouseover\n     * }\n     */\n    onmouseover:  null,\n\n    /**\n     * Property-based event handler for the `mouseup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseup = (event) => {\n     *  //some function here that happens on mouseup\n     * }\n     */\n    onmouseup:  null,\n\n    /**\n     * Property-based event handler for the `mouseupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onmouseupoutside = (event) => {\n     *  //some function here that happens on mouseupoutside\n     * }\n     */\n    onmouseupoutside:  null,\n\n    /**\n     * Property-based event handler for the `pointercancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointercancel = (event) => {\n     *  //some function here that happens on pointercancel\n     * }\n     */\n    onpointercancel:  null,\n\n    /**\n     * Property-based event handler for the `pointerdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerdown = (event) => {\n     *  //some function here that happens on pointerdown\n     * }\n     */\n    onpointerdown:  null,\n\n    /**\n     * Property-based event handler for the `pointerenter` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerenter = (event) => {\n     *  //some function here that happens on pointerenter\n     * }\n     */\n    onpointerenter:  null,\n\n    /**\n     * Property-based event handler for the `pointerleave` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerleave = (event) => {\n     *  //some function here that happens on pointerleave\n     * }\n     */\n    onpointerleave:  null,\n\n    /**\n     * Property-based event handler for the `pointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointermove = (event) => {\n     *  //some function here that happens on pointermove\n     * }\n     */\n    onpointermove:  null,\n\n    /**\n     * Property-based event handler for the `globalpointermove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobalpointermove = (event) => {\n     *  //some function here that happens on globalpointermove\n     * }\n     */\n    onglobalpointermove:  null,\n\n    /**\n     * Property-based event handler for the `pointerout` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerout = (event) => {\n     *  //some function here that happens on pointerout\n     * }\n     */\n    onpointerout:  null,\n\n    /**\n     * Property-based event handler for the `pointerover` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerover = (event) => {\n     *  //some function here that happens on pointerover\n     * }\n     */\n    onpointerover:  null,\n\n    /**\n     * Property-based event handler for the `pointertap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointertap = (event) => {\n     *  //some function here that happens on pointertap\n     * }\n     */\n    onpointertap:  null,\n\n    /**\n     * Property-based event handler for the `pointerup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerup = (event) => {\n     *  //some function here that happens on pointerup\n     * }\n     */\n    onpointerup:  null,\n\n    /**\n     * Property-based event handler for the `pointerupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onpointerupoutside = (event) => {\n     *  //some function here that happens on pointerupoutside\n     * }\n     */\n    onpointerupoutside:  null,\n\n    /**\n     * Property-based event handler for the `rightclick` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightclick = (event) => {\n     *  //some function here that happens on rightclick\n     * }\n     */\n    onrightclick:  null,\n\n    /**\n     * Property-based event handler for the `rightdown` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightdown = (event) => {\n     *  //some function here that happens on rightdown\n     * }\n     */\n    onrightdown:  null,\n\n    /**\n     * Property-based event handler for the `rightup` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightup = (event) => {\n     *  //some function here that happens on rightup\n     * }\n     */\n    onrightup:  null,\n\n    /**\n     * Property-based event handler for the `rightupoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onrightupoutside = (event) => {\n     *  //some function here that happens on rightupoutside\n     * }\n     */\n    onrightupoutside:  null,\n\n    /**\n     * Property-based event handler for the `tap` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontap = (event) => {\n     *  //some function here that happens on tap\n     * }\n     */\n    ontap:  null,\n\n    /**\n     * Property-based event handler for the `touchcancel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchcancel = (event) => {\n     *  //some function here that happens on touchcancel\n     * }\n     */\n    ontouchcancel:  null,\n\n    /**\n     * Property-based event handler for the `touchend` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchend = (event) => {\n     *  //some function here that happens on touchend\n     * }\n     */\n    ontouchend:  null,\n\n    /**\n     * Property-based event handler for the `touchendoutside` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchendoutside = (event) => {\n     *  //some function here that happens on touchendoutside\n     * }\n     */\n    ontouchendoutside:  null,\n\n    /**\n     * Property-based event handler for the `touchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchmove = (event) => {\n     *  //some function here that happens on touchmove\n     * }\n     */\n    ontouchmove:  null,\n\n    /**\n     * Property-based event handler for the `globaltouchmove` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onglobaltouchmove = (event) => {\n     *  //some function here that happens on globaltouchmove\n     * }\n     */\n    onglobaltouchmove:  null,\n\n    /**\n     * Property-based event handler for the `touchstart` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.ontouchstart = (event) => {\n     *  //some function here that happens on touchstart\n     * }\n     */\n    ontouchstart:  null,\n\n    /**\n     * Property-based event handler for the `wheel` event.\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     * @example\n     * this.onwheel = (event) => {\n     *  //some function here that happens on wheel\n     * }\n     */\n    onwheel:  null,\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * events will not be emitted unless `interactive` is set to `true`.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.on('tap', (event) => {\n     *     // Handle event\n     * });\n     * @memberof PIXI.DisplayObject#\n     */\n    interactive: false,\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     * @example\n     * import { Rectangle, Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * Unlike `on` or `addListener` which are methods from EventEmitter, `addEventListener`\n     * seeks to be compatible with the DOM's `addEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event to listen to.\n     * @param listener - The listener callback or object.\n     * @param options - Listener options, used for capture phase.\n     * @example\n     * // Tell the user whether they did a single, double, triple, or nth click.\n     * button.addEventListener('click', {\n     *     handleEvent(e): {\n     *         let prefix;\n     *\n     *         switch (e.detail) {\n     *             case 1: prefix = 'single'; break;\n     *             case 2: prefix = 'double'; break;\n     *             case 3: prefix = 'triple'; break;\n     *             default: prefix = e.detail + 'th'; break;\n     *         }\n     *\n     *         console.log('That was a ' + prefix + 'click');\n     *     }\n     * });\n     *\n     * // But skip the first click!\n     * button.parent.addEventListener('click', function blockClickOnce(e) {\n     *     e.stopImmediatePropagation();\n     *     button.parent.removeEventListener('click', blockClickOnce, true);\n     * }, {\n     *     capture: true,\n     * });\n     */\n    addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: AddListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).on(type, listener, context);\n    },\n\n    /**\n     * Unlike `off` or `removeListener` which are methods from EventEmitter, `removeEventListener`\n     * seeks to be compatible with the DOM's `removeEventListener` with support for options.\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param type - The type of event the listener is bound to.\n     * @param listener - The listener callback or object.\n     * @param options - The original listener options. This is required to deregister a capture phase listener.\n     */\n    removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: RemoveListenerOptions\n    )\n    {\n        const capture = (typeof options === 'boolean' && options)\n            || (typeof options === 'object' && options.capture);\n        const context = typeof listener === 'function' ? undefined : listener;\n\n        type = capture ? `${type}capture` : type;\n        listener = typeof listener === 'function' ? listener : listener.handleEvent;\n\n        (this as unknown as utils.EventEmitter).off(type, listener, context);\n    },\n\n    /**\n     * Dispatch the event on this {@link PIXI.DisplayObject} using the event's {@link PIXI.EventBoundary}.\n     *\n     * The target of the event is set to `this` and the `defaultPrevented` flag is cleared before dispatch.\n     *\n     * **IMPORTANT:** _Only_ available if using the `@pixi/events` package.\n     * @memberof PIXI.DisplayObject\n     * @param e - The event to dispatch.\n     * @returns Whether the {@link PIXI.FederatedEvent.preventDefault preventDefault}() method was not invoked.\n     * @example\n     * // Reuse a click event!\n     * button.dispatchEvent(clickEvent);\n     */\n    dispatchEvent(e: Event): boolean\n    {\n        if (!(e instanceof FederatedEvent))\n        {\n            throw new Error('DisplayObject cannot propagate events outside of the Federated Events API');\n        }\n\n        e.defaultPrevented = false;\n        e.path = null;\n        e.target = this as unknown as FederatedEventTarget;\n        e.manager.dispatchEvent(e);\n\n        return !e.defaultPrevented;\n    }\n};\n\nDisplayObject.mixin(FederatedDisplayObject);\n", "import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget\n{\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement\n{\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {object}\n * @example\n * import { accessibleTarget } from 'pixi.js';\n *\n * function MyObject() {}\n * Object.assign(MyObject.prototype, accessibleTarget);\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n", "import { extensions, ExtensionType, utils } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { FederatedEvent } from '@pixi/events';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { ExtensionMetadata, IRenderer, Rectangle } from '@pixi/core';\nimport type { Container } from '@pixi/display';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'accessibility',\n        type: [\n            ExtensionType.RendererPlugin,\n            ExtensionType.CanvasRendererPlugin,\n        ],\n    };\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: IRenderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this._hookDiv = null;\n\n        if (utils.isMobile.tablet || utils.isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (utils.isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer.lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                utils.removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     * @param {HTMLElement} div -\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { displayObject: target } = e.target as IAccessibleHTMLElement;\n        const boundry = this.renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundry), { target });\n\n        boundry.rootTarget = this.renderer.lastObjectRendered as DisplayObject;\n        type.forEach((type) => boundry.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n\nextensions.add(AccessibilityManager);\n", "import { autoDetectRenderer, extensions, ExtensionType } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { ICanvas, IRenderer, IRendererOptionsAuto, Rectangle } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface IApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: IApplicationOptions): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n/**\n * Application options supplied to constructor.\n * @memberof PIXI\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PixiJS application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * import { Application, Sprite } from 'pixi.js';\n *\n * // Create the application\n * const app = new Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application<VIEW extends ICanvas = ICanvas>\n{\n    /** Collection of installed plugins. */\n    static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: IRenderer<VIEW>;\n\n    /**\n     * @param {PIXI.IApplicationOptions} [options] - The optional application and renderer parameters.\n     * @param {boolean} [options.antialias=false] -\n     *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @param {number|string} [options.background] - Alias for `options.backgroundColor`.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number|string} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`),\n     *  hex strings (e.g. `'#f00'` or `'#ff0000'`) or color names (e.g. `'red'`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {boolean} [options.forceCanvas=false] -\n     *  Force using {@link PIXI.CanvasRenderer}, even if WebGL is available. This option only is available when\n     *  using **pixi.js-legacy** or **@pixi/canvas-renderer** packages, otherwise it will throw an error.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {boolean} [options.hello=false] - Whether to log the version and type information of renderer to console.\n     * @param {string} [options.powerPreference] -\n     *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     *  can be `'default'`, `'high-performance'` or `'low-power'`.\n     *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @param {boolean} [options.premultipliedAlpha=true] -\n     *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @param {boolean} [options.preserveDrawingBuffer=false] -\n     *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n     *  **Deprecated since 7.0.0, use `premultipliedAlpha` and `backgroundAlpha` instead.** \\\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`. \\\n     *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     *  set to `true` and `premultipliedAlpha` will be to `false`.\n     * @param {PIXI.ICanvas} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(options?: IApplicationOptions)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer<VIEW>(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {PIXI.ICanvas}\n     * @readonly\n     */\n    get view(): VIEW\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n", "import { extensions, ExtensionType } from '@pixi/core';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n\nextensions.add(ResizePlugin);\n", "/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} [COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2] -\n * @property {number} [COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918] -\n * @property {number} [COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919] -\n * @property {number} [COMPRESSED_SRGB_S3TC_DXT1_EXT=35916] -\n * @property {number} [COMPRESSED_R11_EAC=0x9270] -\n * @property {number} [COMPRESSED_SIGNED_R11_EAC=0x9271] -\n * @property {number} [COMPRESSED_RG11_EAC=0x9272] -\n * @property {number} [COMPRESSED_SIGNED_RG11_EAC=0x9273] -\n * @property {number} [COMPRESSED_RGB8_ETC2=0x9274] -\n * @property {number} [COMPRESSED_RGBA8_ETC2_EAC=0x9278] -\n * @property {number} [COMPRESSED_SRGB8_ETC2=0x9275] -\n * @property {number} [COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279] -\n * @property {number} [COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276] -\n * @property {number} [COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277] -\n * @property {number} [COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02] -\n * @property {number} [COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01] -\n * @property {number} [COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03] -\n * @property {number} [COMPRESSED_RGB_ETC1_WEBGL=0x8D64] -\n * @property {number} [COMPRESSED_RGB_ATC_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92] -\n * @property {number} [COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE] -\n * @property {number} [COMPRESSED_RGBA_ASTC_4x4_KHR=0x93B0] -\n */\nexport enum INTERNAL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    // WEBGL_compressed_texture_s3tc\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    COMPRESSED_R11_EAC = 0x9270,\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    COMPRESSED_RG11_EAC = 0x9272,\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1,\n\n    // @see https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n    // WEBGL_compressed_texture_astc\n    /* eslint-disable-next-line camelcase */\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ASTC_4x4_KHR]: 1,\n};\n", "import { extensions as ext, ExtensionType, settings } from '@pixi/core';\n\nimport type { FormatDetectionParser } from '@pixi/assets';\nimport type { CompressedTextureExtensionRef, CompressedTextureExtensions } from './compressedTextureExtensions';\n\nlet storedGl: WebGLRenderingContext;\nlet extensions: Partial<CompressedTextureExtensions>;\n\nfunction getCompressedTextureExtensions()\n{\n    extensions = {\n        s3tc: storedGl.getExtension('WEBGL_compressed_texture_s3tc'),\n        s3tc_sRGB: storedGl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n        etc: storedGl.getExtension('WEBGL_compressed_texture_etc'),\n        etc1: storedGl.getExtension('WEBGL_compressed_texture_etc1'),\n        pvrtc: storedGl.getExtension('WEBGL_compressed_texture_pvrtc')\n            || storedGl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n        atc: storedGl.getExtension('WEBGL_compressed_texture_atc'),\n        astc: storedGl.getExtension('WEBGL_compressed_texture_astc')\n    } as Partial<CompressedTextureExtensions>;\n}\n\nexport const detectCompressedTextures = {\n    extension: {\n        type: ExtensionType.DetectionParser,\n        priority: 2,\n    },\n    test: async (): Promise<boolean> =>\n    {\n        // Auto-detect WebGL compressed-texture extensions\n        const canvas = settings.ADAPTER.createCanvas();\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            // #if _DEBUG\n            console.warn('WebGL not available for compressed textures.');\n            // #endif\n\n            return false;\n        }\n\n        storedGl = gl;\n\n        return true;\n    },\n    add: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        const textureFormats = [];\n\n        // Assign all available compressed-texture formats\n        for (const extensionName in extensions)\n        {\n            const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n            if (!extension)\n            {\n                continue;\n            }\n\n            textureFormats.push(extensionName);\n        }\n\n        return [...textureFormats, ...formats];\n    },\n    remove: async (formats: string[]): Promise<string[]> =>\n    {\n        if (!extensions) getCompressedTextureExtensions();\n\n        return formats.filter((f) => !(f in extensions));\n    },\n} as FormatDetectionParser;\n\next.add(detectCompressedTextures);\n", "import { BufferResource, ViewableBuffer } from '@pixi/core';\n\nimport type { Resource } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string;\n    protected buffer: ViewableBuffer;\n    protected loaded: boolean;\n\n    /**\n     * @param {string} source - the URL of the texture file\n     * @param {PIXI.IBlobOptions} options\n     * @param {boolean}[options.autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link BlobResource#load}\n     * @param {boolean}[options.width] - the width in pixels.\n     * @param {boolean}[options.height] - the height in pixels.\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @member {string}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @member {ViewableBuffer}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (data?.length)\n        {\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /** Loads the blob */\n    async load(): Promise<Resource>\n    {\n        const response = await fetch(this.origin);\n        const blob = await response.blob();\n        const arrayBuffer = await blob.arrayBuffer();\n\n        this.data = new Uint32Array(arrayBuffer);\n        this.buffer = new ViewableBuffer(arrayBuffer);\n        this.loaded = true;\n\n        this.onBlobLoaded(arrayBuffer);\n        this.update();\n\n        return this;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { BlobResource } from './BlobResource';\n\nimport type { BaseTexture, GLTexture, Renderer } from '@pixi/core';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Used in parseKTX\n * @ignore\n */\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats\n * (via {@link PIXI.loadBasis}, {@link PIXI.loadKTX}, and {@link PIXI.loadDDS}):\n *\n * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.parseDDS}\n * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.parseKTX}.\n * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisParser}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n * @example\n * import { CompressedTextureResource, INTERNAL_FORMATS } from '@pixi/compressed-textures';\n * import { BaseTexture, Texture, ALPHA_MODES } from 'pixi.js';\n *\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new CompressedTextureResource('bunny.dxt5', {\n *     format: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *     width: 256,\n *     height: 256,\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new BaseTexture(compressedResource, { pmaMode: ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * BaseTexture.addToCache(baseTexture, 'bunny.dxt5');\n * Texture.addToCache(texture, 'bunny.dxt5');\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | Uint8Array | Uint32Array, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n    's3tc' | 's3tc_sRGB' | 'atc' |\n    'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n", "import { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL, INTERNAL_FORMATS } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n * ones to their correct value)\n * @ignore\n */\nenum DXGI_FORMAT\n    {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION\n    {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * Parses the DDS file header, generates base-textures, and puts them into the texture cache.\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n * @param arrayBuffer\n * @memberof PIXI\n */\nexport function parseDDS(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n{\n    const data = new Uint32Array(arrayBuffer);\n    const magicWord = data[0];\n\n    if (magicWord !== DDS_MAGIC)\n    {\n        throw new Error('Invalid DDS file magic word');\n    }\n\n    const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n    // DDS header fields\n    const height = header[DDS_FIELDS.HEIGHT];\n    const width = header[DDS_FIELDS.WIDTH];\n    const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n    // PIXEL_FORMAT fields\n    const pixelFormat = new Uint32Array(\n        arrayBuffer,\n        DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n        DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n    const formatFlags = pixelFormat[PF_FLAGS];\n\n    // File contains compressed texture(s)\n    if (formatFlags & DDPF_FOURCC)\n    {\n        const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n        // File contains one DXTn compressed texture\n        if (fourCC !== FOURCC_DX10)\n        {\n            const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n            const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n            const resource = new CompressedTextureResource(texData, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n            });\n\n            return [resource];\n        }\n\n        // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n        const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n        const dx10Header = new Uint32Array(\n            data.buffer,\n            dx10Offset,\n            DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n        const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n        const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n        const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n        // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n        const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n        if (internalFormat === undefined)\n        {\n            throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n        }\n        if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n        {\n            // FIXME: Anybody excited about cubemap compressed textures?\n            throw new Error('DDSParser does not support cubemap textures');\n        }\n        if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n        {\n            // FIXME: Anybody excited about 3D compressed textures?\n            throw new Error('DDSParser does not supported 3D texture data');\n        }\n\n        // Uint8Array buffers of image data, including all mipmap levels in each image\n        const imageBuffers = new Array<Uint8Array>();\n        const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n        if (arraySize === 1)\n        {\n            // No need bothering with the imageSize calculation!\n            imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n        }\n        else\n        {\n            // Calculate imageSize for each texture, and then locate each image's texture data\n\n            const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n            let imageSize = 0;\n            let levelWidth = width;\n            let levelHeight = height;\n\n            for (let i = 0; i < mipmapCount; i++)\n            {\n                const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                imageSize += levelSize;\n\n                levelWidth = levelWidth >>> 1;\n                levelHeight = levelHeight >>> 1;\n            }\n\n            let imageOffset = dataOffset;\n\n            // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n            for (let i = 0; i < arraySize; i++)\n            {\n                imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                imageOffset += imageSize;\n            }\n        }\n\n        // Uint8Array -> CompressedTextureResource, and we're done!\n        return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n            format: internalFormat,\n            width,\n            height,\n            levels: mipmapCount\n        }));\n    }\n    if (formatFlags & DDPF_RGB)\n    {\n        // FIXME: We might want to allow uncompressed *.dds files?\n        throw new Error('DDSParser does not support uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_YUV)\n    {\n        // FIXME: Does anybody need this feature?\n        throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n    }\n    if (formatFlags & DDPF_LUMINANCE)\n    {\n        // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n        throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n    }\n    if (formatFlags & DDPF_ALPHA)\n    {\n        // FIXME: I'm tired! See above =)\n        throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\n\n", "import { BufferResource, FORMATS, TYPES } from '@pixi/core';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { CompressedTextureResource } from '../resources';\n\nimport type { CompressedLevelBuffer } from '../resources';\n\n/**\n * The 12-byte KTX file identifier\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\nexport function parseKTX(url: string, arrayBuffer: ArrayBuffer, loadKeyValueData = false): {\n    compressed?: CompressedTextureResource[]\n    uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    kvData: Map<string, DataView> | null\n}\n{\n    const dataView = new DataView(arrayBuffer);\n\n    if (!validate(url, dataView))\n    {\n        return null;\n    }\n\n    const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n    const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n    // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n    const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n    const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n    const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n    const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n    const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n    const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n    const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n    const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n    const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n    // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n    // file contents must be endian-converted!\n    // TODO: Endianness conversion\n    // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n    if (pixelHeight === 0 || pixelDepth !== 1)\n    {\n        throw new Error('Only 2D textures are supported');\n    }\n    if (numberOfFaces !== 1)\n    {\n        throw new Error('CubeTextures are not supported by KTXLoader yet!');\n    }\n    if (numberOfArrayElements !== 1)\n    {\n        // TODO: Support splitting array-textures into multiple BaseTextures\n        throw new Error('WebGL does not support array textures');\n    }\n\n    // TODO: 8x4 blocks for 2bpp pvrtc\n    const blockWidth = 4;\n    const blockHeight = 4;\n\n    const alignedWidth = (pixelWidth + 3) & ~3;\n    const alignedHeight = (pixelHeight + 3) & ~3;\n    const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n    let imagePixels = pixelWidth * pixelHeight;\n\n    if (glType === 0)\n    {\n        // Align to 16 pixels (4x4 blocks)\n        imagePixels = alignedWidth * alignedHeight;\n    }\n\n    let imagePixelByteSize: number;\n\n    if (glType !== 0)\n    {\n        // Uncompressed texture format\n        if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n        }\n        else\n        {\n            imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n        }\n    }\n    else\n    {\n        imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n    }\n\n    if (imagePixelByteSize === undefined)\n    {\n        throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n    }\n\n    const kvData: Map<string, DataView> | null = loadKeyValueData\n        ? parseKvData(dataView, bytesOfKeyValueData, littleEndian)\n        : null;\n\n    const imageByteSize = imagePixels * imagePixelByteSize;\n    let mipByteSize = imageByteSize;\n    let mipWidth = pixelWidth;\n    let mipHeight = pixelHeight;\n    let alignedMipWidth = alignedWidth;\n    let alignedMipHeight = alignedHeight;\n    let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n    for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n    {\n        const imageSize = dataView.getUint32(imageOffset, littleEndian);\n        let elementOffset = imageOffset + 4;\n\n        for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n        {\n            // TODO: Maybe support 3D textures? :-)\n            // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n            let mips = imageBuffers[arrayElement];\n\n            if (!mips)\n            {\n                mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n            }\n\n            mips[mipmapLevel] = {\n                levelID: mipmapLevel,\n\n                // don't align mipWidth when texture not compressed! (glType not zero)\n                levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n            };\n            elementOffset += mipByteSize;\n        }\n\n        // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n        imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n        imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n        // Calculate mipWidth, mipHeight for _next_ iteration\n        mipWidth = (mipWidth >> 1) || 1;\n        mipHeight = (mipHeight >> 1) || 1;\n        alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n        alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        // Each mipmap level is 4-times smaller?\n        mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n    }\n\n    // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n    if (glType !== 0)\n    {\n        return {\n            uncompressed: imageBuffers.map((levelBuffers) =>\n            {\n                let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                let convertToInt = false;\n\n                if (glType === TYPES.FLOAT)\n                {\n                    buffer = new Float32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.UNSIGNED_INT)\n                {\n                    convertToInt = true;\n                    buffer = new Uint32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n                else if (glType === TYPES.INT)\n                {\n                    convertToInt = true;\n                    buffer = new Int32Array(\n                        levelBuffers[0].levelBuffer.buffer,\n                        levelBuffers[0].levelBuffer.byteOffset,\n                        levelBuffers[0].levelBuffer.byteLength / 4);\n                }\n\n                return {\n                    resource: new BufferResource(\n                        buffer,\n                        {\n                            width: levelBuffers[0].levelWidth,\n                            height: levelBuffers[0].levelHeight,\n                        }\n                    ),\n                    type: glType,\n                    format: convertToInt ? convertFormatToInteger(glFormat) : glFormat,\n                };\n            }),\n            kvData\n        };\n    }\n\n    return {\n        compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n            format: glInternalFormat,\n            width: pixelWidth,\n            height: pixelHeight,\n            levels: numberOfMipmapLevels,\n            levelBuffers,\n        })),\n        kvData\n    };\n}\n\n/**\n * Checks whether the arrayBuffer contains a valid *.ktx file.\n * @param url\n * @param dataView\n */\nfunction validate(url: string, dataView: DataView): boolean\n{\n    // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n    // of the data is not specified.\n    for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n    {\n        if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n        {\n            // #if _DEBUG\n            console.error(`${url} is not a valid *.ktx file!`);\n            // #endif\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction convertFormatToInteger(format: FORMATS)\n{\n    switch (format)\n    {\n        case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n        case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n        case FORMATS.RG: return FORMATS.RG_INTEGER;\n        case FORMATS.RED: return FORMATS.RED_INTEGER;\n        default: return format;\n    }\n}\n\nfunction parseKvData(dataView: DataView, bytesOfKeyValueData: number, littleEndian: boolean): Map<string, DataView>\n{\n    const kvData = new Map<string, DataView>();\n    let bytesIntoKeyValueData = 0;\n\n    while (bytesIntoKeyValueData < bytesOfKeyValueData)\n    {\n        const keyAndValueByteSize = dataView.getUint32(FILE_HEADER_SIZE + bytesIntoKeyValueData, littleEndian);\n        const keyAndValueByteOffset = FILE_HEADER_SIZE + bytesIntoKeyValueData + 4;\n        const valuePadding = 3 - ((keyAndValueByteSize + 3) % 4);\n\n        // Bounds check\n        if (keyAndValueByteSize === 0 || keyAndValueByteSize > bytesOfKeyValueData - bytesIntoKeyValueData)\n        {\n            console.error('KTXLoader: keyAndValueByteSize out of bounds');\n            break;\n        }\n\n        // Note: keyNulByte can't be 0 otherwise the key is an empty string.\n        let keyNulByte = 0;\n\n        for (; keyNulByte < keyAndValueByteSize; keyNulByte++)\n        {\n            if (dataView.getUint8(keyAndValueByteOffset + keyNulByte) === 0x00)\n            {\n                break;\n            }\n        }\n\n        if (keyNulByte === -1)\n        {\n            console.error('KTXLoader: Failed to find null byte terminating kvData key');\n            break;\n        }\n\n        const key = new TextDecoder().decode(\n            new Uint8Array(dataView.buffer, keyAndValueByteOffset, keyNulByte)\n        );\n        const value = new DataView(\n            dataView.buffer,\n            keyAndValueByteOffset + keyNulByte + 1,\n            keyAndValueByteSize - keyNulByte - 1,\n        );\n\n        kvData.set(key, value);\n\n        // 4 = the keyAndValueByteSize field itself\n        // keyAndValueByteSize = the bytes taken by the key and value\n        // valuePadding = extra padding to align with 4 bytes\n        bytesIntoKeyValueData += 4 + keyAndValueByteSize + valuePadding;\n    }\n\n    return kvData;\n}\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseDDS } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Load our DDS textures! */\nexport const loadDDS: LoaderParser = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.dds');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const resources = parseDDS(arrayBuffer);\n\n        const textures = resources.map((resource) =>\n        {\n            const base = new BaseTexture(resource, {\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                resolution: utils.getResolutionOfUrl(url),\n                ...asset.data,\n            });\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadDDS);\n", "import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseKTX } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const base = new BaseTexture(resource, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n", "import { extensions, ExtensionType, settings } from '@pixi/core';\n\nimport type { ResolveAsset, ResolveURLParser } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): ResolveAsset =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: value.split('.').pop(),\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n", "import { extensions, ExtensionType, MSAA_QUALITY, Rectangle, RenderTexture, utils } from '@pixi/core';\n\nimport type { ExtensionMetadata, ICanvas, ISystem, Renderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\nexport interface IExtract\n{\n    image(target: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<HTMLImageElement>;\n    base64(target: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<string>;\n    canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas;\n    pixels(target: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array | Uint8ClampedArray;\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements ISystem, IExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererSystem,\n    };\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - HTML Image of the target\n     */\n    public async image(target: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public async base64(target: DisplayObject | RenderTexture, format?: string, quality?: number): Promise<string>\n    {\n        const canvas = this.canvas(target);\n\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return await new Promise<string>((resolve) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas\n    {\n        const { pixels, width, height, flipY } = this._rawPixels(target, frame);\n\n        let canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n\n        // Add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(pixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // Flipping pixels\n        if (flipY)\n        {\n            const target = new utils.CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // We can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        // Send the canvas back\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array\n    {\n        const { pixels } = this._rawPixels(target, frame);\n\n        Extract.arrayPostDivide(pixels, pixels);\n\n        return pixels;\n    }\n\n    private _rawPixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): {\n        pixels: Uint8Array, width: number, height: number, flipY: boolean,\n    }\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                const multisample = renderer.context.webGLVersion >= 2 ? renderer.multisample : MSAA_QUALITY.NONE;\n\n                renderTexture = this.renderer.generateTexture(target, { multisample });\n\n                if (multisample !== MSAA_QUALITY.NONE)\n                {\n                    // Resolve the multisampled texture to a non-multisampled texture\n                    const resolvedTexture = RenderTexture.create({\n                        width: renderTexture.width,\n                        height: renderTexture.height,\n                    });\n\n                    renderer.framebuffer.bind(renderTexture.framebuffer);\n                    renderer.framebuffer.blit(resolvedTexture.framebuffer);\n                    renderer.framebuffer.bind(null);\n\n                    renderTexture.destroy(true);\n                    renderTexture = resolvedTexture;\n                }\n\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            flipY = true;\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // Read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        return { pixels, width, height, flipY };\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n\nextensions.add(Extract);\n", "// for type only\nimport { SHAPES } from '@pixi/core';\n\nimport type { Circle, Ellipse, RoundedRectangle } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildCircle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // need to convert points to a nice regular data\n        const points = graphicsData.points;\n\n        let x;\n        let y;\n        let dx;\n        let dy;\n        let rx;\n        let ry;\n\n        if (graphicsData.type === SHAPES.CIRC)\n        {\n            const circle = graphicsData.shape as Circle;\n\n            x = circle.x;\n            y = circle.y;\n            rx = ry = circle.radius;\n            dx = dy = 0;\n        }\n        else if (graphicsData.type === SHAPES.ELIP)\n        {\n            const ellipse = graphicsData.shape as Ellipse;\n\n            x = ellipse.x;\n            y = ellipse.y;\n            rx = ellipse.width;\n            ry = ellipse.height;\n            dx = dy = 0;\n        }\n        else\n        {\n            const roundedRect = graphicsData.shape as RoundedRectangle;\n            const halfWidth = roundedRect.width / 2;\n            const halfHeight = roundedRect.height / 2;\n\n            x = roundedRect.x + halfWidth;\n            y = roundedRect.y + halfHeight;\n            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n            dx = halfWidth - rx;\n            dy = halfHeight - ry;\n        }\n\n        if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0))\n        {\n            points.length = 0;\n\n            return;\n        }\n\n        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029\n        const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n        const m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);\n\n        points.length = m;\n\n        if (m === 0)\n        {\n            return;\n        }\n\n        if (n === 0)\n        {\n            points.length = 8;\n            points[0] = points[6] = x + dx;\n            points[1] = points[3] = y + dy;\n            points[2] = points[4] = x - dx;\n            points[5] = points[7] = y - dy;\n\n            return;\n        }\n\n        let j1 = 0;\n        let j2 = (n * 4) + (dx ? 2 : 0) + 2;\n        let j3 = j2;\n        let j4 = m;\n\n        {\n            const x0 = dx + rx;\n            const y0 = dy;\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n\n            if (dy)\n            {\n                const y2 = y - y0;\n\n                points[j3++] = x2;\n                points[j3++] = y2;\n                points[--j4] = y2;\n                points[--j4] = x1;\n            }\n        }\n\n        for (let i = 1; i < n; i++)\n        {\n            const a = Math.PI / 2 * (i / n);\n            const x0 = dx + (Math.cos(a) * rx);\n            const y0 = dy + (Math.sin(a) * ry);\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        {\n            const x0 = dx;\n            const y0 = dy + ry;\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j4] = y2;\n            points[--j4] = x1;\n\n            if (dx)\n            {\n                points[j1++] = x2;\n                points[j1++] = y1;\n                points[--j4] = y2;\n                points[--j4] = x2;\n            }\n        }\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        let vertPos = verts.length / 2;\n        const center = vertPos;\n\n        let x;\n        let y;\n\n        if (graphicsData.type !== SHAPES.RREC)\n        {\n            const circle = graphicsData.shape as Circle;\n\n            x = circle.x;\n            y = circle.y;\n        }\n        else\n        {\n            const roundedRect = graphicsData.shape as RoundedRectangle;\n\n            x = roundedRect.x + (roundedRect.width / 2);\n            y = roundedRect.y + (roundedRect.height / 2);\n        }\n\n        const matrix = graphicsData.matrix;\n\n        // Push center (special point)\n        verts.push(\n            graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x,\n            graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);\n\n        vertPos++;\n\n        verts.push(points[0], points[1]);\n\n        for (let i = 2; i < points.length; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n\n        indices.push(center + 1, center, vertPos);\n    },\n};\n", "import { utils } from '@pixi/core';\n\nimport type { Polygon } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\nfunction fixOrientation(points: number[], hole = false)\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if ((!hole && area > 0) || (hole && area <= 0))\n    {\n        const n = m / 2;\n\n        for (let i = n + (n % 2); i < m; i += 2)\n        {\n            const i1 = m - i - 2;\n            const i2 = m - i - 1;\n            const i3 = i;\n            const i4 = i + 1;\n\n            [points[i1], points[i3]] = [points[i3], points[i1]];\n            [points[i2], points[i4]] = [points[i4], points[i2]];\n        }\n    }\n}\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = (graphicsData.shape as Polygon).points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            fixOrientation(points, false);\n\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                fixOrientation(hole.points, true);\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = utils.earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n", "import type { Rectangle } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return;\n        }\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n", "// for type only\nimport { buildCircle } from './buildCircle';\n\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRoundedRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        buildCircle.build(graphicsData);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        buildCircle.triangulate(graphicsData, graphicsGeometry);\n    },\n};\n", "/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\nexport enum LINE_JOIN\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    MITER = 'miter',\n    BEVEL = 'bevel',\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @name LINE_CAP\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n * @property {string} ROUND - 'round': add semicircle at ends\n * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n */\nexport enum LINE_CAP\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    BUTT = 'butt',\n    ROUND = 'round',\n    SQUARE = 'square'\n}\n\n/** @deprecated */\nexport interface IGraphicsCurvesSettings\n{\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * @private\n */\nexport const curves = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n\n/**\n * @static\n * @readonly\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @deprecated since 7.1.0\n * @see PIXI.Graphics.curves\n */\nexport const GRAPHICS_CURVES = curves;\n", "import { PI_2 } from '@pixi/core';\nimport { curves } from '../const';\n\ninterface IArcLikeShape\n{\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves.\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n     * @private\n     * @param x1 - The x-coordinate of the first control point of the arc\n     * @param y1 - The y-coordinate of the first control point of the arc\n     * @param x2 - The x-coordinate of the second control point of the arc\n     * @param y2 - The y-coordinate of the second control point of the arc\n     * @param radius - The radius of the arc\n     * @param points - Collection of points to add to\n     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @private\n     * @param _startX - Start x location of arc\n     * @param _startY - Start y location of arc\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param _anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = curves._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n", "import type { FillStyle } from '../styles/FillStyle';\nimport type { LineStyle } from '../styles/LineStyle';\n\n/**\n * A structure to hold interim batch objects for Graphics.\n * @memberof PIXI.graphicsUtils\n */\nexport class BatchPart\n{\n    public style: LineStyle | FillStyle;\n    public start: number;\n    public size: number;\n    public attribStart: number;\n    public attribSize: number;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Begin batch part.\n     * @param style\n     * @param startIndex\n     * @param attribStart\n     */\n    public begin(style: LineStyle | FillStyle, startIndex: number, attribStart: number): void\n    {\n        this.reset();\n        this.style = style;\n        this.start = startIndex;\n        this.attribStart = attribStart;\n    }\n\n    /**\n     * End batch part.\n     * @param endIndex\n     * @param endAttrib\n     */\n    public end(endIndex: number, endAttrib: number): void\n    {\n        this.attribSize = endAttrib - this.attribStart;\n        this.size = endIndex - this.start;\n    }\n\n    public reset(): void\n    {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    }\n}\n", "import { curves } from '../const';\n\n/**\n * Utilities for bezier curves\n * @private\n */\nexport class BezierUtils\n{\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     * @private\n     * @param fromX - Starting point x\n     * @param fromY - Starting point y\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param cpX2 - Second Control point x\n     * @param cpY2 - Second Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns - Length of bezier curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number): number\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     * @ignore\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param cpX2 - Second Control point x\n     * @param cpY2 - Second Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @param points - Path array to push points into\n     */\n    static curveTo(\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number,\n        points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = curves._segmentsCount(\n            BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        );\n\n        let dt = 0;\n        let dt2 = 0;\n        let dt3 = 0;\n        let t2 = 0;\n        let t3 = 0;\n\n        points.push(fromX, fromY);\n\n        for (let i = 1, j = 0; i <= n; ++i)\n        {\n            j = i / n;\n\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n\n            t2 = j * j;\n            t3 = t2 * j;\n\n            points.push(\n                (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n                (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n            );\n        }\n    }\n}\n", "import { Point, SHAPES } from '@pixi/core';\nimport { curves, LINE_CAP, LINE_JOIN } from '../const';\n\nimport type { Polygon } from '@pixi/core';\nimport type { GraphicsData } from '../GraphicsData';\nimport type { GraphicsGeometry } from '../GraphicsGeometry';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {number} innerWeight - Weight of inner points\n * @param {number} outerWeight - Weight of outer points\n * @param {boolean} clockwise - Whether the cap is drawn clockwise\n * @param {Array<number>} verts - vertex buffer\n * @returns {number} - no. of vertices pushed\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(\n        eix, eiy,\n        eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: Array<number>,\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n    {\n        const r1x = cx - nxtPx;\n        const r1y = cy - nxtPy;\n\n        if (r1x === 0)\n        {\n            if (r1y > 0)\n            {\n                angleDiff = -angleDiff;\n            }\n        }\n        else if (r1x >= -curves.epsilon)\n        {\n            angleDiff = -angleDiff;\n        }\n    }*/\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(\n            cx, cy,\n            sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(\n                cx, cy,\n                cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(\n            cx, cy,\n            ex, ey);\n    }\n    else\n    {\n        verts.push(\n            sx, sy,\n            cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(\n                cx + ((Math.sin(angle) * radius)), cy + ((Math.cos(angle) * radius)),\n                cx, cy);\n        }\n\n        verts.push(\n            ex, ey,\n            cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    const shape = graphicsData.shape as Polygon;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpx = -(y0 - y1);\n    let perpy = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x0 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpx * innerWeight),\n                y0 - (perpy * innerWeight),\n                x0 + (perpx * outerWeight),\n                y0 + (perpy * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpx * innerWeight), y0 - (perpy * innerWeight),\n        x0 + (perpx * outerWeight), y0 + (perpy * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpx = -(y0 - y1);\n        perpy = x0 - x1;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */\n        const dot = (dx0 * dx1) + (dy0 * dy1);\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly parallel? */\n        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */\n        if (Math.abs(cross) < 0.001 * Math.abs(dot))\n        {\n            verts.push(\n                x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n            /* 180 degree corner? */\n            if (dot >= 0)\n            {\n                if (style.join === LINE_JOIN.ROUND)\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false) + 4;\n                }\n                else\n                {\n                    indexCount += 2;\n                }\n\n                verts.push(\n                    x1 - (perp1x * outerWeight), y1 - (perp1y * outerWeight),\n                    x1 + (perp1x * innerWeight), y1 + (perp1y * innerWeight));\n            }\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n        const c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pdist <= smallerInsideDiagonalSq;\n\n        let join = style.join;\n\n        if (join === LINE_JOIN.MITER && pdist / widthSquared > miterLimitSquared)\n        {\n            join = LINE_JOIN.BEVEL;\n        }\n\n        if (insideMiterOk)\n        {\n            switch (join)\n            {\n                case LINE_JOIN.MITER:\n                {\n                    verts.push(\n                        imx, imy,\n                        omx, omy);\n                    break;\n                }\n                case LINE_JOIN.BEVEL:\n                {\n                    if (clockwise) /* rotating at inner angle */\n                    {\n                        verts.push(\n                            imx, imy, // inner miter point\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight), // first segment's outer vertex\n                            imx, imy, // inner miter point\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                    }\n                    else /* rotating at outer angle */\n                    {\n                        verts.push(\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), // first segment's inner vertex\n                            omx, omy, // outer miter point\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), // second segment's outer vertex\n                            omx, omy); // outer miter point\n                    }\n\n                    indexCount += 2;\n                    break;\n                }\n                case LINE_JOIN.ROUND:\n                {\n                    if (clockwise) /* arc is outside */\n                    {\n                        verts.push(\n                            imx, imy,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n                        indexCount += round(\n                            x1, y1,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                            verts, true\n                        ) + 4;\n\n                        verts.push(\n                            imx, imy,\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                    }\n                    else /* arc is inside */\n                    {\n                        verts.push(\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            omx, omy);\n\n                        indexCount += round(\n                            x1, y1,\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            verts, false\n                        ) + 4;\n\n                        verts.push(\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            omx, omy);\n                    }\n                    break;\n                }\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(\n                x1 - (perpx * innerWeight), y1 - (perpy * innerWeight), // first segment's inner vertex\n                x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n            switch (join)\n            {\n                case LINE_JOIN.MITER:\n                {\n                    if (clockwise)\n                    {\n                        verts.push(\n                            omx, omy, // inner miter point\n                            omx, omy); // inner miter point\n                    }\n                    else\n                    {\n                        verts.push(\n                            imx, imy, // outer miter point\n                            imx, imy); // outer miter point\n                    }\n                    indexCount += 2;\n                    break;\n                }\n                case LINE_JOIN.ROUND:\n                {\n                    if (clockwise) /* arc is outside */\n                    {\n                        indexCount += round(\n                            x1, y1,\n                            x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                            x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                            verts, true\n                        ) + 2;\n                    }\n                    else /* arc is inside */\n                    {\n                        indexCount += round(\n                            x1, y1,\n                            x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                            x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                            verts, false\n                        ) + 2;\n                    }\n                    break;\n                }\n            }\n            verts.push(\n                x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight), // second segment's inner vertex\n                x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(\n        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x1 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    const indices = graphicsGeometry.indices;\n    const eps2 = curves.epsilon * curves.epsilon;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    let i = 0;\n\n    const shape = graphicsData.shape as Polygon;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport function buildLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n", "import { curves } from '../const';\n\n/**\n * Utilities for quadratic curves.\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     * @private\n     * @param fromX - x-coordinate of curve start point\n     * @param fromY - y-coordinate of curve start point\n     * @param cpX - x-coordinate of curve control point\n     * @param cpY - y-coordinate of curve control point\n     * @param toX - x-coordinate of curve end point\n     * @param toY - y-coordinate of curve end point\n     * @returns - Length of quadratic curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        toX: number, toY: number): number\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @private\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @param points - Points to add segments to.\n     */\n    static curveTo(cpX: number, cpY: number, toX: number, toY: number, points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = curves._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n", "/**\n * Generalized convenience utilities for Graphics.\n * @namespace graphicsUtils\n * @memberof PIXI\n */\n\n// for type only\nimport { SHAPES } from '@pixi/core';\nimport { buildCircle } from './buildCircle';\nimport { buildPoly } from './buildPoly';\nimport { buildRectangle } from './buildRectangle';\nimport { buildRoundedRectangle } from './buildRoundedRectangle';\n\nimport type { BatchDrawCall } from '@pixi/core';\nimport type { BatchPart } from './BatchPart';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\nexport * from './ArcUtils';\nexport * from './BatchPart';\nexport * from './BezierUtils';\nexport * from './buildCircle';\nexport * from './buildLine';\nexport * from './buildPoly';\nexport * from './buildRectangle';\nexport * from './buildRoundedRectangle';\nexport * from './QuadraticUtils';\n\n/**\n * Map of fill commands for each shape type.\n * @memberof PIXI.graphicsUtils\n * @member {object} FILL_COMMANDS\n */\nexport const FILL_COMMANDS: Record<SHAPES, IShapeBuildCommand> = {\n    [SHAPES.POLY]: buildPoly,\n    [SHAPES.CIRC]: buildCircle,\n    [SHAPES.ELIP]: buildCircle,\n    [SHAPES.RECT]: buildRectangle,\n    [SHAPES.RREC]: buildRoundedRectangle,\n};\n\n/**\n * Batch pool, stores unused batches for preventing allocations.\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n */\nexport const BATCH_POOL: Array<BatchPart> = [];\n\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n */\nexport const DRAW_CALL_POOL: Array<BatchDrawCall> = [];\n", "import type { IShape, Matrix, SHAPES } from '@pixi/core';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/**\n * A class to contain data useful for Graphics objects\n * @memberof PIXI\n */\nexport class GraphicsData\n{\n    /**\n     * The shape object to draw.\n     * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n     */\n    shape: IShape;\n\n    /** The style of the line. */\n    lineStyle: LineStyle;\n\n    /** The style of the fill. */\n    fillStyle: FillStyle;\n\n    /** The transform matrix. */\n    matrix: Matrix;\n\n    /** The type of the shape, see the Const.Shapes file for all the existing types, */\n    type: SHAPES;\n\n    /** The collection of points. */\n    points: number[] = [];\n\n    /** The collection of holes. */\n\n    holes: Array<GraphicsData> = [];\n\n    /**\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param fillStyle - the width of the line to draw\n     * @param lineStyle - the color of the line to draw\n     * @param matrix - Transform matrix\n     */\n    constructor(shape: IShape, fillStyle: FillStyle = null, lineStyle: LineStyle = null, matrix: Matrix = null)\n    {\n        this.shape = shape;\n        this.lineStyle = lineStyle;\n        this.fillStyle = fillStyle;\n        this.matrix = matrix;\n        this.type = shape.type;\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     * @returns - Cloned GraphicsData object\n     */\n    public clone(): GraphicsData\n    {\n        return new GraphicsData(\n            this.shape,\n            this.fillStyle,\n            this.lineStyle,\n            this.matrix\n        );\n    }\n\n    /** Destroys the Graphics data. */\n    public destroy(): void\n    {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    }\n}\n", "import {\n    BaseTexture,\n    BatchDrawCall,\n    BatchGeometry,\n    BatchTextureArray,\n    DRAW_MODES,\n    Point,\n    utils,\n    WRAP_MODES,\n} from '@pixi/core';\nimport { Bounds } from '@pixi/display';\nimport { GraphicsData } from './GraphicsData';\nimport {\n    BATCH_POOL,\n    BatchPart,\n    buildLine,\n    buildPoly,\n    DRAW_CALL_POOL,\n    FILL_COMMANDS,\n} from './utils';\n\nimport type { Circle, Ellipse, IPointData, Matrix, Polygon, Rectangle, RoundedRectangle, Texture } from '@pixi/core';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/*\n * Complex shape type\n * @todo Move to Math shapes\n */\ntype IShape = Circle | Ellipse | Polygon | Rectangle | RoundedRectangle;\n\nconst tmpPoint = new Point();\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n * @memberof PIXI\n */\nexport class GraphicsGeometry extends BatchGeometry\n{\n    /** The maximum number of points to consider an object \"batchable\", able to be batched by the renderer's batch system. */\n    public static BATCHABLE_SIZE = 100;\n\n    /** Minimal distance between points that are considered different. Affects line tesselation. */\n    public closePointEps = 1e-4;\n\n    /** Padding to add to the bounds. */\n    public boundsPadding = 0;\n\n    uvsFloat32: Float32Array = null;\n    indicesUint16: Uint16Array | Uint32Array = null;\n    batchable = false;\n\n    /** An array of points to draw, 2 numbers per point */\n    points: number[] = [];\n\n    /** The collection of colors */\n    colors: number[] = [];\n\n    /** The UVs collection */\n    uvs: number[] = [];\n\n    /** The indices of the vertices */\n    indices: number[] = [];\n\n    /** Reference to the texture IDs. */\n    textureIds: number[] = [];\n\n    /**\n     * The collection of drawn shapes.\n     * @member {PIXI.GraphicsData[]}\n     */\n    graphicsData: Array<GraphicsData> = [];\n\n    /**\n     * List of current draw calls drived from the batches.\n     * @member {PIXI.BatchDrawCall[]}\n     */\n    drawCalls: Array<BatchDrawCall> = [];\n\n    /** Batches need to regenerated if the geometry is updated. */\n    batchDirty = -1;\n\n    /**\n     * Intermediate abstract format sent to batch system.\n     * Can be converted to drawCalls or to batchable objects.\n     * @member {PIXI.graphicsUtils.BatchPart[]}\n     */\n    batches: Array<BatchPart> = [];\n\n    /** Used to detect if the graphics object has changed. */\n    protected dirty = 0;\n\n    /** Used to check if the cache is dirty. */\n    protected cacheDirty = -1;\n\n    /** Used to detect if we cleared the graphicsData. */\n    protected clearDirty = 0;\n\n    /** Index of the last batched shape in the stack of calls. */\n    protected shapeIndex = 0;\n\n    /** Cached bounds. */\n    protected _bounds: Bounds = new Bounds();\n\n    /** The bounds dirty flag. */\n    protected boundsDirty = -1;\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor()\n    {\n        super();\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * Since 6.5.0, bounds of the graphics geometry are calculated based on the vertices of generated geometry.\n     * Since shapes or strokes with full transparency (`alpha: 0`) will not generate geometry, they are not considered\n     * when calculating bounds for the graphics geometry. See PR [#8343]{@link https://github.com/pixijs/pixijs/pull/8343}\n     * and issue [#8623]{@link https://github.com/pixijs/pixijs/pull/8623}.\n     * @readonly\n     */\n    public get bounds(): Bounds\n    {\n        this.updateBatches();\n\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /** Call if you changed graphicsData manually. Empties all batch buffers. */\n    protected invalidate(): void\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchPart = this.batches[i];\n\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n\n        this.batches.length = 0;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     * @returns - This GraphicsGeometry object. Good for chaining method calls\n     */\n    public clear(): GraphicsGeometry\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param fillStyle - Defines style of the fill.\n     * @param lineStyle - Defines style of the lines.\n     * @param matrix - Transform applied to the points of the shape.\n     * @returns - Returns geometry for chaining.\n     */\n    public drawShape(\n        shape: IShape,\n        fillStyle: FillStyle = null,\n        lineStyle: LineStyle = null,\n        matrix: Matrix = null): GraphicsGeometry\n    {\n        const data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param matrix - Transform applied to the points of the shape.\n     * @returns - Returns geometry for chaining.\n     */\n    public drawHole(shape: IShape, matrix: Matrix = null): GraphicsGeometry\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new GraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /** Destroys the GraphicsGeometry object. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     * @param point - Point to check if it's contained.\n     * @returns {boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     */\n    updateBatches(): void\n    {\n        if (!this.graphicsData.length)\n        {\n            this.batchable = true;\n\n            return;\n        }\n\n        if (!this.validateBatching())\n        {\n            return;\n        }\n\n        this.cacheDirty = this.dirty;\n\n        const uvs = this.uvs;\n        const graphicsData = this.graphicsData;\n\n        let batchPart: BatchPart = null;\n\n        let currentStyle = null;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n\n        for (let i = this.shapeIndex; i < graphicsData.length; i++)\n        {\n            this.shapeIndex++;\n\n            const data = graphicsData[i];\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n            const command = FILL_COMMANDS[data.type];\n\n            // build out the shapes points..\n            command.build(data);\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            if (fillStyle.visible || lineStyle.visible)\n            {\n                this.processHoles(data.holes);\n            }\n\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n                const index = this.indices.length;\n                const attribIndex = this.points.length / 2;\n\n                nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                if (j === 0)\n                {\n                    this.processFill(data);\n                }\n                else\n                {\n                    this.processLine(data);\n                }\n\n                const size = (this.points.length / 2) - attribIndex;\n\n                if (size === 0) continue;\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style))\n                {\n                    batchPart.end(index, attribIndex);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, index, attribIndex);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n\n                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n            }\n        }\n\n        const index = this.indices.length;\n        const attrib = this.points.length / 2;\n\n        if (batchPart)\n        {\n            batchPart.end(index, attrib);\n        }\n\n        if (this.batches.length === 0)\n        {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        const need32 = attrib > 0xffff;\n\n        // prevent allocation when length is same as buffer\n        if (this.indicesUint16 && this.indices.length === this.indicesUint16.length\n            && need32 === (this.indicesUint16.BYTES_PER_ELEMENT > 2))\n        {\n            this.indicesUint16.set(this.indices);\n        }\n        else\n        {\n            this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);\n        }\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.packBatches();\n        }\n        else\n        {\n            this.buildDrawCalls();\n        }\n    }\n\n    /**\n     * Affinity check\n     * @param styleA\n     * @param styleB\n     */\n    protected _compareStyles(styleA: FillStyle | LineStyle, styleB: FillStyle | LineStyle): boolean\n    {\n        if (!styleA || !styleB)\n        {\n            return false;\n        }\n\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture)\n        {\n            return false;\n        }\n\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha)\n        {\n            return false;\n        }\n\n        if (!!(styleA as LineStyle).native !== !!(styleB as LineStyle).native)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /** Test geometry for batching process. */\n    protected validateBatching(): boolean\n    {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n        {\n            return false;\n        }\n\n        for (let i = 0, l = this.graphicsData.length; i < l; i++)\n        {\n            const data = this.graphicsData[i];\n            const fill = data.fillStyle;\n            const line = data.lineStyle;\n\n            if (fill && !fill.texture.baseTexture.valid) return false;\n            if (line && !line.texture.baseTexture.valid) return false;\n        }\n\n        return true;\n    }\n\n    /** Offset the indices so that it works with the batcher. */\n    protected packBatches(): void\n    {\n        this.batchDirty++;\n        this.uvsFloat32 = new Float32Array(this.uvs);\n\n        const batches = this.batches;\n\n        for (let i = 0, l = batches.length; i < l; i++)\n        {\n            const batch = batches[i];\n\n            for (let j = 0; j < batch.size; j++)\n            {\n                const index = batch.start + j;\n\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    }\n\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     */\n    protected isBatchable(): boolean\n    {\n        // prevent heavy mesh batching\n        if (this.points.length > 0xffff * 2)\n        {\n            return false;\n        }\n\n        const batches = this.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            if ((batches[i].style as LineStyle).native)\n            {\n                return false;\n            }\n        }\n\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /** Converts intermediate batches data to drawCalls. */\n    protected buildDrawCalls(): void\n    {\n        let TICK = ++BaseTexture._globalBatch;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        let currentGroup: BatchDrawCall = DRAW_CALL_POOL.pop();\n\n        if (!currentGroup)\n        {\n            currentGroup = new BatchDrawCall();\n            currentGroup.texArray = new BatchTextureArray();\n        }\n        currentGroup.texArray.count = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = DRAW_MODES.TRIANGLES;\n\n        let textureCount = 0;\n        let currentTexture = null;\n        let textureId = 0;\n        let native = false;\n        let drawMode = DRAW_MODES.TRIANGLES;\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        // TODO - this can be simplified\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const data = this.batches[i];\n\n            // TODO add some full on MAX_TEXTURE CODE..\n            const maxTextures = 8;\n\n            // Forced cast for checking `native` without errors\n            const style = data.style as LineStyle;\n\n            const nextTexture = style.texture.baseTexture;\n\n            if (native !== !!style.native)\n            {\n                native = !!style.native;\n                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = maxTextures;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === maxTextures)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        if (currentGroup.size > 0)\n                        {\n                            currentGroup = DRAW_CALL_POOL.pop();\n                            if (!currentGroup)\n                            {\n                                currentGroup = new BatchDrawCall();\n                                currentGroup.texArray = new BatchTextureArray();\n                            }\n                            this.drawCalls.push(currentGroup);\n                        }\n\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.texArray.count = 0;\n                        currentGroup.type = drawMode;\n                    }\n\n                    // TODO add this to the render part..\n                    // Hack! Because texture has protected `touched`\n                    nextTexture.touched = 1;// touch;\n\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._batchLocation = textureCount;\n                    nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                    currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            currentGroup.size += data.size;\n            index += data.size;\n\n            textureId = nextTexture._batchLocation;\n\n            this.addColors(colors, style.color, style.alpha, data.attribSize, data.attribStart);\n            this.addTextureIds(textureIds, textureId, data.attribSize, data.attribStart);\n        }\n\n        BaseTexture._globalBatch = TICK;\n\n        // upload..\n        // merge for now!\n        this.packAttributes();\n    }\n\n    /** Packs attributes to single buffer. */\n    protected packAttributes(): void\n    {\n        const verts = this.points;\n        const uvs = this.uvs;\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        const glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        const f32 = new Float32Array(glPoints);\n        const u32 = new Uint32Array(glPoints);\n\n        let p = 0;\n\n        for (let i = 0; i < verts.length / 2; i++)\n        {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n\n            u32[p++] = colors[i];\n\n            f32[p++] = textureIds[i];\n        }\n\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    }\n\n    /**\n     * Process fill part of Graphics.\n     * @param data\n     */\n    protected processFill(data: GraphicsData): void\n    {\n        if (data.holes.length)\n        {\n            buildPoly.triangulate(data, this);\n        }\n        else\n        {\n            const command = FILL_COMMANDS[data.type];\n\n            command.triangulate(data, this);\n        }\n    }\n\n    /**\n     * Process line part of Graphics.\n     * @param data\n     */\n    protected processLine(data: GraphicsData): void\n    {\n        buildLine(data, this);\n\n        for (let i = 0; i < data.holes.length; i++)\n        {\n            buildLine(data.holes[i], this);\n        }\n    }\n\n    /**\n     * Process the holes data.\n     * @param holes\n     */\n    protected processHoles(holes: Array<GraphicsData>): void\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n            const command = FILL_COMMANDS[hole.type];\n\n            command.build(hole);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /** Update the local bounds of the object. Expensive to use performance-wise. */\n    protected calculateBounds(): void\n    {\n        const bounds = this._bounds;\n\n        bounds.clear();\n        bounds.addVertexData((this.points as any), 0, this.points.length);\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    }\n\n    /**\n     * Transform points using matrix.\n     * @param points - Points to transform\n     * @param matrix - Transform matrix\n     */\n    protected transformPoints(points: Array<number>, matrix: Matrix): void\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n\n    /**\n     * Add colors.\n     * @param colors - List of colors to add to\n     * @param color - Color to add\n     * @param alpha - Alpha to use\n     * @param size - Number of colors to add\n     * @param offset\n     */\n    protected addColors(\n        colors: Array<number>,\n        color: number,\n        alpha: number,\n        size: number,\n        offset = 0): void\n    {\n        // TODO use the premultiply bits Ivan added\n        const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n        const rgba = utils.premultiplyTint(rgb, alpha);\n\n        colors.length = Math.max(colors.length, offset + size);\n\n        for (let i = 0; i < size; i++)\n        {\n            colors[offset + i] = rgba;\n        }\n    }\n\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     * @param textureIds\n     * @param id\n     * @param size\n     * @param offset\n     */\n    protected addTextureIds(\n        textureIds: Array<number>,\n        id: number,\n        size: number,\n        offset = 0): void\n    {\n        textureIds.length = Math.max(textureIds.length, offset + size);\n\n        for (let i = 0; i < size; i++)\n        {\n            textureIds[offset + i] = id;\n        }\n    }\n\n    /**\n     * Generates the UVs for a shape.\n     * @param verts - Vertices\n     * @param uvs - UVs\n     * @param texture - Reference to Texture\n     * @param start - Index buffer start index.\n     * @param size - The size/length for index buffer.\n     * @param matrix - Optional transform for all points.\n     */\n    protected addUvs(\n        verts: Array<number>,\n        uvs: Array<number>,\n        texture: Texture,\n        start: number,\n        size: number,\n        matrix: Matrix = null): void\n    {\n        let index = 0;\n        const uvsStart = uvs.length;\n        const frame = texture.frame;\n\n        while (index < size)\n        {\n            let x = verts[(start + index) * 2];\n            let y = verts[((start + index) * 2) + 1];\n\n            if (matrix)\n            {\n                const nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n\n            index++;\n\n            uvs.push(x / frame.width, y / frame.height);\n        }\n\n        const baseTexture = texture.baseTexture;\n\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height)\n        {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    }\n\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     * @param uvs - array\n     * @param texture - region\n     * @param start - starting index for uvs\n     * @param size - how many points to adjust\n     */\n    protected adjustUvs(uvs: Array<number>, texture: Texture, start: number, size: number): void\n    {\n        const baseTexture = texture.baseTexture;\n        const eps = 1e-6;\n        const finish = start + (size * 2);\n        const frame = texture.frame;\n        const scaleX = frame.width / baseTexture.width;\n        const scaleY = frame.height / baseTexture.height;\n        let offsetX = frame.x / frame.width;\n        let offsetY = frame.y / frame.height;\n        let minX = Math.floor(uvs[start] + eps);\n        let minY = Math.floor(uvs[start + 1] + eps);\n\n        for (let i = start + 2; i < finish; i += 2)\n        {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (let i = start; i < finish; i += 2)\n        {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    }\n}\n", "import { Texture } from '@pixi/core';\n\nimport type { Matrix } from '@pixi/core';\n\n/**\n * Fill style object for Graphics.\n * @memberof PIXI\n */\nexport class FillStyle\n{\n    /**\n     * The hex color value used when coloring the Graphics object.\n     * @default 0xFFFFFF\n     */\n    public color = 0xFFFFFF;\n\n    /** The alpha value used when filling the Graphics object. */\n    public alpha = 1.0;\n\n    /**\n     * The texture to be used for the fill.\n     * @default 0\n     */\n    public texture: Texture = Texture.WHITE;\n\n    /**\n     * The transform applied to the texture.\n     * @default null\n     */\n    public matrix: Matrix = null;\n\n    /** If the current fill is visible. */\n    public visible = false;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /** Clones the object */\n    public clone(): FillStyle\n    {\n        const obj = new FillStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n\n        return obj;\n    }\n\n    /** Reset */\n    public reset(): void\n    {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n        this.texture = Texture.WHITE;\n        this.matrix = null;\n        this.visible = false;\n    }\n\n    /** Destroy and don't use after this. */\n    public destroy(): void\n    {\n        this.texture = null;\n        this.matrix = null;\n    }\n}\n", "import { LINE_CAP, LINE_JOIN } from '../const';\nimport { FillStyle } from './FillStyle';\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n */\nexport class LineStyle extends FillStyle\n{\n    /** The width (thickness) of any lines drawn. */\n    public width = 0;\n\n    /** The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner). WebGL only. */\n    public alignment = 0.5;\n\n    /** If true the lines will be draw using LINES instead of TRIANGLE_STRIP. */\n    public native = false;\n\n    /**\n     * Line cap style.\n     * @member {PIXI.LINE_CAP}\n     * @default PIXI.LINE_CAP.BUTT\n     */\n    public cap = LINE_CAP.BUTT;\n\n    /**\n     * Line join style.\n     * @member {PIXI.LINE_JOIN}\n     * @default PIXI.LINE_JOIN.MITER\n     */\n    public join = LINE_JOIN.MITER;\n\n    /** Miter limit. */\n    public miterLimit = 10;\n\n    /** Clones the object. */\n    public clone(): LineStyle\n    {\n        const obj = new LineStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n        obj.cap = this.cap;\n        obj.join = this.join;\n        obj.miterLimit = this.miterLimit;\n\n        return obj;\n    }\n\n    /** Reset the line style to default. */\n    public reset(): void\n    {\n        super.reset();\n\n        // Override default line style color\n        this.color = 0x0;\n\n        this.alignment = 0.5;\n        this.width = 0;\n        this.native = false;\n    }\n}\n", "import {\n    BLEND_MODES,\n    Circle,\n    Ellipse,\n    Matrix,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Shader,\n    SHAPES,\n    State,\n    Texture,\n    UniformGroup,\n    utils,\n} from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { curves, LINE_CAP, LINE_JOIN } from './const';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { ArcUtils, BezierUtils, QuadraticUtils } from './utils';\n\nimport type { BatchDrawCall, IPointData, IShape, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/** Batch element computed from Graphics geometry */\nexport interface IGraphicsBatchElement\n{\n    vertexData: Float32Array;\n    blendMode: BLEND_MODES;\n    indices: Uint16Array | Uint32Array;\n    uvs: Float32Array;\n    alpha: number;\n    worldAlpha: number;\n    _batchRGB: number[];\n    _tintRGB: number;\n    _texture: Texture;\n}\n\nexport interface IFillStyleOptions\n{\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface ILineStyleOptions extends IFillStyleOptions\n{\n    width?: number;\n    alignment?: number;\n    native?: boolean;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS: {[key: string]: Shader} = {};\n\nexport interface Graphics extends GlobalMixins.Graphics, Container {}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n *\n * Please note that due to legacy naming conventions, the behavior of some functions in this class\n * can be confusing.  Each call to `drawRect()`, `drawPolygon()`, etc. actually stores that primitive\n * in the Geometry class's GraphicsGeometry object for later use in rendering or hit testing - the\n * functions do not directly draw anything to the screen.  Similarly, the `clear()` function doesn't\n * change the screen, it simply resets the list of primitives, which can be useful if you want to\n * rebuild the contents of an existing Graphics object.\n *\n * Once a GraphicsGeometry list is built, you can re-use it in other Geometry objects as\n * an optimization, by passing it into a new Geometry object's constructor.  Because of this\n * ability, it's important to call `destroy()` on Geometry objects once you are done with them, to\n * properly dereference each GraphicsGeometry and prevent memory leaks.\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n     * the resolution is calculated based on the curve's length to ensure better visual quality.\n     * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n     * @static\n     * @property {boolean} [adaptive=true] - flag indicating if the resolution should be adaptive\n     * @property {number} [maxLength=10] - maximal length of a single segment of the curve (if adaptive = false, ignored)\n     * @property {number} [minSegments=8] - minimal number of segments in the curve (if adaptive = false, ignored)\n     * @property {number} [maxSegments=2048] - maximal number of segments in the curve (if adaptive = false, ignored)\n     * @property {number} [epsilon=0.0001] - precision of the curve fitting\n     */\n    public static readonly curves = curves;\n\n    /**\n     * Temporary point to use for containsPoint.\n     * @private\n     */\n    static _TEMP_POINT = new Point();\n\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Graphics objects.\n     */\n    public shader: Shader = null;\n\n    /** Renderer plugin for batching */\n    public pluginName = 'batch';\n\n    /**\n     * Current path\n     * @readonly\n     */\n    public currentPath: Polygon = null;\n\n    /** A collections of batches! These can be drawn by the renderer batch system. */\n    protected batches: Array<IGraphicsBatchElement> = [];\n\n    /** Update dirty for limiting calculating tints for batches. */\n    protected batchTint = -1;\n\n    /** Update dirty for limiting calculating batches.*/\n    protected batchDirty = -1;\n\n    /** Copy of the object vertex data. */\n    protected vertexData: Float32Array = null;\n\n    /** Current fill style. */\n    protected _fillStyle: FillStyle = new FillStyle();\n\n    /** Current line style. */\n    protected _lineStyle: LineStyle = new LineStyle();\n\n    /** Current shape transform matrix. */\n    protected _matrix: Matrix = null;\n\n    /** Current hole mode is enabled. */\n    protected _holeMode = false;\n    protected _transformID: number;\n    protected _tint: number;\n\n    /**\n     * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    private state: State = State.for2d();\n    private _geometry: GraphicsGeometry;\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     * @readonly\n     */\n    public get geometry(): GraphicsGeometry\n    {\n        return this._geometry;\n    }\n\n    /**\n     * @param geometry - Geometry to use, if omitted will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry: GraphicsGeometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new GraphicsGeometry();\n        this._geometry.refCount++;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     * @returns - A clone of the graphics object\n     */\n    public clone(): Graphics\n    {\n        this.finishPoly();\n\n        return new Graphics(this._geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.  Note that, since each\n     * primitive in the GraphicsGeometry list is rendered sequentially, modes\n     * such as `PIXI.BLEND_MODES.ADD` and `PIXI.BLEND_MODES.MULTIPLY` will\n     * be applied per-primitive.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    public get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to each graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     * @readonly\n     */\n    public get fill(): FillStyle\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     * @readonly\n     */\n    public get line(): LineStyle\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param [width=0] - width of the line to draw, will update the objects stored style\n     * @param [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(width: number, color?: number, alpha?: number, alignment?: number, native?: boolean): this;\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     * @param options - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(options?: ILineStyleOptions): this;\n\n    public lineStyle(options: ILineStyleOptions | number = null,\n        color = 0x0, alpha = 1, alignment = 0.5, native = false): this\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            options = { width: options, color, alpha, alignment, native } as ILineStyleOptions;\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     * @param [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outer).\n     *        WebGL only.\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTextureStyle(options?: ILineStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: options?.texture ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: LINE_CAP.BUTT,\n            join: LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally.\n     * @protected\n     */\n    protected startPoly(): void\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly(): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     * @param x - the X coordinate to move to\n     * @param y - the Y coordinate to move to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     * @param x - the X coordinate to draw to\n     * @param y - the Y coordinate to draw to\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public lineTo(x: number, y: number): this\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     * @param x\n     * @param y\n     */\n    protected _initCurve(x = 0, y = 0): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     * @param cpX - Control point x\n     * @param cpY - Control point y\n     * @param cpX2 - Second Control point x\n     * @param cpY2 - Second Control point y\n     * @param toX - Destination point x\n     * @param toY - Destination point y\n     * @returns This Graphics object. Good for chaining method calls\n     */\n    public bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The `arcTo` method creates an arc/curve between two tangents on the canvas.\n     * The first tangent is from the start point to the first control point,\n     * and the second tangent is from the first control point to the second control point.\n     * Note that the second control point is not necessarily the end point of the arc.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     * @param x1 - The x-coordinate of the first control point of the arc\n     * @param y1 - The y-coordinate of the first control point of the arc\n     * @param x2 - The x-coordinate of the second control point of the arc\n     * @param y2 - The y-coordinate of the second control point of the arc\n     * @param radius - The radius of the arc\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise = false): this\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     * @param color - the color of the fill\n     * @param alpha - the alpha of the fill\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public beginFill(color = 0, alpha = 1): this\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill.\n     * Note: The wrap mode of the texture is forced to REPEAT on render.\n     * @param options - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @returns {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options?: IFillStyleOptions): this\n    {\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options) as IFillStyleOptions;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public endFill(): this\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRect(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     * @param x - The X coord of the top-left of the rectangle\n     * @param y - The Y coord of the top-left of the rectangle\n     * @param width - The width of the rectangle\n     * @param height - The height of the rectangle\n     * @param radius - Radius of the rectangle corners\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     * @param x - The X coordinate of the center of the circle\n     * @param y - The Y coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawCircle(x: number, y: number, radius: number): this\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     * @param x - The X coordinate of the center of the ellipse\n     * @param y - The Y coordinate of the center of the ellipse\n     * @param width - The half width of the ellipse\n     * @param height - The half height of the ellipse\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawEllipse(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    public drawPolygon(...path: Array<number> | Array<IPointData>): this;\n    public drawPolygon(path: Array<number> | Array<IPointData> | Polygon): this;\n\n    /**\n     * Draws a polygon using the given path.\n     * @param {number[]|PIXI.IPointData[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawPolygon(...path: any[]): this\n    {\n        let points: Array<number> | Array<IPointData>;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] as Polygon;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else\n        if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public drawShape(shape: IShape): this\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     * @returns - This Graphics object. Good for chaining method calls\n     */\n    public clear(): this\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     * @returns - True if only 1 rect.\n     */\n    public isFastRect(): boolean\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === SHAPES.RECT\n            && !data[0].matrix\n            && !data[0].holes.length\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        // batch part..\n        // batch it!\n\n        geometry.updateBatches();\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /** Populating batches for rendering. */\n    protected _populateBatches(): void\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: utils.hex2rgb(color) as Array<number>,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1\n            };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     * @param renderer - The renderer\n     */\n    protected _renderBatched(renderer: Renderer): void\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     * @param renderer - The renderer\n     */\n    protected _renderDirect(renderer: Renderer): void\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     * @param renderer\n     * @param drawCall\n     */\n    protected _renderDrawCallDirect(renderer: Renderer, drawCall: BatchDrawCall): void\n    {\n        const { texArray, type, size, start } = drawCall;\n        const groupTextureCount = texArray.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     * @param renderer - The renderer\n     */\n    protected _resolveDirectShader(renderer: Renderer): Shader\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const { maxTextures } = renderer.plugins[pluginName];\n                const sampleValues = new Int32Array(maxTextures);\n\n                for (let i = 0; i < maxTextures; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object.\n     * @see PIXI.GraphicsGeometry#bounds\n     */\n    protected _calculateBounds(): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     * @param point - the point to test\n     * @returns - the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /** Recalculate the tint by applying tint to batches using Graphics tint. */\n    protected calculateTints(): void\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = utils.hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /** If there's a transform update or a change to the shape of the geometry, recalculate the vertices. */\n    protected calculateVertices(): void\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     * @returns - Returns itself.\n     */\n    public closePath(): this\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n            // ensure that the polygon is completed, and is available for hit detection\n            // (even if the graphics is not rendered yet)\n            this.finishPoly();\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     * @param matrix - Matrix to use for transform current shape.\n     * @returns - Returns itself.\n     */\n    public setMatrix(matrix: Matrix): this\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @returns - Returns itself.\n     */\n    public beginHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape.\n     * @returns - Returns itself.\n     */\n    public endHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     * @param options - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n", "/// <reference path=\"../global.d.ts\" />\nimport {\n    ArcUtils,\n    BATCH_POOL,\n    BatchPart,\n    BezierUtils,\n    buildCircle,\n    buildLine,\n    buildPoly,\n    buildRectangle,\n    buildRoundedRectangle,\n    DRAW_CALL_POOL,\n    FILL_COMMANDS,\n    QuadraticUtils,\n} from './utils';\n\nimport type { SHAPES } from '@pixi/core';\nimport type { BatchDrawCall } from '@pixi/core/';\nimport type { IShapeBuildCommand } from './utils/IShapeBuildCommand';\n\nexport * from './const';\nexport * from './Graphics';\nexport * from './GraphicsData';\nexport * from './GraphicsGeometry';\nexport * from './styles/FillStyle';\nexport * from './styles/LineStyle';\n\nexport const graphicsUtils = {\n    buildPoly: buildPoly as IShapeBuildCommand,\n    buildCircle: buildCircle as IShapeBuildCommand,\n    buildRectangle: buildRectangle as IShapeBuildCommand,\n    buildRoundedRectangle: buildRoundedRectangle as IShapeBuildCommand,\n    buildLine,\n    ArcUtils,\n    BezierUtils,\n    QuadraticUtils,\n    BatchPart,\n    FILL_COMMANDS: FILL_COMMANDS as Record<SHAPES, IShapeBuildCommand>,\n    BATCH_POOL: BATCH_POOL as Array<BatchPart>,\n    DRAW_CALL_POOL: DRAW_CALL_POOL as Array<BatchDrawCall>\n};\n", "import type { Buffer, TextureMatrix } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    /** UV Buffer data. */\n    public readonly data: Float32Array;\n\n    /** Buffer with normalized UV's. */\n    public uvBuffer: Buffer;\n\n    /** Material UV matrix. */\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param uvBuffer - Buffer with normalized uv's\n     * @param uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        this.uvBuffer = uvBuffer;\n        this.uvMatrix = uvMatrix;\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n        this._textureUpdateId = -1;\n        this._updateID = 0;\n    }\n\n    /**\n     * Updates\n     * @param forceUpdate - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n", "import { DRAW_MODES, Point, Polygon, settings, State } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { MeshBatchUvs } from './MeshBatchUvs';\n\nimport type { BLEND_MODES, Buffer, Geometry, IPointData, Renderer, Shader, Texture } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { MeshMaterial } from './MeshMaterial';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n * @memberof PIXI\n */\nexport class Mesh<T extends Shader = MeshMaterial> extends Container\n{\n    /**\n     * Used by the @pixi/canvas-mesh package to draw meshes using canvas.\n     * Added here because we cannot mixin a static property to Mesh type.\n     * @ignore\n     */\n    public static defaultCanvasPadding: number;\n\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Mesh objects.\n     * @type {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    public shader: T;\n\n    /**\n     * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    public state: State;\n\n    /** The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants. */\n    public drawMode: DRAW_MODES;\n\n    /**\n     * Typically the index of the IndexBuffer where to start drawing.\n     * @default 0\n     */\n    public start: number;\n\n    /**\n     * How much of the geometry to draw, by default `0` renders everything.\n     * @default 0\n     */\n    public size: number;\n\n    private _geometry: Geometry;\n\n    /** This is the caching layer used by the batcher. */\n    private vertexData: Float32Array;\n\n    /** If geometry is changed used to decide to re-transform the vertexData. */\n    private vertexDirty: number;\n    private _transformID: number;\n\n    /** Internal roundPixels field. */\n    private _roundPixels: boolean;\n\n    /** Batched UV's are cached for atlas textures. */\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    /**\n     * These are used as easy access for batching.\n     * @private\n     */\n    uvs: Float32Array;\n\n    /**\n     * These are used as easy access for batching.\n     * @private\n     */\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param geometry - The geometry the mesh will use.\n     * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n     * @param state - The state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n     */\n    constructor(geometry: Geometry, shader: T, state?: State, drawMode: DRAW_MODES = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        this.geometry = geometry;\n        this.shader = shader;\n        this.state = state || State.for2d();\n        this.drawMode = drawMode;\n        this.start = 0;\n        this.size = 0;\n\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = new Float32Array(1);\n        this.vertexDirty = -1;\n\n        this._transformID = -1;\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.batchUvs = null;\n    }\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get geometry(): Geometry\n    {\n        return this._geometry;\n    }\n\n    set geometry(value: Geometry)\n    {\n        if (this._geometry === value)\n        {\n            return;\n        }\n\n        if (this._geometry)\n        {\n            this._geometry.refCount--;\n\n            if (this._geometry.refCount === 0)\n            {\n                this._geometry.dispose();\n            }\n        }\n\n        this._geometry = value;\n\n        if (this._geometry)\n        {\n            this._geometry.refCount++;\n        }\n\n        this.vertexDirty = -1;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set material(value: T)\n    {\n        this.shader = value;\n    }\n\n    get material(): T\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return 'tint' in this.shader ? (this.shader as unknown as MeshMaterial).tint : null;\n    }\n\n    set tint(value: number)\n    {\n        (this.shader as unknown as MeshMaterial).tint = value;\n    }\n\n    /** The texture that the Mesh uses. Null for non-MeshMaterial shaders */\n    get texture(): Texture\n    {\n        return 'texture' in this.shader ? (this.shader as unknown as MeshMaterial).texture : null;\n    }\n\n    set texture(value: Texture)\n    {\n        (this.shader as unknown as MeshMaterial).texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @param renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        // TODO benchmark check for attribute size..\n        if (\n            shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader as unknown as MeshMaterial;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        // bind and sync uniforms..\n        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (shader.uvMatrix)\n        {\n            shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = shader._tintRGB;\n        this._texture = shader.texture;\n\n        const pluginName = (this.material as unknown as MeshMaterial).pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /** Updates vertexData field based on transform and vertices. */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const verticesBuffer = geometry.buffers[0];\n        const vertices = verticesBuffer.data;\n        const vertexDirtyId = verticesBuffer._updateID;\n\n        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n\n        this.vertexDirty = vertexDirtyId;\n    }\n\n    /** Updates uv field based on from geometry uv's or batchUvs. */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (!shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     * @param point - The point to test.\n     * @returns - The result of the test.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices = this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        if (this._cachedTexture)\n        {\n            this._cachedTexture.destroy();\n            this._cachedTexture = null;\n        }\n\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /** The maximum number of vertices to consider batchable. Generally, the complexity of the geometry. */\n    public static BATCHABLE_SIZE = 100;\n}\n", "import { Buffer, Geometry, TYPES } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n * @example\n * import { Geometry } from 'pixi.js';\n *\n * const geometry = new Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0, 0, 1, 0, 1, 1, 0, 1], 2);\n * geometry.addIndex([0, 1, 2, 1, 3, 2]);\n * @memberof PIXI\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    /**\n     * Dirty flag to limit update calls on Mesh. For example,\n     * limiting updates on a single Mesh instance with a shared Geometry\n     * within the render loop.\n     * @private\n     * @default -1\n     */\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n", "var fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mesh.mjs.map\n", "var vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mesh2.mjs.map\n", "import { Matrix, Program, Shader, TextureMatrix, utils } from '@pixi/core';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\n\nexport interface IMeshMaterialOptions\n{\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: utils.Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @memberof PIXI\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes.\n     * @readonly\n     */\n    public readonly uvMatrix: TextureMatrix;\n\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     * @default true\n     */\n    public batchable: boolean;\n\n    /**\n     * Renderer plugin for batching.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    /**\n     * Only do update if tint or alpha changes.\n     * @private\n     * @default false\n     */\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param uSampler - Texture that material uses to render.\n     * @param options - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        this._colorDirty = false;\n\n        this.uvMatrix = new TextureMatrix(uSampler);\n        this.batchable = options.program === undefined;\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /** Reference to the texture being rendered. */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            if (!this.uniforms.uSampler.baseTexture.alphaMode !== !value.baseTexture.alphaMode)\n            {\n                this._colorDirty = true;\n            }\n\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     * @default 1\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /** Gets called automatically by the Mesh. Intended to be overridden for custom {@link MeshMaterial} objects. */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            utils.premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n", "import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n", "import { MeshGeometry } from '@pixi/mesh';\n\nimport type { IPoint } from '@pixi/core';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n * @example\n * import { Point, RopeGeometry } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new RopeGeometry(100, points);\n * @memberof PIXI\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /** An array of points that determine the rope. */\n    public points: IPoint[];\n\n    /** Rope texture scale, if zero then the rope texture is stretched. */\n    public readonly textureScale: number;\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    _width: number;\n\n    /**\n     * @param width - The width (i.e., thickness) of the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param textureScale - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        this.points = points;\n        this._width = width;\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /** Refreshes Rope indices and uvs */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /** refreshes vertices of Rope mesh */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n        const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n            if (perpLength < 1e-6)\n            {\n                perpX = 0;\n                perpY = 0;\n            }\n            else\n            {\n                perpX /= perpLength;\n                perpY /= perpLength;\n\n                perpX *= halfWidth;\n                perpY *= halfWidth;\n            }\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n", "import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, SimplePlane, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * }\n * const SimplePlane = new SimplePlane(Texture.from('snake.png'), points);\n * @memberof PIXI\n */\nexport class SimplePlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n\n    protected _textureID: number;\n\n    /**\n     * @param texture - The texture to use on the SimplePlane.\n     * @param verticesX - The number of vertices in the x-axis\n     * @param verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX?: number, verticesY?: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.shader.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = this.shader.texture.width;\n            geometry.height = this.shader.texture.height;\n            geometry.build();\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n", "import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSlicePlane, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSlicePlane(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth = DEFAULT_BORDER_SIZE,\n        topHeight = DEFAULT_BORDER_SIZE,\n        rightWidth = DEFAULT_BORDER_SIZE,\n        bottomHeight = DEFAULT_BORDER_SIZE\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth;\n        this._rightWidth = rightWidth;\n        this._topHeight = topHeight;\n        this._bottomHeight = bottomHeight;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     * @returns Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n", "import { Texture } from '@pixi/core';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\n\nimport type { DRAW_MODES, IArrayBuffer, ITypedArray, Renderer } from '@pixi/core';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /** Upload vertices buffer each frame. */\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(\n        texture: Texture = Texture.EMPTY,\n        vertices?: IArrayBuffer,\n        uvs?: IArrayBuffer,\n        indices?: IArrayBuffer,\n        drawMode?: DRAW_MODES\n    )\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n", "import { WRAP_MODES } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\nimport type { IPoint, Renderer, Texture } from '@pixi/core';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, SimpleRope, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new SimpleRope(Texture.from('snake.png'), points);\n * @memberof PIXI\n */\nexport class SimpleRope extends Mesh\n{\n    public autoUpdate: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is set to REPEAT if `textureScale` is positive.\n     * @param texture - The texture to use on the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} textureScale - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be stretched instead.\n     */\n    constructor(texture: Texture, points: IPoint[], textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        const geometry: RopeGeometry = this.geometry as any;\n\n        if (this.autoUpdate || geometry._width !== this.shader.texture.height)\n        {\n            geometry._width = this.shader.texture.height;\n            geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n", "import { BLEND_MODES, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { BaseTexture, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Sprite } from '@pixi/sprite';\nimport type { ParticleBuffer } from './ParticleBuffer';\n\nexport interface IParticleProperties\n{\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use. And here you have a hundred sprites that will be rendered at the speed of light.\n * @example\n * import { ParticleContainer, Sprite } from 'pixi.js';\n *\n * const container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = Sprite.from('myImage.png');\n *     container.addChild(sprite);\n * }\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container<Sprite>\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     * @default false\n     */\n    public autoResize: boolean;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     * @default true\n     */\n    public roundPixels: boolean;\n\n    /**\n     * The texture used to render the children.\n     * @readonly\n     */\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    /** @private */\n    _maxSize: number;\n\n    /** @private */\n    _buffers: ParticleBuffer[];\n\n    /** @private */\n    _batchSize: number;\n\n    /**\n     * Set properties to be dynamic (true) / static (false).\n     * @private\n     */\n    _properties: boolean[];\n\n    /**\n     * For every batch, stores _updateID corresponding to the last change in that batch.\n     * @private\n     */\n    _bufferUpdateIDs: number[];\n\n    /**\n     * When child inserted, removed or changes position this number goes up.\n     * @private\n     */\n    _updateID: number;\n\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    /**\n     * @param maxSize - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param properties - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties?: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        this._properties = [false, true, false, false, false];\n        this._maxSize = maxSize;\n        this._batchSize = batchSize;\n        this._buffers = null;\n        this._bufferUpdateIDs = [];\n        this._updateID = 0;\n\n        this.interactiveChildren = false;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.autoResize = autoResize;\n        this.roundPixels = true;\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     * @param properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        utils.hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer.\n     * @param renderer - The WebGL renderer.\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     * @param smallestChildIndex - The smallest child index.\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n", "import { Buffer, Geometry, TYPES, utils } from '@pixi/core';\n\nimport type { Sprite } from '@pixi/sprite';\nimport type { IParticleRendererProperty } from './ParticleRenderer';\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    public geometry: Geometry;\n    public staticStride: number;\n    public staticBuffer: Buffer;\n    public staticData: Float32Array;\n    public staticDataUint32: Uint32Array;\n    public dynamicStride: number;\n    public dynamicBuffer: Buffer;\n    public dynamicData: Float32Array;\n    public dynamicDataUint32: Uint32Array;\n    public _updateID: number;\n\n    /** Holds the indices of the geometry (quads) to draw. */\n    indexBuffer: Buffer;\n\n    /** The number of particles the buffer can hold. */\n    private size: number;\n\n    /** A list of the properties that are dynamic. */\n    private dynamicProperties: IParticleRendererProperty[];\n\n    /** A list of the properties that are static. */\n    private staticProperties: IParticleRendererProperty[];\n\n    /**\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties: IParticleRendererProperty[], dynamicPropertyFlags: boolean[], size: number)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        this.size = size;\n        this.dynamicProperties = [];\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    private initBuffers(): void\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        this.indexBuffer = new Buffer(utils.createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadDynamic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadStatic(children: Sprite[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /** Destroys the ParticleBuffer. */\n    destroy(): void\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n", "var fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.mjs.map\n", "var vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles2.mjs.map\n", "import { extensions, ExtensionType, Matrix, ObjectRenderer, Shader, State, TYPES, utils } from '@pixi/core';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { Sprite } from '@pixi/sprite';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface IParticleRendererProperty\n{\n    attributeName: string;\n    size: number;\n    type?: TYPES;\n    uploadFunction: (...params: any[]) => any;\n    offset: number;\n}\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof PIXI\n */\nexport class ParticleRenderer extends ObjectRenderer\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'particle',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    /** The WebGL state in which this renderer will work. */\n    public readonly state: State;\n\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public shader: Shader;\n    public tempMatrix: Matrix;\n    public properties: IParticleRendererProperty[];\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n\n        this.shader = null;\n\n        this.properties = null;\n\n        this.tempMatrix = new Matrix();\n\n        this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: this.uploadTint,\n                offset: 0,\n            },\n        ];\n\n        this.shader = Shader.from(vertex, fragment, {});\n        this.state = State.for2d();\n    }\n\n    /**\n     * Renders the particle container object.\n     * @param container - The container to render using this ParticleRenderer.\n     */\n    public render(container: ParticleContainer): void\n    {\n        const children = container.children;\n        const maxSize = container._maxSize;\n        const batchSize = container._batchSize;\n        const renderer = this.renderer;\n        let totalChildren = children.length;\n\n        if (totalChildren === 0)\n        {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize)\n        {\n            totalChildren = maxSize;\n        }\n\n        let buffers = container._buffers;\n\n        if (!buffers)\n        {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n\n        const baseTexture = children[0]._texture.baseTexture;\n        const premultiplied = baseTexture.alphaMode > 0;\n\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = utils.correctBlendMode(container.blendMode, premultiplied);\n        renderer.state.set(this.state);\n\n        const gl = renderer.gl;\n\n        const m = container.worldTransform.copyTo(this.tempMatrix);\n\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n\n        this.shader.uniforms.uColor = utils.premultiplyRgba(container.tintRgb,\n            container.worldAlpha, this.shader.uniforms.uColor, premultiplied);\n\n        this.shader.uniforms.uSampler = baseTexture;\n\n        this.renderer.shader.bind(this.shader);\n\n        let updateStatic = false;\n\n        // now lets upload and render the buffers..\n        for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1)\n        {\n            let amount = (totalChildren - i);\n\n            if (amount > batchSize)\n            {\n                amount = batchSize;\n            }\n\n            if (j >= buffers.length)\n            {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n\n            const buffer = buffers[j];\n\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n\n            const bid = container._bufferUpdateIDs[j] || 0;\n\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic)\n            {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n     * @param container - The container to render using this ParticleRenderer\n     * @returns - The buffers\n     */\n    private generateBuffers(container: ParticleContainer): ParticleBuffer[]\n    {\n        const buffers = [];\n        const size = container._maxSize;\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        for (let i = 0; i < size; i += batchSize)\n        {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n\n        return buffers;\n    }\n\n    /**\n     * Creates one more particle buffer, because container has autoResize feature.\n     * @param container - The container to render using this ParticleRenderer\n     * @returns - The generated buffer\n     */\n    private _generateOneMoreBuffer(container: ParticleContainer): ParticleBuffer\n    {\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    }\n\n    /**\n     * Uploads the vertices.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their vertices uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadVertices(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const texture = sprite._texture;\n            const sx = sprite.scale.x;\n            const sy = sprite.scale.y;\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the position.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their positions uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadPosition(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spritePosition = children[startIndex + i].position;\n\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the rotation.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadRotation(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spriteRotation = children[startIndex + i].rotation;\n\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the UVs.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadUvs(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const textureUvs = children[startIndex + i]._texture._uvs;\n\n            if (textureUvs)\n            {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n\n                offset += stride * 4;\n            }\n            else\n            {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n\n                offset += stride * 4;\n            }\n        }\n    }\n\n    /**\n     * Uploads the tint.\n     * @param children - the array of sprites to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadTint(\n        children: Sprite[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite = children[startIndex + i];\n            const premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            const alpha = sprite.alpha;\n\n            // we dont call extra function if alpha is 1.0, that's faster\n            const argb = alpha < 1.0 && premultiplied\n                ? utils.premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n\n            offset += stride * 4;\n        }\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.tempMatrix = null;\n    }\n}\n\nextensions.add(ParticleRenderer);\n", "/**\n * Constants that define the type of gradient on text.\n * @static\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n", "import { settings } from '@pixi/core';\n\nimport type { ICanvas, ICanvasRenderingContext2D, ICanvasRenderingContext2DSettings } from '@pixi/core';\nimport type { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n/**\n * A number, or a string containing a number.\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\ninterface IFontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: IFontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = TextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = settings.ADAPTER.getCanvasRenderingContext2D().prototype;\n\n            result\n                = TextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see PIXI.TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see PIXI.TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, IFontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    private static __canvas: ICanvas;\n    private static __context: ICanvasRenderingContext2D;\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: ICanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = TextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + (style.strokeThickness * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (TextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = TextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return TextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see TextMetrics.graphemeSegmenter\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return TextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        if (width === 0 || height === 0)\n        {\n            TextMetrics._fonts[font] = properties;\n\n            return properties;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!TextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    TextMetrics.__canvas = c;\n\n                    return c;\n                }\n\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            TextMetrics.__canvas = canvas;\n        }\n\n        return TextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!TextMetrics.__context)\n        {\n            TextMetrics.__context = TextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return TextMetrics.__context;\n    }\n}\n", "// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { utils } from '@pixi/core';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\n/**\n * Generic interface for TextStyle options.\n * @memberof PIXI\n */\nexport interface ITextStyle {\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true */\n    breakWords: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow: boolean;\n    /** Set alpha for the drop shadow */\n    dropShadowAlpha: number;\n    /** Set a angle of the drop shadow */\n    dropShadowAngle: number;\n    /** Set a shadow blur radius */\n    dropShadowBlur: number;\n    /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00' */\n    dropShadowColor: string|number;\n    /** Set a distance of the drop shadow */\n    dropShadowDistance: number;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill: TextStyleFill;\n    /**\n     * If fill is an array of colours to create a gradient, this can change the\n     * type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @type {PIXI.TEXT_GRADIENT}\n     */\n    fillGradientType: TEXT_GRADIENT;\n    /**\n     * If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the\n     * default behaviour of evenly spacing them.\n     */\n    fillGradientStops: number[];\n    /**\n     * The font family, can be a single font name, or a list of names where the first\n     * is the preferred font.\n     */\n    fontFamily: string | string[];\n    /**\n     * The font size (as a number it converts to px, but as a string,\n     * equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    fontSize: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight: number;\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve\n     * spiked text issues. Possible values \"miter\" (creates a sharp corner),\n     * \"round\" (creates a round corner) or \"bevel\" (creates a squared corner).\n     * @type {'miter'|'round'|'bevel'}\n     */\n    lineJoin: TextStyleLineJoin;\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     * or increase the spikiness of rendered text.\n     */\n    miterLimit: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke: string|number;\n    /** A number that represents the thickness of the stroke. A value of 0 will disable stroke. */\n    strokeThickness: number;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline: TextStyleTextBaseline;\n    /** Trim transparent borders */\n    trim: boolean;\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth: number;\n}\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle implements ITextStyle\n{\n    /**\n     * Default style options used for all TextStyle instances.\n     * @type {PIXI.ITextStyle}\n     */\n    public static defaultStyle: ITextStyle = {\n        /**\n         * See {@link PIXI.TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link PIXI.TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link PIXI.TextStyle.dropShadow} */\n        dropShadow: false,\n        /** See {@link PIXI.TextStyle.dropShadowAlpha} */\n        dropShadowAlpha: 1,\n        /**\n         * See {@link PIXI.TextStyle.dropShadowAngle}\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** See {@link PIXI.TextStyle.dropShadowBlur} */\n        dropShadowBlur: 0,\n        /**\n         * See {@link PIXI.TextStyle.dropShadowColor}\n         * @type {string|number}\n         */\n        dropShadowColor: 'black',\n        /** See {@link PIXI.TextStyle.dropShadowDistance} */\n        dropShadowDistance: 5,\n        /**\n         * See {@link PIXI.TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link PIXI.TextStyle.fillGradientType}\n         * @type {PIXI.TEXT_GRADIENT}\n         * @default PIXI.TEXT_GRADIENT.LINEAR_VERTICAL\n         */\n        fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n        /**\n         * See {@link PIXI.TextStyle.fillGradientStops}\n         * @type {number[]}\n         * @default []\n         */\n        fillGradientStops: [],\n        /**\n         * See {@link PIXI.TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link PIXI.TextStyle.fontSize}\n         * @type {number|string} \n         */\n        fontSize: 26,\n        /**\n         * See {@link PIXI.TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link PIXI.TextStyle.leading} */\n        leading: 0,\n        /** See {@link PIXI.TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link PIXI.TextStyle.lineHeight} */\n        lineHeight: 0,\n        /**\n         * See {@link PIXI.TextStyle.lineJoin}\n         * @type {'miter'|'round'|'bevel'}\n         */\n        lineJoin: 'miter',\n        /** See {@link PIXI.TextStyle.miterLimit} */\n        miterLimit: 10,\n        /** See {@link PIXI.TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link PIXI.TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: 'black',\n        /** See {@link PIXI.TextStyle.strokeThickness} */\n        strokeThickness: 0,\n        /**\n         * See {@link PIXI.TextStyle.textBaseline} \n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link PIXI.TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link PIXI.TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link PIXI.TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link PIXI.TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param style - TextStyle properties to be set on the text. See {@link PIXI.TextStyle.defaultStyle}\n     *       for the default values.\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, TextStyle.defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, TextStyle.defaultStyle, TextStyle.defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     *\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g., 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @type {PIXI.TEXT_GRADIENT}\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family, can be a single font name, or a list of names where the first\n     * is the preferred font.\n     */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style.\n     *\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant.\n     *\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight.\n     *\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {'miter'|'round'|'bevel'}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return utils.hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.startsWith('0x'))\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n", "/* eslint max-depth: [2, 8] */\nimport { Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { TEXT_GRADIENT } from './const';\nimport { TextMetrics } from './TextMetrics';\nimport { TextStyle } from './TextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n * @example\n * import { Text } from 'pixi.js';\n *\n * const text = new Text('This is a PixiJS text', {\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * Override whether or not the resolution of the text is automatically adjusted to match the resolution of the renderer.\n     * Setting this to false can allow you to get crisper text at lower render resolutions.\n     * @example\n     * // renderer has a resolution of 1\n     * const app = new Application();\n     *\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultAutoResolution = true;\n\n    /**\n     * If {@link PIXI.Text.defaultAutoResolution} is false, this will be the default resolution of the text.\n     * If not set it will default to {@link PIXI.settings.RESOLUTION}.\n     * @example\n     * Text.defaultResolution = 2;\n     * Text.defaultAutoResolution = false;\n     *\n     * // text has a resolution of 2\n     * const text = new Text('This is a PixiJS text');\n     */\n    public static defaultResolution: number;\n\n    /**\n     * @see PIXI.TextMetrics.experimentalLetterSpacing\n     * @deprecated since 7.1.0\n     */\n    public static get experimentalLetterSpacing()\n    {\n        return TextMetrics.experimentalLetterSpacing;\n    }\n    public static set experimentalLetterSpacing(value)\n    {\n        // #if _DEBUG\n        utils.deprecation('7.1.0',\n            'Text.experimentalLetterSpacing is deprecated, use TextMetrics.experimentalLetterSpacing');\n        // #endif\n\n        TextMetrics.experimentalLetterSpacing = value;\n    }\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: ICanvas;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ICanvasRenderingContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param style - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text?: string | number, style?: Partial<ITextStyle> | TextStyle, canvas?: ICanvas)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = settings.ADAPTER.createCanvas();\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d', {\n            // required for trimming to work without warnings\n            willReadFrequently: true,\n        });\n\n        this._resolution = Text.defaultResolution ?? settings.RESOLUTION;\n        this._autoResolution = Text.defaultAutoResolution;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = utils.hex2rgb(typeof dropShadowColor === 'number'\n                    ? dropShadowColor\n                    : utils.string2hex(dropShadowColor));\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (TextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (TextMetrics.experimentalLetterSpacing)\n            {\n                this.context.letterSpacing = `${letterSpacing}px`;\n                this.context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                this.context.letterSpacing = '0px';\n                this.context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = TextMetrics.graphemeSegmenter(text);\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = utils.trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    public updateTransform(): void\n    {\n        this.updateText(true);\n\n        super.updateTransform();\n    }\n\n    public getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        if (this._textureID === -1)\n        {\n            // texture was updated: recalculate transforms\n            skipUpdate = false;\n        }\n\n        return super.getBounds(skipUpdate, rect);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     * @param rect - The output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @param metrics\n     * @returns The fill style\n     */\n    private _generateFillStyle(\n        style: TextStyle, lines: string[], metrics: TextMetrics\n    ): string | CanvasGradient | CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[] | CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     *\n     * If setting the `style` can also be partial {@link PIXI.ITextStyle}.\n     */\n    get style(): TextStyle\n    {\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string | number)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n", "/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /** The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n", "import { BaseTexture, Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Text, TextMetrics, TextStyle } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { IRenderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\ninterface IArrowFunction\n{\n    (): void;\n}\ninterface IUploadHook\n{\n    (helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook\n{\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject\n{\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle | Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item?._textures?.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (!queue.includes(baseTexture))\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (!queue.includes(item.style))\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (!queue.includes(texture))\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (!queue.includes(item))\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.prepare.upload(sprite, () => {\n *     // Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n * });\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The default maximum uploads per frame.\n     * @static\n     */\n    public static uploadsPerFrame = 4;\n\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: IRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.IRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: IRenderer)\n    {\n        this.limiter = new CountLimiter(BasePrepare.uploadsPerFrame);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     * @method PIXI.BasePrepare#upload\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} [item] -\n     *        Container or display object to search for items to upload or the items to upload themselves,\n     *        or optionally ommitted, if items have been added using {@link PIXI.BasePrepare#add `prepare.add`}.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture): Promise<void>\n    {\n        return new Promise((resolve) =>\n        {\n            // If a display object, search for items\n            // that we could upload\n            if (item)\n            {\n                this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n            }\n\n            // Get the items for upload from the display\n            if (this.queue.length)\n            {\n                this.completes.push(resolve);\n\n                if (!this.ticking)\n                {\n                    this.ticking = true;\n                    Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n                }\n            }\n            else\n            {\n                resolve();\n            }\n        });\n    }\n\n    /**\n     * Handle tick update\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @returns Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @returns Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @returns Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n", "import { settings, utils } from '@pixi/core';\nimport { BasePrepare } from './BasePrepare';\n\nObject.defineProperties(settings, {\n    /**\n     * Default number of uploads per frame using prepare plugin.\n     * @static\n     * @memberof PIXI.settings\n     * @name UPLOADS_PER_FRAME\n     * @deprecated since 7.1.0\n     * @see PIXI.BasePrepare.uploadsPerFrame\n     * @type {number}\n     */\n    UPLOADS_PER_FRAME:\n    {\n        get()\n        {\n            return BasePrepare.uploadsPerFrame;\n        },\n        set(value: number)\n        {\n            // #if _DEBUG\n            utils.deprecation('7.1.0', 'settings.UPLOADS_PER_FRAME is deprecated, use prepare.BasePrepare.uploadsPerFrame');\n            // #endif\n            BasePrepare.uploadsPerFrame = value;\n        },\n    },\n});\n\nexport { settings };\n", "import { BaseTexture, extensions, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { BasePrepare } from './BasePrepare';\n\nimport type { ExtensionMetadata, IRenderer, ISystem, Renderer } from '@pixi/core';\nimport type { IDisplayObjectExtended } from './BasePrepare';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer: IRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.prepare` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (prepare will be auto-added to renderer)\n * const app = new Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // Create a display object\n * const rect = new Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'prepare',\n        type: ExtensionType.RendererSystem,\n    };\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n\nextensions.add(Prepare);\n", "/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n", "import { Texture, Ticker, UPDATE_PRIORITY } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * import { AnimatedSprite, Texture } from 'pixi.js';\n *\n * const alienImages = [\n *     'image_sequence_01.png',\n *     'image_sequence_02.png',\n *     'image_sequence_03.png',\n *     'image_sequence_04.png',\n * ];\n * const textureArray = [];\n *\n * for (let i = 0; i < 4; i++)\n * {\n *     const texture = Texture.from(alienImages[i]);\n *     textureArray.push(texture);\n * }\n *\n * const animatedSprite = new AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n * @example\n * import { AnimatedSprite, Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * animatedSprite = new AnimatedSprite(sheet.animations['image_sequence']);\n * @memberof PIXI\n */\nexport class AnimatedSprite extends Sprite\n{\n    /**\n     * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower.\n     * @default 1\n     */\n    public animationSpeed: number;\n\n    /**\n     * Whether or not the animate sprite repeats after playing.\n     * @default true\n     */\n    public loop: boolean;\n\n    /**\n     * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n     *\n     * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n     * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n     * of the frame (e.g. left foot).\n     *\n     * Note: Enabling this will override any previously set `anchor` on each frame change.\n     * @default false\n     */\n    public updateAnchor: boolean;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite finishes playing.\n     * @example\n     * animation.onComplete = () => {\n     *     // Finished!\n     * };\n     */\n    public onComplete?: () => void;\n\n    /**\n     * User-assigned function to call when an AnimatedSprite changes which texture is being rendered.\n     * @example\n     * animation.onFrameChange = () => {\n     *     // Updated!\n     * };\n     */\n    public onFrameChange?: (currentFrame: number) => void;\n\n    /**\n     * User-assigned function to call when `loop` is true, and an AnimatedSprite is played and\n     * loops around to start again.\n     * @example\n     * animation.onLoop = () => {\n     *     // Looped!\n     * };\n     */\n    public onLoop?: () => void;\n\n    private _playing: boolean;\n    private _textures: Texture[];\n    private _durations: number[];\n\n    /**\n     * `true` uses PIXI.Ticker.shared to auto update animation time.\n     * @default true\n     */\n    private _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update animation time.\n     * @default false\n     */\n    private _isConnectedToTicker: boolean;\n\n    /** Elapsed time since animation has been started, used internally to display current texture. */\n    private _currentTime: number;\n\n    /** The texture index that was displayed last time. */\n    private _previousFrame: number;\n\n    /**\n     * @param textures - An array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation.\n     * @param {boolean} [autoUpdate=true] - Whether to use Ticker.shared to auto update animation time.\n     */\n    constructor(textures: Texture[] | FrameObject[], autoUpdate = true)\n    {\n        super(textures[0] instanceof Texture ? textures[0] : textures[0].texture);\n\n        this._textures = null;\n        this._durations = null;\n        this._autoUpdate = autoUpdate;\n        this._isConnectedToTicker = false;\n\n        this.animationSpeed = 1;\n        this.loop = true;\n        this.updateAnchor = false;\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n\n        this._currentTime = 0;\n\n        this._playing = false;\n        this._previousFrame = null;\n\n        this.textures = textures;\n    }\n\n    /** Stops the AnimatedSprite. */\n    public stop(): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        this._playing = false;\n        if (this._autoUpdate && this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /** Plays the AnimatedSprite. */\n    public play(): void\n    {\n        if (this._playing)\n        {\n            return;\n        }\n\n        this._playing = true;\n        if (this._autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this, UPDATE_PRIORITY.HIGH);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame.\n     * @param frameNumber - Frame index to stop at.\n     */\n    public gotoAndStop(frameNumber: number): void\n    {\n        this.stop();\n        this.currentFrame = frameNumber;\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite.\n     * @param frameNumber - Frame index to start at.\n     */\n    public gotoAndPlay(frameNumber: number): void\n    {\n        this.currentFrame = frameNumber;\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     * @param deltaTime - Time since last tick.\n     */\n    update(deltaTime: number): void\n    {\n        if (!this._playing)\n        {\n            return;\n        }\n\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if ((this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                    || (this.animationSpeed < 0 && this.currentFrame > previousFrame))\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /** Updates the displayed texture to match the current frame index. */\n    private updateTexture(): void\n    {\n        const currentFrame = this.currentFrame;\n\n        if (this._previousFrame === currentFrame)\n        {\n            return;\n        }\n\n        this._previousFrame = currentFrame;\n\n        this._texture = this._textures[currentFrame];\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = this._texture._uvs.uvsFloat32;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copyFrom(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it.\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value.\n     * @param {boolean} [options.children=false] - If set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well.\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well.\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.stop();\n        super.destroy(options);\n\n        this.onComplete = null;\n        this.onFrameChange = null;\n        this.onLoop = null;\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of frame ids.\n     * @param frames - The array of frames ids the AnimatedSprite will use as its texture frames.\n     * @returns - The new animated sprite with the specified frames.\n     */\n    public static fromFrames(frames: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(Texture.from(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating an AnimatedSprite from an array of image ids.\n     * @param images - The array of image urls the AnimatedSprite will use as its texture frames.\n     * @returns The new animate sprite with the specified images as frames.\n     */\n    public static fromImages(images: string[]): AnimatedSprite\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(Texture.from(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * The total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     * @readonly\n     * @default 0\n     */\n    get totalFrames(): number\n    {\n        return this._textures.length;\n    }\n\n    /** The array of textures used for this AnimatedSprite. */\n    get textures(): Texture[] | FrameObject[]\n    {\n        return this._textures;\n    }\n\n    set textures(value: Texture[] | FrameObject[])\n    {\n        if (value[0] instanceof Texture)\n        {\n            this._textures = value as Texture[];\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push((value[i] as FrameObject).texture);\n                this._durations.push((value[i] as FrameObject).time);\n            }\n        }\n        this._previousFrame = null;\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /** The AnimatedSprite's current frame index. */\n    get currentFrame(): number\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n\n    set currentFrame(value: number)\n    {\n        if (value < 0 || value > this.totalFrames - 1)\n        {\n            throw new Error(`[AnimatedSprite]: Invalid frame index value ${value}, `\n                + `expected to be between 0 and totalFrames ${this.totalFrames}.`);\n        }\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = value;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Indicates if the AnimatedSprite is currently playing.\n     * @readonly\n     */\n    get playing(): boolean\n    {\n        return this._playing;\n    }\n\n    /** Whether to use Ticker.shared to auto update animation time. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._playing)\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n}\n\n/** @memberof PIXI.AnimatedSprite */\nexport interface FrameObject\n{\n    /** The {@link PIXI.Texture} of the frame. */\n    texture: Texture;\n\n    /** The duration of the frame, in milliseconds. */\n    time: number;\n}\n", "import { Point, Rectangle, Texture, TextureMatrix, Transform } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\n\nimport type { IBaseTextureOptions, IPoint, IPointData, ISize, ObservablePoint, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /** Tile transform */\n    public tileTransform: Transform;\n\n    /** Matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space. */\n    public uvMatrix: TextureMatrix;\n\n    /**\n     * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n     * local space.\n     *\n     * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n     * this, the top-left corner always gets the (0, 0) texture coordinate.\n     * @default false\n     */\n    public uvRespectAnchor: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is forced to REPEAT on render if the size of the texture\n     * is a power of two, the texture's wrap mode is CLAMP, and the texture hasn't been bound yet.\n     * @param texture - The texture of the tiling sprite.\n     * @param width - The width of the tiling sprite.\n     * @param height - The height of the tiling sprite.\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        this.tileTransform = new Transform();\n\n        // The width of the tiling sprite\n        this._width = width;\n\n        // The height of the tiling sprite\n        this._height = height;\n\n        this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /** The scaling of the image that is being tiled. */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: IPointData)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /** The offset of the image that is being tiled. */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the tiling sprite. */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     * @param point - The point to check.\n     * @returns Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @returns {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource | Texture, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new TilingSprite(\n            texture,\n            options.width,\n            options.height\n        );\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n", "var gl2FragmentSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nin vec2 vTextureCoord;\\n\\nout vec4 fragmentColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    vec4 texSample = texture(uSampler, coord, unclamped == coord ? 0.0f : -32.0f);// lod-bias very negative to force lod 0\\n\\n    fragmentColor = texSample * uColor;\\n}\\n\";\n\nexport { gl2FragmentSrc as default };\n//# sourceMappingURL=sprite-tiling.mjs.map\n", "var gl2VertexSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-300\\n\\nprecision lowp float;\\n\\nin vec2 aVertexPosition;\\nin vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nout vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nexport { gl2VertexSrc as default };\n//# sourceMappingURL=sprite-tiling2.mjs.map\n", "var gl1FragmentSrc = \"#version 100\\n#ifdef GL_EXT_shader_texture_lod\\n    #extension GL_EXT_shader_texture_lod : enable\\n#endif\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    #ifdef GL_EXT_shader_texture_lod\\n        vec4 texSample = unclamped == coord\\n            ? texture2D(uSampler, coord) \\n            : texture2DLodEXT(uSampler, coord, 0);\\n    #else\\n        vec4 texSample = texture2D(uSampler, coord);\\n    #endif\\n\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\n\nexport { gl1FragmentSrc as default };\n//# sourceMappingURL=sprite-tiling-fallback.mjs.map\n", "var gl1VertexSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\nexport { gl1VertexSrc as default };\n//# sourceMappingURL=sprite-tiling-fallback2.mjs.map\n", "var fragmentSimpleSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-Simple-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec4 texSample = texture2D(uSampler, vTextureCoord);\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\n\nexport { fragmentSimpleSrc as default };\n//# sourceMappingURL=sprite-tiling-simple.mjs.map\n", "import { extensions, ExtensionType, Matrix, ObjectRenderer, QuadUv, Shader, State, utils, WRAP_MODES } from '@pixi/core';\nimport gl2FragmentSrc from './sprite-tiling.frag';\nimport gl2VertexSrc from './sprite-tiling.vert';\nimport gl1FragmentSrc from './sprite-tiling-fallback.frag';\nimport gl1VertexSrc from './sprite-tiling-fallback.vert';\nimport fragmentSimpleSrc from './sprite-tiling-simple.frag';\n\nimport type { ExtensionMetadata, Renderer } from '@pixi/core';\nimport type { TilingSprite } from './TilingSprite';\n\nconst tempMat = new Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport class TilingSpriteRenderer extends ObjectRenderer\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'tilingSprite',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    public shader: Shader;\n    public simpleShader: Shader;\n    public quad: QuadUv;\n    public readonly state: State;\n\n    /**\n     * constructor for renderer\n     * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // WebGL version is not available during initialization!\n        renderer.runners.contextChange.add(this);\n\n        this.quad = new QuadUv();\n\n        /**\n         * The WebGL state in which this renderer will work.\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /** Creates shaders when context is initialized. */\n    contextChange(): void\n    {\n        const renderer = this.renderer;\n        const uniforms = { globals: renderer.globalUniforms };\n\n        this.simpleShader = Shader.from(gl1VertexSrc, fragmentSimpleSrc, uniforms);\n        this.shader = renderer.context.webGLVersion > 1\n            ? Shader.from(gl2VertexSrc, gl2FragmentSrc, uniforms)\n            : Shader.from(gl1VertexSrc, gl1FragmentSrc, uniforms);\n    }\n\n    /**\n     * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n     */\n    public render(ts: TilingSprite): void\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        const anchorX = ts.uvRespectAnchor ? ts.anchor.x : 0;\n        const anchorY = ts.uvRespectAnchor ? ts.anchor.y : 0;\n\n        vertices = quad.uvs;\n\n        vertices[0] = vertices[6] = -anchorX;\n        vertices[1] = vertices[3] = -anchorY;\n\n        vertices[2] = vertices[4] = 1.0 - anchorX;\n        vertices[5] = vertices[7] = 1.0 - anchorY;\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const premultiplied = baseTex.alphaMode > 0;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = utils.premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, premultiplied);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);\n\n        this.state.blendMode = utils.correctBlendMode(ts.blendMode, premultiplied);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n\nextensions.add(TilingSpriteRenderer);\n", "import { BaseTexture, Rectangle, Texture, utils } from '@pixi/core';\n\nimport type { ImageResource, IPointData } from '@pixi/core';\n\n/** Represents the JSON data for a spritesheet atlas. */\nexport interface ISpritesheetFrameData\n{\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/** Atlas format. */\nexport interface ISpritesheetData\n{\n    frames: utils.Dict<ISpritesheetFrameData>;\n    animations?: utils.Dict<string[]>;\n    meta: {\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code you may pass its JSON data file to Pixi's loader:\n *\n * ```js\n * import { Assets } from 'pixi.js';\n *\n * const sheet = await Assets.load('images/spritesheet.json');\n * ```\n *\n * Alternately, you may circumvent the loader by instantiating the Spritesheet directly:\n *\n * ```js\n * import { Spritesheet } from 'pixi.js';\n *\n * const sheet = new Spritesheet(texture, spritesheetData);\n * await sheet.parse();\n * console.log('Spritesheet ready to use!');\n * ```\n *\n * With the `sheet.textures` you can create Sprite objects, and `sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** For multi-packed spritesheets, this contains a reference to all the other spritesheets it depends on. */\n    public linkedSheets: Spritesheet[] = [];\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * new Sprite(sheet.textures['image.png']);\n     */\n    public textures: utils.Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * @example\n     * import { AnimatedSprite } from 'pixi.js';\n     *\n     * new AnimatedSprite(sheet.animations['anim_name']);\n     */\n    public animations: utils.Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {object}\n     */\n    private _frames: utils.Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: utils.Dict<Texture>) => void;\n\n    /**\n     * @param texture - Reference to the source BaseTexture object.\n     * @param {object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @returns Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = utils.getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = parseFloat(scale ?? '1');\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     * @method PIXI.Spritesheet#parse\n     */\n    public parse(): Promise<utils.Dict<Texture>>\n    {\n        return new Promise((resolve) =>\n        {\n            this._callback = resolve;\n            this._batchIndex = 0;\n\n            if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n            {\n                this._processFrames(0);\n                this._processAnimations();\n                this._parseComplete();\n            }\n            else\n            {\n                this._nextBatch();\n            }\n        });\n    }\n\n    /**\n     * Process a batch of frames\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n        this.linkedSheets = [];\n    }\n}\n", "import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, LoadAsset, Loader, ResolveAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\ninterface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): ResolveAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: LoadAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: LoadAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n", "/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    /** @readonly */\n    public info: IBitmapFontDataInfo[];\n\n    /** @readonly */\n    public common: IBitmapFontDataCommon[];\n\n    /** @readonly */\n    public page: IBitmapFontDataPage[];\n\n    /** @readonly */\n    public char: IBitmapFontDataChar[];\n\n    /** @readonly */\n    public kerning: IBitmapFontDataKerning[];\n\n    /** @readonly */\n    public distanceField: IBitmapFontDataDistanceField[];\n\n    constructor()\n    {\n        this.info = [];\n        this.common = [];\n        this.page = [];\n        this.char = [];\n        this.kerning = [];\n        this.distanceField = [];\n    }\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataInfo\n{\n    /** Font face */\n    face: string;\n\n    /** Font size */\n    size: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataCommon\n{\n    /** Line height, in pixels. */\n    lineHeight: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataPage\n{\n    /** Unique id for bitmap texture */\n    id: number;\n\n    /** File name */\n    file: string;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataChar\n{\n    /** Unique id of character */\n    id: number;\n\n    /** {@link PIXI.IBitmapFontDataPage} id */\n    page: number;\n\n    /** x-position of character in page. */\n    x: number;\n\n    /** y-position of character in page. */\n    y: number;\n\n    /** Width of character in page. */\n    width: number;\n\n    /** Height of character in page. */\n    height: number;\n\n    /** x-offset to apply when rendering character */\n    xoffset: number;\n\n    /** y-offset to apply when rendering character. */\n    yoffset: number;\n\n    /** Advancement to apply to next character. */\n    xadvance: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataKerning\n{\n    /** First character of pair */\n    first: number;\n\n    /** Second character of pair */\n    second: number;\n\n    /** x-offset to apply between first & second characters when they are next to each other. */\n    amount: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataDistanceField\n{\n    /** Type of distance field */\n    fieldType: string;\n\n    /** Range of distance */\n    distanceRange: number;\n}\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface IBitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: string;\n        distanceRange: string;\n    }[]\n}\n\n/**\n * BitmapFont format that's Text-based.\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.startsWith('info face=');\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     * @param txt - Raw string data to be converted\n     * @returns - Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        rawData.distanceField.forEach((df) => font.distanceField.push({\n            distanceRange: parseInt(df.distanceRange, 10),\n            fieldType: df.fieldType,\n        }));\n\n        return font;\n    }\n}\n", "import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        const xml = data as Document;\n\n        return 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     * @param xml\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xml: Document): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n", "import { settings } from '@pixi/core';\nimport { XMLFormat } from './XMLFormat';\n\nimport type { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     * @param data\n     * @returns - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            return XMLFormat.test(settings.ADAPTER.parseXML(data));\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     * @param xmlTxt\n     * @returns - Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        return XMLFormat.parse(settings.ADAPTER.parseXML(xmlTxt));\n    }\n}\n", "import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n\nexport type { IBitmapFontRawData } from './TextFormat';\nexport { TextFormat, XMLFormat, XMLStringFormat };\n", "import { TEXT_GRADIENT } from '@pixi/text';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n * @private\n * @param canvas\n * @param context\n * @param {object} style - The style.\n * @param resolution\n * @param {string[]} lines - The lines of text.\n * @param metrics\n * @returns {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string | CanvasGradient | CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string | string[] | CanvasGradient | CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[] | CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n", "import { utils } from '@pixi/core';\nimport { generateFillStyle } from './generateFillStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {PIXI.ICanvas} canvas\n * @param {PIXI.ICanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const rgb = utils.hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : utils.string2hex(dropShadowColor));\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n", "/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @param str\n * @private\n */\nexport function extractCharCode(str: string): number\n{\n    return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n", "/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @param text\n * @private\n */\nexport function splitTextToCharacters(text: string): string[]\n{\n    return Array.from ? Array.from(text) : text.split('');\n}\n", "import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n", "import { ALPHA_MODES, BaseTexture, MIPMAP_MODES, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { TextMetrics, TextStyle } from '@pixi/text';\nimport { BitmapFontData } from './BitmapFontData';\nimport { autoDetectFormat } from './formats';\nimport { drawGlyph, extractCharCode, resolveCharacters } from './utils';\n\nimport type { IBaseTextureOptions, ICanvas, ICanvasRenderingContext2D, SCALE_MODES } from '@pixi/core';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: utils.Dict<number>;\n}\n\ntype BaseOptions = Pick<IBaseTextureOptions, 'scaleMode' | 'mipmap' | 'anisotropicLevel' | 'alphaMode'>;\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions extends BaseOptions\n{\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * Optional width of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * Optional height of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureHeight?: number;\n\n    /**\n     * If mipmapping is enabled for texture. For instance, by default PixiJS only enables mipmapping\n     * on Power-of-Two textures. If your textureWidth or textureHeight are not power-of-two, you\n     * may consider enabling mipmapping to get better quality with lower font sizes. Note:\n     * for MSDF/SDF fonts, mipmapping is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.mipmap\n     */\n    mipmap?: MIPMAP_MODES;\n\n    /**\n     * Anisotropic filtering level of texture.\n     * @default PIXI.BaseTexture.defaultOptions.anisotropicLevel\n     */\n    anisotropicLevel?: number;\n\n    /**\n     * Default scale mode, linear, nearest. Nearest can be helpful for bitmap-style fonts.\n     * @default PIXI.BaseTexture.defaultOptions.scaleMode\n     */\n    scaleMode?: SCALE_MODES;\n\n    /**\n     * Pre multiply the image alpha.  Note: for MSDF/SDF fonts, alphaMode is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.alphaMode\n     */\n    alphaMode?: ALPHA_MODES;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     * @property {number} [resolution=1] -\n     * @property {number} [textureWidth=512] -\n     * @property {number} [textureHeight=512] -\n     * @property {number} [padding=4] -\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: utils.Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: utils.Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: utils.Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[] | utils.Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = utils.getResolutionOfUrl(page.file);\n        const pageTextures: utils.Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n                pageTextures[id].baseTexture.mipmap = MIPMAP_MODES.OFF;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string | XMLDocument | BitmapFontData,\n        textures: Texture | Texture[] | utils.Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param textStyle - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.from('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText('This is the title', { fontName: 'TitleFont' });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight,\n            ...baseOptions\n        } = Object.assign({}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: ICanvas;\n        let context: ICanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution, ...baseOptions });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const character = charsList[i];\n            const metrics = TextMetrics.measureText(character, style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                if (positionX === 0)\n                {\n                    // Avoid infinite loop (There can be some very wide char like '\\uFDFD'!)\n                    throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n", "var msdfFrag = \"// Pixi texture info\\r\\nvarying vec2 vTextureCoord;\\r\\nuniform sampler2D uSampler;\\r\\n\\r\\n// Tint\\r\\nuniform vec4 uColor;\\r\\n\\r\\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\\r\\nuniform float uFWidth;\\r\\n\\r\\nvoid main(void) {\\r\\n\\r\\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\\r\\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\\r\\n\\r\\n  // MSDF\\r\\n  float median = texColor.r + texColor.g + texColor.b -\\r\\n                  min(texColor.r, min(texColor.g, texColor.b)) -\\r\\n                  max(texColor.r, max(texColor.g, texColor.b));\\r\\n  // SDF\\r\\n  median = min(median, texColor.a);\\r\\n\\r\\n  float screenPxDistance = uFWidth * (median - 0.5);\\r\\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\\r\\n  if (median < 0.01) {\\r\\n    alpha = 0.0;\\r\\n  } else if (median > 0.99) {\\r\\n    alpha = 1.0;\\r\\n  }\\r\\n\\r\\n  // NPM Textures, NPM outputs\\r\\n  gl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\\r\\n\\r\\n}\\r\\n\";\n\nexport { msdfFrag as default };\n//# sourceMappingURL=msdf.mjs.map\n", "var msdfVert = \"// Mesh material default fragment\\r\\nattribute vec2 aVertexPosition;\\r\\nattribute vec2 aTextureCoord;\\r\\n\\r\\nuniform mat3 projectionMatrix;\\r\\nuniform mat3 translationMatrix;\\r\\nuniform mat3 uTextureMatrix;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\r\\n\\r\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\r\\n}\\r\\n\";\n\nexport { msdfVert as default };\n//# sourceMappingURL=msdf2.mjs.map\n", "import { BLEND_MODES, ObservablePoint, Point, Program, settings, Texture, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { BitmapFont } from './BitmapFont';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport { extractCharCode, splitTextToCharacters } from './utils';\n\nimport type { Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { TextStyleAlign } from '@pixi/text';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\n\ninterface PageMeshData\n{\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData\n{\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n * @example\n * import { BitmapText } from 'pixi.js';\n *\n * // in this case the font is in a file called 'desyrel.fnt'\n * const bitmapText = new BitmapText('text using a fancy font!', {\n *     fontName: 'Desyrel',\n *     fontSize: 35,\n *     align: 'right',\n * });\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n\n    /** Set to `true` if the BitmapText needs to be redrawn. */\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the width of the overall text.\n     * @private\n     */\n    protected _textWidth: number;\n\n    /**\n     * Private tracker for the height of the overall text.\n     * @private\n     */\n    protected _textHeight: number;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     * @private\n     */\n    protected _maxWidth: number;\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     * @private\n     */\n    protected _maxLineHeight: number;\n\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @private\n     */\n    protected _letterSpacing: number;\n\n    /**\n     * Text anchor.\n     * @readonly\n     * @private\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font?: BitmapFont;\n\n    /**\n     * Private tracker for the current font name.\n     * @private\n     */\n    protected _fontName: string;\n\n    /**\n     * Private tracker for the current font size.\n     * @private\n     */\n    protected _fontSize?: number;\n\n    /**\n     * Private tracker for the current text align.\n     * @type {string}\n     * @private\n     */\n    protected _align: TextStyleAlign;\n\n    /** Collection of page mesh data. */\n    protected _activePagesMeshData: PageMeshData[];\n\n    /**\n     * Private tracker for the current tint.\n     * @private\n     */\n    protected _tint = 0xFFFFFF;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering.\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    protected _roundPixels: boolean;\n\n    /** Cached char texture is destroyed when BitmapText is destroyed. */\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param text - A string that you would like the text to display.\n     * @param style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        this._activePagesMeshData = [];\n        this._textWidth = 0;\n        this._textHeight = 0;\n        this._align = align;\n        this._tint = tint;\n        this._font = undefined;\n        this._fontName = fontName;\n        this._fontSize = fontSize;\n        this.text = text;\n        this._maxWidth = maxWidth;\n        this._maxLineHeight = 0;\n        this._letterSpacing = letterSpacing;\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.dirty = true;\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._textureCache = {};\n    }\n\n    /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const fontSize = this.fontSize;\n        const scale = fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = Math.round(pos.x + charData.xOffset + (this._letterSpacing / 2));\n            charRenderData.position.y = Math.round(pos.y + charData.yOffset);\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x\n                + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        pageMeshDataPool.push(...activePagesMeshData);\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (!newPagesMeshData.includes(activePagesMeshData[i]))\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n\n        this._font = data;\n        this.dirty = false;\n    }\n\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this.fontSize / size;\n\n            const resolution = renderer._view.resolution;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     * @returns - The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     * @private\n     */\n    protected validate(): void\n    {\n        const font = BitmapFont.available[this._fontName];\n\n        if (!font)\n        {\n            throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n        }\n        if (this._font !== font)\n        {\n            this.dirty = true;\n        }\n\n        if (this.dirty)\n        {\n            this.updateText();\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The name of the BitmapFont. */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The size of the font to display. */\n    public get fontSize(): number\n    {\n        return this._fontSize ?? BitmapFont.available[this._fontName].size;\n    }\n\n    public set fontSize(value: number | undefined)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /** The text of the BitmapText object. */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /** Additional space between characters. */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n        const data = BitmapFont.available[this._fontName];\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        pageMeshDataPool.push(...this._activePagesMeshData);\n        for (const pageMeshData of this._activePagesMeshData)\n        {\n            this.removeChild(pageMeshData.mesh);\n        }\n        this._activePagesMeshData = [];\n\n        // Release references to any cached textures in page pool\n        pageMeshDataPool\n            .filter((page) => _textureCache[page.mesh.texture.baseTexture.uid])\n            .forEach((page) =>\n            {\n                page.mesh.texture = Texture.EMPTY;\n            });\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._font = null;\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n", "import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { BitmapFont } from './BitmapFont';\nimport { TextFormat, XMLStringFormat } from './formats';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { BitmapFontData } from './BitmapFontData';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(utils.path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return TextFormat.test(data) || XMLStringFormat.test(data);\n    },\n\n    async parse(asset: string, data: LoadAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const fontData: BitmapFontData = TextFormat.test(asset)\n            ? TextFormat.parse(asset)\n            : XMLStringFormat.parse(asset);\n\n        const { src } = data;\n        const { page: pages } = fontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = utils.path.join(utils.path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        return BitmapFont.install(fontData, textures, true);\n    },\n\n    async load(url: string, _options: LoadAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload(bitmapFont: BitmapFont): void\n    {\n        bitmapFont.destroy();\n    }\n} as LoaderParser<BitmapFont | string>;\n\nextensions.add(loadBitmapFont);\n"],
  "mappings": "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",
  "names": ["filters", "temp", "fragment", "fragment", "fragment", "fragment", "fragment", "vertex", "vertex", "fragment", "fragment", "fragment", "extensions", "formats", "ext", "temp", "extensions2", "indices", "indices", "indices", "indices", "tempPoint", "indices", "fragment", "vertex", "vertex", "fragment", "indices", "indices", "indices", "fragment", "vertex", "vertex", "fragment", "tempPoint"]
}
